/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.92
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.92
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Page,
  PlaceBase,
  PlaceResponse,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PageFromJSON,
    PageToJSON,
    PlaceBaseFromJSON,
    PlaceBaseToJSON,
    PlaceResponseFromJSON,
    PlaceResponseToJSON,
} from '../models';

export interface CreatePlacePlacesPlacesPostRequest {
    placeBase: PlaceBase;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeletePlacePlacesPlacesPlaceUuidDeleteRequest {
    placeUuid: string;
    softDelete?: boolean;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ForwardGeocodingPlacesGeocodingForwardGetRequest {
    searchingPlace: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetPlacePlacesPlacesPlaceUuidGetRequest {
    placeUuid: string;
    withMeta?: boolean;
    withCatalog?: boolean;
    withReviews?: boolean;
    withSchedule?: boolean;
    withCollection?: boolean;
    withBlog?: boolean;
    withTags?: boolean;
    withCategories?: boolean;
    withCompany?: boolean;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ReverseGeocodingPlacesGeocodingReverseGetRequest {
    _long: number;
    lat: number;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest {
    searchString?: string;
    page?: number;
    pageSize?: number;
    sortOn?: string;
    sortDesc?: boolean;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SearchPlacesPlacesPlacesGetRequest {
    projectUuid?: string;
    name?: string;
    addressLine1?: string;
    addressLine2?: string;
    city?: string;
    provinceState?: string;
    country?: string;
    postalZipCode?: string;
    lat?: string;
    lng?: string;
    email?: string;
    isPublic?: boolean;
    isDeleted?: boolean;
    withCompany?: boolean;
    withMeta?: boolean;
    withCatalog?: boolean;
    withReviews?: boolean;
    withSchedule?: boolean;
    withCollection?: boolean;
    withBlog?: boolean;
    withTags?: boolean;
    withCategories?: boolean;
    page?: number;
    pageSize?: number;
    sortOn?: string;
    sortDesc?: boolean;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdatePlacePlacesPlacesPlaceUuidPutRequest {
    placeUuid: string;
    placeBase: PlaceBase;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

/**
 * PlacesApi - interface
 * 
 * @export
 * @interface PlacesApiInterface
 */
export interface PlacesApiInterface {
    /**
     * Creates a Place.
     * @summary Create Place
     * @param {PlaceBase} placeBase 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApiInterface
     */
    createPlacePlacesPlacesPostRaw(requestParameters: CreatePlacePlacesPlacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>>;

    /**
     * Creates a Place.
     * Create Place
     */
    createPlacePlacesPlacesPost(requestParameters: CreatePlacePlacesPlacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse>;

    /**
     * Deletes the place with the given ID and returns True if successful
     * @summary Delete Place
     * @param {string} placeUuid 
     * @param {boolean} [softDelete] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApiInterface
     */
    deletePlacePlacesPlacesPlaceUuidDeleteRaw(requestParameters: DeletePlacePlacesPlacesPlaceUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Deletes the place with the given ID and returns True if successful
     * Delete Place
     */
    deletePlacePlacesPlacesPlaceUuidDelete(requestParameters: DeletePlacePlacesPlacesPlaceUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Forward Geocoding
     * @param {string} searchingPlace 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApiInterface
     */
    forwardGeocodingPlacesGeocodingForwardGetRaw(requestParameters: ForwardGeocodingPlacesGeocodingForwardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Forward Geocoding
     */
    forwardGeocodingPlacesGeocodingForwardGet(requestParameters: ForwardGeocodingPlacesGeocodingForwardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Gets the place information given the Place ID
     * @summary Get Place
     * @param {string} placeUuid 
     * @param {boolean} [withMeta] 
     * @param {boolean} [withCatalog] 
     * @param {boolean} [withReviews] 
     * @param {boolean} [withSchedule] 
     * @param {boolean} [withCollection] 
     * @param {boolean} [withBlog] 
     * @param {boolean} [withTags] 
     * @param {boolean} [withCategories] 
     * @param {boolean} [withCompany] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApiInterface
     */
    getPlacePlacesPlacesPlaceUuidGetRaw(requestParameters: GetPlacePlacesPlacesPlaceUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>>;

    /**
     * Gets the place information given the Place ID
     * Get Place
     */
    getPlacePlacesPlacesPlaceUuidGet(requestParameters: GetPlacePlacesPlacesPlaceUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse>;

    /**
     * 
     * @summary Reverse Geocoding
     * @param {number} _long 
     * @param {number} lat 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApiInterface
     */
    reverseGeocodingPlacesGeocodingReverseGetRaw(requestParameters: ReverseGeocodingPlacesGeocodingReverseGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Reverse Geocoding
     */
    reverseGeocodingPlacesGeocodingReverseGet(requestParameters: ReverseGeocodingPlacesGeocodingReverseGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * Search places by a search string
     * @summary Search Places By Search String
     * @param {string} [searchString] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApiInterface
     */
    searchPlacesBySearchStringPlacesSearchPlacesStringGetRaw(requestParameters: SearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>>;

    /**
     * Search places by a search string
     * Search Places By Search String
     */
    searchPlacesBySearchStringPlacesSearchPlacesStringGet(requestParameters: SearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page>;

    /**
     * Search all places and returns paginated results with Places being stored in items field. Can search by `project_uuid, name, address, address_line_2, city, province_state, country, postal_zip_code, lat, lng email` string fields or the `is_public and is_deleted` boolean fields. To search with these fields use query params with string values. For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: name). Max pagination items per page is 50. Item return format: ``` {     uuid                                **type:** string     project_uuid                        **type:** string or None      meta_uuid                           **type:** string or None      catalog_data                        **type:** dict or None      review_group_data                   **type:** dict or None      schedule_data                       **type:** dict or None      collection_data                     **type:** dict or None      blog_data                           **type:** dict or None      tags                                **type:** [TagBase] or None      categories                          **type:** [CategoryBase] or None      company                             **type:** CompanyBase or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } ```
     * @summary Search Places
     * @param {string} [projectUuid] 
     * @param {string} [name] 
     * @param {string} [addressLine1] 
     * @param {string} [addressLine2] 
     * @param {string} [city] 
     * @param {string} [provinceState] 
     * @param {string} [country] 
     * @param {string} [postalZipCode] 
     * @param {string} [lat] 
     * @param {string} [lng] 
     * @param {string} [email] 
     * @param {boolean} [isPublic] 
     * @param {boolean} [isDeleted] 
     * @param {boolean} [withCompany] 
     * @param {boolean} [withMeta] 
     * @param {boolean} [withCatalog] 
     * @param {boolean} [withReviews] 
     * @param {boolean} [withSchedule] 
     * @param {boolean} [withCollection] 
     * @param {boolean} [withBlog] 
     * @param {boolean} [withTags] 
     * @param {boolean} [withCategories] 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApiInterface
     */
    searchPlacesPlacesPlacesGetRaw(requestParameters: SearchPlacesPlacesPlacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>>;

    /**
     * Search all places and returns paginated results with Places being stored in items field. Can search by `project_uuid, name, address, address_line_2, city, province_state, country, postal_zip_code, lat, lng email` string fields or the `is_public and is_deleted` boolean fields. To search with these fields use query params with string values. For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: name). Max pagination items per page is 50. Item return format: ``` {     uuid                                **type:** string     project_uuid                        **type:** string or None      meta_uuid                           **type:** string or None      catalog_data                        **type:** dict or None      review_group_data                   **type:** dict or None      schedule_data                       **type:** dict or None      collection_data                     **type:** dict or None      blog_data                           **type:** dict or None      tags                                **type:** [TagBase] or None      categories                          **type:** [CategoryBase] or None      company                             **type:** CompanyBase or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } ```
     * Search Places
     */
    searchPlacesPlacesPlacesGet(requestParameters: SearchPlacesPlacesPlacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page>;

    /**
     * Update Place with given info, only updating the fields supplied. Place Uuid must be sent however.
     * @summary Update Place
     * @param {string} placeUuid 
     * @param {PlaceBase} placeBase 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlacesApiInterface
     */
    updatePlacePlacesPlacesPlaceUuidPutRaw(requestParameters: UpdatePlacePlacesPlacesPlaceUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>>;

    /**
     * Update Place with given info, only updating the fields supplied. Place Uuid must be sent however.
     * Update Place
     */
    updatePlacePlacesPlacesPlaceUuidPut(requestParameters: UpdatePlacePlacesPlacesPlaceUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse>;

}

/**
 * 
 */
export class PlacesApi extends runtime.BaseAPI implements PlacesApiInterface {

    /**
     * Creates a Place.
     * Create Place
     */
    async createPlacePlacesPlacesPostRaw(requestParameters: CreatePlacePlacesPlacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>> {
        if (requestParameters.placeBase === null || requestParameters.placeBase === undefined) {
            throw new runtime.RequiredError('placeBase','Required parameter requestParameters.placeBase was null or undefined when calling createPlacePlacesPlacesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/places/places`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaceBaseToJSON(requestParameters.placeBase),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceResponseFromJSON(jsonValue));
    }

    /**
     * Creates a Place.
     * Create Place
     */
    async createPlacePlacesPlacesPost(requestParameters: CreatePlacePlacesPlacesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse> {
        const response = await this.createPlacePlacesPlacesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the place with the given ID and returns True if successful
     * Delete Place
     */
    async deletePlacePlacesPlacesPlaceUuidDeleteRaw(requestParameters: DeletePlacePlacesPlacesPlaceUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.placeUuid === null || requestParameters.placeUuid === undefined) {
            throw new runtime.RequiredError('placeUuid','Required parameter requestParameters.placeUuid was null or undefined when calling deletePlacePlacesPlacesPlaceUuidDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.softDelete !== undefined) {
            queryParameters['soft_delete'] = requestParameters.softDelete;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/places/places/{place_uuid}`.replace(`{${"place_uuid"}}`, encodeURIComponent(String(requestParameters.placeUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deletes the place with the given ID and returns True if successful
     * Delete Place
     */
    async deletePlacePlacesPlacesPlaceUuidDelete(requestParameters: DeletePlacePlacesPlacesPlaceUuidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deletePlacePlacesPlacesPlaceUuidDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Forward Geocoding
     */
    async forwardGeocodingPlacesGeocodingForwardGetRaw(requestParameters: ForwardGeocodingPlacesGeocodingForwardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.searchingPlace === null || requestParameters.searchingPlace === undefined) {
            throw new runtime.RequiredError('searchingPlace','Required parameter requestParameters.searchingPlace was null or undefined when calling forwardGeocodingPlacesGeocodingForwardGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.searchingPlace !== undefined) {
            queryParameters['searching_place'] = requestParameters.searchingPlace;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/places/geocoding/forward`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Forward Geocoding
     */
    async forwardGeocodingPlacesGeocodingForwardGet(requestParameters: ForwardGeocodingPlacesGeocodingForwardGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.forwardGeocodingPlacesGeocodingForwardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the place information given the Place ID
     * Get Place
     */
    async getPlacePlacesPlacesPlaceUuidGetRaw(requestParameters: GetPlacePlacesPlacesPlaceUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>> {
        if (requestParameters.placeUuid === null || requestParameters.placeUuid === undefined) {
            throw new runtime.RequiredError('placeUuid','Required parameter requestParameters.placeUuid was null or undefined when calling getPlacePlacesPlacesPlaceUuidGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.withMeta !== undefined) {
            queryParameters['with_meta'] = requestParameters.withMeta;
        }

        if (requestParameters.withCatalog !== undefined) {
            queryParameters['with_catalog'] = requestParameters.withCatalog;
        }

        if (requestParameters.withReviews !== undefined) {
            queryParameters['with_reviews'] = requestParameters.withReviews;
        }

        if (requestParameters.withSchedule !== undefined) {
            queryParameters['with_schedule'] = requestParameters.withSchedule;
        }

        if (requestParameters.withCollection !== undefined) {
            queryParameters['with_collection'] = requestParameters.withCollection;
        }

        if (requestParameters.withBlog !== undefined) {
            queryParameters['with_blog'] = requestParameters.withBlog;
        }

        if (requestParameters.withTags !== undefined) {
            queryParameters['with_tags'] = requestParameters.withTags;
        }

        if (requestParameters.withCategories !== undefined) {
            queryParameters['with_categories'] = requestParameters.withCategories;
        }

        if (requestParameters.withCompany !== undefined) {
            queryParameters['with_company'] = requestParameters.withCompany;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/places/places/{place_uuid}`.replace(`{${"place_uuid"}}`, encodeURIComponent(String(requestParameters.placeUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceResponseFromJSON(jsonValue));
    }

    /**
     * Gets the place information given the Place ID
     * Get Place
     */
    async getPlacePlacesPlacesPlaceUuidGet(requestParameters: GetPlacePlacesPlacesPlaceUuidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse> {
        const response = await this.getPlacePlacesPlacesPlaceUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reverse Geocoding
     */
    async reverseGeocodingPlacesGeocodingReverseGetRaw(requestParameters: ReverseGeocodingPlacesGeocodingReverseGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters._long === null || requestParameters._long === undefined) {
            throw new runtime.RequiredError('_long','Required parameter requestParameters._long was null or undefined when calling reverseGeocodingPlacesGeocodingReverseGet.');
        }

        if (requestParameters.lat === null || requestParameters.lat === undefined) {
            throw new runtime.RequiredError('lat','Required parameter requestParameters.lat was null or undefined when calling reverseGeocodingPlacesGeocodingReverseGet.');
        }

        const queryParameters: any = {};

        if (requestParameters._long !== undefined) {
            queryParameters['long'] = requestParameters._long;
        }

        if (requestParameters.lat !== undefined) {
            queryParameters['lat'] = requestParameters.lat;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/places/geocoding/reverse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Reverse Geocoding
     */
    async reverseGeocodingPlacesGeocodingReverseGet(requestParameters: ReverseGeocodingPlacesGeocodingReverseGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.reverseGeocodingPlacesGeocodingReverseGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search places by a search string
     * Search Places By Search String
     */
    async searchPlacesBySearchStringPlacesSearchPlacesStringGetRaw(requestParameters: SearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.searchString !== undefined) {
            queryParameters['search_string'] = requestParameters.searchString;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.sortOn !== undefined) {
            queryParameters['sort_on'] = requestParameters.sortOn;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/places/search/places/string`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Search places by a search string
     * Search Places By Search String
     */
    async searchPlacesBySearchStringPlacesSearchPlacesStringGet(requestParameters: SearchPlacesBySearchStringPlacesSearchPlacesStringGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.searchPlacesBySearchStringPlacesSearchPlacesStringGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search all places and returns paginated results with Places being stored in items field. Can search by `project_uuid, name, address, address_line_2, city, province_state, country, postal_zip_code, lat, lng email` string fields or the `is_public and is_deleted` boolean fields. To search with these fields use query params with string values. For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: name). Max pagination items per page is 50. Item return format: ``` {     uuid                                **type:** string     project_uuid                        **type:** string or None      meta_uuid                           **type:** string or None      catalog_data                        **type:** dict or None      review_group_data                   **type:** dict or None      schedule_data                       **type:** dict or None      collection_data                     **type:** dict or None      blog_data                           **type:** dict or None      tags                                **type:** [TagBase] or None      categories                          **type:** [CategoryBase] or None      company                             **type:** CompanyBase or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } ```
     * Search Places
     */
    async searchPlacesPlacesPlacesGetRaw(requestParameters: SearchPlacesPlacesPlacesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.projectUuid !== undefined) {
            queryParameters['project_uuid'] = requestParameters.projectUuid;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.addressLine1 !== undefined) {
            queryParameters['address_line_1'] = requestParameters.addressLine1;
        }

        if (requestParameters.addressLine2 !== undefined) {
            queryParameters['address_line_2'] = requestParameters.addressLine2;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.provinceState !== undefined) {
            queryParameters['province_state'] = requestParameters.provinceState;
        }

        if (requestParameters.country !== undefined) {
            queryParameters['country'] = requestParameters.country;
        }

        if (requestParameters.postalZipCode !== undefined) {
            queryParameters['postal_zip_code'] = requestParameters.postalZipCode;
        }

        if (requestParameters.lat !== undefined) {
            queryParameters['lat'] = requestParameters.lat;
        }

        if (requestParameters.lng !== undefined) {
            queryParameters['lng'] = requestParameters.lng;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.isPublic !== undefined) {
            queryParameters['is_public'] = requestParameters.isPublic;
        }

        if (requestParameters.isDeleted !== undefined) {
            queryParameters['is_deleted'] = requestParameters.isDeleted;
        }

        if (requestParameters.withCompany !== undefined) {
            queryParameters['with_company'] = requestParameters.withCompany;
        }

        if (requestParameters.withMeta !== undefined) {
            queryParameters['with_meta'] = requestParameters.withMeta;
        }

        if (requestParameters.withCatalog !== undefined) {
            queryParameters['with_catalog'] = requestParameters.withCatalog;
        }

        if (requestParameters.withReviews !== undefined) {
            queryParameters['with_reviews'] = requestParameters.withReviews;
        }

        if (requestParameters.withSchedule !== undefined) {
            queryParameters['with_schedule'] = requestParameters.withSchedule;
        }

        if (requestParameters.withCollection !== undefined) {
            queryParameters['with_collection'] = requestParameters.withCollection;
        }

        if (requestParameters.withBlog !== undefined) {
            queryParameters['with_blog'] = requestParameters.withBlog;
        }

        if (requestParameters.withTags !== undefined) {
            queryParameters['with_tags'] = requestParameters.withTags;
        }

        if (requestParameters.withCategories !== undefined) {
            queryParameters['with_categories'] = requestParameters.withCategories;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.sortOn !== undefined) {
            queryParameters['sort_on'] = requestParameters.sortOn;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/places/places`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Search all places and returns paginated results with Places being stored in items field. Can search by `project_uuid, name, address, address_line_2, city, province_state, country, postal_zip_code, lat, lng email` string fields or the `is_public and is_deleted` boolean fields. To search with these fields use query params with string values. For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: name). Max pagination items per page is 50. Item return format: ``` {     uuid                                **type:** string     project_uuid                        **type:** string or None      meta_uuid                           **type:** string or None      catalog_data                        **type:** dict or None      review_group_data                   **type:** dict or None      schedule_data                       **type:** dict or None      collection_data                     **type:** dict or None      blog_data                           **type:** dict or None      tags                                **type:** [TagBase] or None      categories                          **type:** [CategoryBase] or None      company                             **type:** CompanyBase or None      created_at                          **type:** string or None      updated_at                          **type:** string or None      deleted_at                          **type:** string or None  } ```
     * Search Places
     */
    async searchPlacesPlacesPlacesGet(requestParameters: SearchPlacesPlacesPlacesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.searchPlacesPlacesPlacesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Place with given info, only updating the fields supplied. Place Uuid must be sent however.
     * Update Place
     */
    async updatePlacePlacesPlacesPlaceUuidPutRaw(requestParameters: UpdatePlacePlacesPlacesPlaceUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaceResponse>> {
        if (requestParameters.placeUuid === null || requestParameters.placeUuid === undefined) {
            throw new runtime.RequiredError('placeUuid','Required parameter requestParameters.placeUuid was null or undefined when calling updatePlacePlacesPlacesPlaceUuidPut.');
        }

        if (requestParameters.placeBase === null || requestParameters.placeBase === undefined) {
            throw new runtime.RequiredError('placeBase','Required parameter requestParameters.placeBase was null or undefined when calling updatePlacePlacesPlacesPlaceUuidPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/places/places/{place_uuid}`.replace(`{${"place_uuid"}}`, encodeURIComponent(String(requestParameters.placeUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PlaceBaseToJSON(requestParameters.placeBase),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaceResponseFromJSON(jsonValue));
    }

    /**
     * Update Place with given info, only updating the fields supplied. Place Uuid must be sent however.
     * Update Place
     */
    async updatePlacePlacesPlacesPlaceUuidPut(requestParameters: UpdatePlacePlacesPlacesPlaceUuidPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaceResponse> {
        const response = await this.updatePlacePlacesPlacesPlaceUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
