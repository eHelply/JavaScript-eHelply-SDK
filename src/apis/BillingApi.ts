/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.74
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.74
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost,
    BodyAttachPaymentToProjectBillingAttachPaymentToProjectPostFromJSON,
    BodyAttachPaymentToProjectBillingAttachPaymentToProjectPostToJSON,
    BodyProcessPaymentBillingProcessPaymentPost,
    BodyProcessPaymentBillingProcessPaymentPostFromJSON,
    BodyProcessPaymentBillingProcessPaymentPostToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PaymentMethodResponse,
    PaymentMethodResponseFromJSON,
    PaymentMethodResponseToJSON,
    StripeAccountResponse,
    StripeAccountResponseFromJSON,
    StripeAccountResponseToJSON,
} from '../models';

export interface AttachPaymentToProjectBillingAttachPaymentToProjectPostRequest {
    bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost: BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface AttachPaymentToProjectBillingAttachPaymentToProjectPost0Request {
    bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost: BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateBillingAccountBillingCreateBillingAccountPostRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateBillingAccountBillingCreateBillingAccountPost0Request {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteBillingAccountBillingDeleteBillingAccountDeleteRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteBillingAccountBillingDeleteBillingAccountDelete0Request {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetClientSecretBillingRetrieveSecretGetRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetClientSecretBillingRetrieveSecretGet0Request {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface HasPaymentBillingHasPaymentGetRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface HasPaymentBillingHasPaymentGet0Request {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ProcessPaymentBillingProcessPaymentPostRequest {
    bodyProcessPaymentBillingProcessPaymentPost: BodyProcessPaymentBillingProcessPaymentPost;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ProcessPaymentBillingProcessPaymentPost0Request {
    bodyProcessPaymentBillingProcessPaymentPost: BodyProcessPaymentBillingProcessPaymentPost;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ReconcilePaymentMethodsBillingReconcilePaymentGetRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface RemovePaymentMethodBillingRemovePaymentMethodDeleteRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface RemovePaymentMethodBillingRemovePaymentMethodDelete0Request {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ViewPaymentMethodBillingViewPaymentMethodGetRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ViewPaymentMethodBillingViewPaymentMethodGet0Request {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

/**
 * BillingApi - interface
 * 
 * @export
 * @interface BillingApiInterface
 */
export interface BillingApiInterface {
    /**
     * 
     * @summary Attach Payment To Project
     * @param {BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost} bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    attachPaymentToProjectBillingAttachPaymentToProjectPostRaw(requestParameters: AttachPaymentToProjectBillingAttachPaymentToProjectPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Attach Payment To Project
     */
    attachPaymentToProjectBillingAttachPaymentToProjectPost(requestParameters: AttachPaymentToProjectBillingAttachPaymentToProjectPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Attach Payment To Project
     * @param {BodyAttachPaymentToProjectBillingAttachPaymentToProjectPost} bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    attachPaymentToProjectBillingAttachPaymentToProjectPost_1Raw(requestParameters: AttachPaymentToProjectBillingAttachPaymentToProjectPost0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Attach Payment To Project
     */
    attachPaymentToProjectBillingAttachPaymentToProjectPost_1(requestParameters: AttachPaymentToProjectBillingAttachPaymentToProjectPost0Request, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Create Billing Account
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    createBillingAccountBillingCreateBillingAccountPostRaw(requestParameters: CreateBillingAccountBillingCreateBillingAccountPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StripeAccountResponse>>;

    /**
     * Create Billing Account
     */
    createBillingAccountBillingCreateBillingAccountPost(requestParameters: CreateBillingAccountBillingCreateBillingAccountPostRequest, initOverrides?: RequestInit): Promise<StripeAccountResponse>;

    /**
     * 
     * @summary Create Billing Account
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    createBillingAccountBillingCreateBillingAccountPost_2Raw(requestParameters: CreateBillingAccountBillingCreateBillingAccountPost0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StripeAccountResponse>>;

    /**
     * Create Billing Account
     */
    createBillingAccountBillingCreateBillingAccountPost_2(requestParameters: CreateBillingAccountBillingCreateBillingAccountPost0Request, initOverrides?: RequestInit): Promise<StripeAccountResponse>;

    /**
     * 
     * @summary Delete Billing Account
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    deleteBillingAccountBillingDeleteBillingAccountDeleteRaw(requestParameters: DeleteBillingAccountBillingDeleteBillingAccountDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete Billing Account
     */
    deleteBillingAccountBillingDeleteBillingAccountDelete(requestParameters: DeleteBillingAccountBillingDeleteBillingAccountDeleteRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Delete Billing Account
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    deleteBillingAccountBillingDeleteBillingAccountDelete_3Raw(requestParameters: DeleteBillingAccountBillingDeleteBillingAccountDelete0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete Billing Account
     */
    deleteBillingAccountBillingDeleteBillingAccountDelete_3(requestParameters: DeleteBillingAccountBillingDeleteBillingAccountDelete0Request, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Client Secret
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    getClientSecretBillingRetrieveSecretGetRaw(requestParameters: GetClientSecretBillingRetrieveSecretGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Client Secret
     */
    getClientSecretBillingRetrieveSecretGet(requestParameters: GetClientSecretBillingRetrieveSecretGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Client Secret
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    getClientSecretBillingRetrieveSecretGet_4Raw(requestParameters: GetClientSecretBillingRetrieveSecretGet0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Client Secret
     */
    getClientSecretBillingRetrieveSecretGet_4(requestParameters: GetClientSecretBillingRetrieveSecretGet0Request, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Has Payment
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    hasPaymentBillingHasPaymentGetRaw(requestParameters: HasPaymentBillingHasPaymentGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Has Payment
     */
    hasPaymentBillingHasPaymentGet(requestParameters: HasPaymentBillingHasPaymentGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Has Payment
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    hasPaymentBillingHasPaymentGet_5Raw(requestParameters: HasPaymentBillingHasPaymentGet0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Has Payment
     */
    hasPaymentBillingHasPaymentGet_5(requestParameters: HasPaymentBillingHasPaymentGet0Request, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Process Payment
     * @param {BodyProcessPaymentBillingProcessPaymentPost} bodyProcessPaymentBillingProcessPaymentPost 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    processPaymentBillingProcessPaymentPostRaw(requestParameters: ProcessPaymentBillingProcessPaymentPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Process Payment
     */
    processPaymentBillingProcessPaymentPost(requestParameters: ProcessPaymentBillingProcessPaymentPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Process Payment
     * @param {BodyProcessPaymentBillingProcessPaymentPost} bodyProcessPaymentBillingProcessPaymentPost 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    processPaymentBillingProcessPaymentPost_6Raw(requestParameters: ProcessPaymentBillingProcessPaymentPost0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Process Payment
     */
    processPaymentBillingProcessPaymentPost_6(requestParameters: ProcessPaymentBillingProcessPaymentPost0Request, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Reconcile Payment Methods
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    reconcilePaymentMethodsBillingReconcilePaymentGetRaw(requestParameters: ReconcilePaymentMethodsBillingReconcilePaymentGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>>;

    /**
     * Reconcile Payment Methods
     */
    reconcilePaymentMethodsBillingReconcilePaymentGet(requestParameters: ReconcilePaymentMethodsBillingReconcilePaymentGetRequest, initOverrides?: RequestInit): Promise<boolean>;

    /**
     * 
     * @summary Remove Payment Method
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    removePaymentMethodBillingRemovePaymentMethodDeleteRaw(requestParameters: RemovePaymentMethodBillingRemovePaymentMethodDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Remove Payment Method
     */
    removePaymentMethodBillingRemovePaymentMethodDelete(requestParameters: RemovePaymentMethodBillingRemovePaymentMethodDeleteRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Remove Payment Method
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    removePaymentMethodBillingRemovePaymentMethodDelete_7Raw(requestParameters: RemovePaymentMethodBillingRemovePaymentMethodDelete0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Remove Payment Method
     */
    removePaymentMethodBillingRemovePaymentMethodDelete_7(requestParameters: RemovePaymentMethodBillingRemovePaymentMethodDelete0Request, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary View Payment Method
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    viewPaymentMethodBillingViewPaymentMethodGetRaw(requestParameters: ViewPaymentMethodBillingViewPaymentMethodGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentMethodResponse>>>;

    /**
     * View Payment Method
     */
    viewPaymentMethodBillingViewPaymentMethodGet(requestParameters: ViewPaymentMethodBillingViewPaymentMethodGetRequest, initOverrides?: RequestInit): Promise<Array<PaymentMethodResponse>>;

    /**
     * 
     * @summary View Payment Method
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BillingApiInterface
     */
    viewPaymentMethodBillingViewPaymentMethodGet_8Raw(requestParameters: ViewPaymentMethodBillingViewPaymentMethodGet0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentMethodResponse>>>;

    /**
     * View Payment Method
     */
    viewPaymentMethodBillingViewPaymentMethodGet_8(requestParameters: ViewPaymentMethodBillingViewPaymentMethodGet0Request, initOverrides?: RequestInit): Promise<Array<PaymentMethodResponse>>;

}

/**
 * 
 */
export class BillingApi extends runtime.BaseAPI implements BillingApiInterface {

    /**
     * Attach Payment To Project
     */
    async attachPaymentToProjectBillingAttachPaymentToProjectPostRaw(requestParameters: AttachPaymentToProjectBillingAttachPaymentToProjectPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost === null || requestParameters.bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost === undefined) {
            throw new runtime.RequiredError('bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost','Required parameter requestParameters.bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost was null or undefined when calling attachPaymentToProjectBillingAttachPaymentToProjectPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/attach_payment_to_project`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyAttachPaymentToProjectBillingAttachPaymentToProjectPostToJSON(requestParameters.bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Attach Payment To Project
     */
    async attachPaymentToProjectBillingAttachPaymentToProjectPost(requestParameters: AttachPaymentToProjectBillingAttachPaymentToProjectPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.attachPaymentToProjectBillingAttachPaymentToProjectPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attach Payment To Project
     */
    async attachPaymentToProjectBillingAttachPaymentToProjectPost_1Raw(requestParameters: AttachPaymentToProjectBillingAttachPaymentToProjectPost0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost === null || requestParameters.bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost === undefined) {
            throw new runtime.RequiredError('bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost','Required parameter requestParameters.bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost was null or undefined when calling attachPaymentToProjectBillingAttachPaymentToProjectPost_1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/attach_payment_to_project`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyAttachPaymentToProjectBillingAttachPaymentToProjectPostToJSON(requestParameters.bodyAttachPaymentToProjectBillingAttachPaymentToProjectPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Attach Payment To Project
     */
    async attachPaymentToProjectBillingAttachPaymentToProjectPost_1(requestParameters: AttachPaymentToProjectBillingAttachPaymentToProjectPost0Request, initOverrides?: RequestInit): Promise<any> {
        const response = await this.attachPaymentToProjectBillingAttachPaymentToProjectPost_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Billing Account
     */
    async createBillingAccountBillingCreateBillingAccountPostRaw(requestParameters: CreateBillingAccountBillingCreateBillingAccountPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StripeAccountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/create_billing_account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StripeAccountResponseFromJSON(jsonValue));
    }

    /**
     * Create Billing Account
     */
    async createBillingAccountBillingCreateBillingAccountPost(requestParameters: CreateBillingAccountBillingCreateBillingAccountPostRequest = {}, initOverrides?: RequestInit): Promise<StripeAccountResponse> {
        const response = await this.createBillingAccountBillingCreateBillingAccountPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Billing Account
     */
    async createBillingAccountBillingCreateBillingAccountPost_2Raw(requestParameters: CreateBillingAccountBillingCreateBillingAccountPost0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StripeAccountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/create_billing_account`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StripeAccountResponseFromJSON(jsonValue));
    }

    /**
     * Create Billing Account
     */
    async createBillingAccountBillingCreateBillingAccountPost_2(requestParameters: CreateBillingAccountBillingCreateBillingAccountPost0Request = {}, initOverrides?: RequestInit): Promise<StripeAccountResponse> {
        const response = await this.createBillingAccountBillingCreateBillingAccountPost_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Billing Account
     */
    async deleteBillingAccountBillingDeleteBillingAccountDeleteRaw(requestParameters: DeleteBillingAccountBillingDeleteBillingAccountDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/delete_billing_account`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete Billing Account
     */
    async deleteBillingAccountBillingDeleteBillingAccountDelete(requestParameters: DeleteBillingAccountBillingDeleteBillingAccountDeleteRequest = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.deleteBillingAccountBillingDeleteBillingAccountDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Billing Account
     */
    async deleteBillingAccountBillingDeleteBillingAccountDelete_3Raw(requestParameters: DeleteBillingAccountBillingDeleteBillingAccountDelete0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/delete_billing_account`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete Billing Account
     */
    async deleteBillingAccountBillingDeleteBillingAccountDelete_3(requestParameters: DeleteBillingAccountBillingDeleteBillingAccountDelete0Request = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.deleteBillingAccountBillingDeleteBillingAccountDelete_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Client Secret
     */
    async getClientSecretBillingRetrieveSecretGetRaw(requestParameters: GetClientSecretBillingRetrieveSecretGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/retrieve_secret`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Client Secret
     */
    async getClientSecretBillingRetrieveSecretGet(requestParameters: GetClientSecretBillingRetrieveSecretGetRequest = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getClientSecretBillingRetrieveSecretGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Client Secret
     */
    async getClientSecretBillingRetrieveSecretGet_4Raw(requestParameters: GetClientSecretBillingRetrieveSecretGet0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/retrieve_secret`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Client Secret
     */
    async getClientSecretBillingRetrieveSecretGet_4(requestParameters: GetClientSecretBillingRetrieveSecretGet0Request = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getClientSecretBillingRetrieveSecretGet_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Has Payment
     */
    async hasPaymentBillingHasPaymentGetRaw(requestParameters: HasPaymentBillingHasPaymentGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/has_payment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Has Payment
     */
    async hasPaymentBillingHasPaymentGet(requestParameters: HasPaymentBillingHasPaymentGetRequest = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.hasPaymentBillingHasPaymentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Has Payment
     */
    async hasPaymentBillingHasPaymentGet_5Raw(requestParameters: HasPaymentBillingHasPaymentGet0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/has_payment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Has Payment
     */
    async hasPaymentBillingHasPaymentGet_5(requestParameters: HasPaymentBillingHasPaymentGet0Request = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.hasPaymentBillingHasPaymentGet_5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process Payment
     */
    async processPaymentBillingProcessPaymentPostRaw(requestParameters: ProcessPaymentBillingProcessPaymentPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bodyProcessPaymentBillingProcessPaymentPost === null || requestParameters.bodyProcessPaymentBillingProcessPaymentPost === undefined) {
            throw new runtime.RequiredError('bodyProcessPaymentBillingProcessPaymentPost','Required parameter requestParameters.bodyProcessPaymentBillingProcessPaymentPost was null or undefined when calling processPaymentBillingProcessPaymentPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/process_payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyProcessPaymentBillingProcessPaymentPostToJSON(requestParameters.bodyProcessPaymentBillingProcessPaymentPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Process Payment
     */
    async processPaymentBillingProcessPaymentPost(requestParameters: ProcessPaymentBillingProcessPaymentPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.processPaymentBillingProcessPaymentPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Process Payment
     */
    async processPaymentBillingProcessPaymentPost_6Raw(requestParameters: ProcessPaymentBillingProcessPaymentPost0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bodyProcessPaymentBillingProcessPaymentPost === null || requestParameters.bodyProcessPaymentBillingProcessPaymentPost === undefined) {
            throw new runtime.RequiredError('bodyProcessPaymentBillingProcessPaymentPost','Required parameter requestParameters.bodyProcessPaymentBillingProcessPaymentPost was null or undefined when calling processPaymentBillingProcessPaymentPost_6.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/process_payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyProcessPaymentBillingProcessPaymentPostToJSON(requestParameters.bodyProcessPaymentBillingProcessPaymentPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Process Payment
     */
    async processPaymentBillingProcessPaymentPost_6(requestParameters: ProcessPaymentBillingProcessPaymentPost0Request, initOverrides?: RequestInit): Promise<any> {
        const response = await this.processPaymentBillingProcessPaymentPost_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reconcile Payment Methods
     */
    async reconcilePaymentMethodsBillingReconcilePaymentGetRaw(requestParameters: ReconcilePaymentMethodsBillingReconcilePaymentGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/reconcile_payment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Reconcile Payment Methods
     */
    async reconcilePaymentMethodsBillingReconcilePaymentGet(requestParameters: ReconcilePaymentMethodsBillingReconcilePaymentGetRequest = {}, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.reconcilePaymentMethodsBillingReconcilePaymentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Payment Method
     */
    async removePaymentMethodBillingRemovePaymentMethodDeleteRaw(requestParameters: RemovePaymentMethodBillingRemovePaymentMethodDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/remove_payment_method`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Remove Payment Method
     */
    async removePaymentMethodBillingRemovePaymentMethodDelete(requestParameters: RemovePaymentMethodBillingRemovePaymentMethodDeleteRequest = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.removePaymentMethodBillingRemovePaymentMethodDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Payment Method
     */
    async removePaymentMethodBillingRemovePaymentMethodDelete_7Raw(requestParameters: RemovePaymentMethodBillingRemovePaymentMethodDelete0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/remove_payment_method`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Remove Payment Method
     */
    async removePaymentMethodBillingRemovePaymentMethodDelete_7(requestParameters: RemovePaymentMethodBillingRemovePaymentMethodDelete0Request = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.removePaymentMethodBillingRemovePaymentMethodDelete_7Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * View Payment Method
     */
    async viewPaymentMethodBillingViewPaymentMethodGetRaw(requestParameters: ViewPaymentMethodBillingViewPaymentMethodGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentMethodResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/view_payment_method`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentMethodResponseFromJSON));
    }

    /**
     * View Payment Method
     */
    async viewPaymentMethodBillingViewPaymentMethodGet(requestParameters: ViewPaymentMethodBillingViewPaymentMethodGetRequest = {}, initOverrides?: RequestInit): Promise<Array<PaymentMethodResponse>> {
        const response = await this.viewPaymentMethodBillingViewPaymentMethodGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * View Payment Method
     */
    async viewPaymentMethodBillingViewPaymentMethodGet_8Raw(requestParameters: ViewPaymentMethodBillingViewPaymentMethodGet0Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentMethodResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/billing/view_payment_method`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentMethodResponseFromJSON));
    }

    /**
     * View Payment Method
     */
    async viewPaymentMethodBillingViewPaymentMethodGet_8(requestParameters: ViewPaymentMethodBillingViewPaymentMethodGet0Request = {}, initOverrides?: RequestInit): Promise<Array<PaymentMethodResponse>> {
        const response = await this.viewPaymentMethodBillingViewPaymentMethodGet_8Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
