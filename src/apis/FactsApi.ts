/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.122
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.122
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DeleteFact200Response,
    DeleteFact200ResponseFromJSON,
    DeleteFact200ResponseToJSON,
    Fact,
    FactFromJSON,
    FactToJSON,
    FactCreate,
    FactCreateFromJSON,
    FactCreateToJSON,
    GetAppointment403Response,
    GetAppointment403ResponseFromJSON,
    GetAppointment403ResponseToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SaveFact200Response,
    SaveFact200ResponseFromJSON,
    SaveFact200ResponseToJSON,
} from '../models';

export interface DeleteFactRequest {
    factName: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteFact0Request {
    factName: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetFactRequest {
    factName: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetFact0Request {
    factName: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetFactsRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetFacts0Request {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SaveFactRequest {
    factCreate: FactCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SaveFact0Request {
    factCreate: FactCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

/**
 * FactsApi - interface
 * 
 * @export
 * @interface FactsApiInterface
 */
export interface FactsApiInterface {
    /**
     * 
     * @summary Deletefact
     * @param {string} factName 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    deleteFactRaw(requestParameters: DeleteFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteFact200Response>>;

    /**
     * Deletefact
     */
    deleteFact(requestParameters: DeleteFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteFact200Response>;

    /**
     * 
     * @summary Deletefact
     * @param {string} factName 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    deleteFact_1Raw(requestParameters: DeleteFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteFact200Response>>;

    /**
     * Deletefact
     */
    deleteFact_1(requestParameters: DeleteFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteFact200Response>;

    /**
     * 
     * @summary Getfact
     * @param {string} factName 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    getFactRaw(requestParameters: GetFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Fact>>;

    /**
     * Getfact
     */
    getFact(requestParameters: GetFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Fact>;

    /**
     * 
     * @summary Getfact
     * @param {string} factName 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    getFact_2Raw(requestParameters: GetFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Fact>>;

    /**
     * Getfact
     */
    getFact_2(requestParameters: GetFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Fact>;

    /**
     * 
     * @summary Getfacts
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    getFactsRaw(requestParameters: GetFactsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Fact>>>;

    /**
     * Getfacts
     */
    getFacts(requestParameters: GetFactsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Fact>>;

    /**
     * 
     * @summary Getfacts
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    getFacts_3Raw(requestParameters: GetFacts0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Fact>>>;

    /**
     * Getfacts
     */
    getFacts_3(requestParameters: GetFacts0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Fact>>;

    /**
     * 
     * @summary Savefact
     * @param {FactCreate} factCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    saveFactRaw(requestParameters: SaveFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SaveFact200Response>>;

    /**
     * Savefact
     */
    saveFact(requestParameters: SaveFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SaveFact200Response>;

    /**
     * 
     * @summary Savefact
     * @param {FactCreate} factCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FactsApiInterface
     */
    saveFact_4Raw(requestParameters: SaveFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SaveFact200Response>>;

    /**
     * Savefact
     */
    saveFact_4(requestParameters: SaveFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SaveFact200Response>;

}

/**
 * 
 */
export class FactsApi extends runtime.BaseAPI implements FactsApiInterface {

    /**
     * Deletefact
     */
    async deleteFactRaw(requestParameters: DeleteFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteFact200Response>> {
        if (requestParameters.factName === null || requestParameters.factName === undefined) {
            throw new runtime.RequiredError('factName','Required parameter requestParameters.factName was null or undefined when calling deleteFact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/facts/facts/{fact_name}`.replace(`{${"fact_name"}}`, encodeURIComponent(String(requestParameters.factName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFact200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletefact
     */
    async deleteFact(requestParameters: DeleteFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteFact200Response> {
        const response = await this.deleteFactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletefact
     */
    async deleteFact_1Raw(requestParameters: DeleteFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteFact200Response>> {
        if (requestParameters.factName === null || requestParameters.factName === undefined) {
            throw new runtime.RequiredError('factName','Required parameter requestParameters.factName was null or undefined when calling deleteFact_1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/facts/facts/{fact_name}`.replace(`{${"fact_name"}}`, encodeURIComponent(String(requestParameters.factName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFact200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletefact
     */
    async deleteFact_1(requestParameters: DeleteFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteFact200Response> {
        const response = await this.deleteFact_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getfact
     */
    async getFactRaw(requestParameters: GetFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Fact>> {
        if (requestParameters.factName === null || requestParameters.factName === undefined) {
            throw new runtime.RequiredError('factName','Required parameter requestParameters.factName was null or undefined when calling getFact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/facts/facts/{fact_name}`.replace(`{${"fact_name"}}`, encodeURIComponent(String(requestParameters.factName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FactFromJSON(jsonValue));
    }

    /**
     * Getfact
     */
    async getFact(requestParameters: GetFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Fact> {
        const response = await this.getFactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getfact
     */
    async getFact_2Raw(requestParameters: GetFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Fact>> {
        if (requestParameters.factName === null || requestParameters.factName === undefined) {
            throw new runtime.RequiredError('factName','Required parameter requestParameters.factName was null or undefined when calling getFact_2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/facts/facts/{fact_name}`.replace(`{${"fact_name"}}`, encodeURIComponent(String(requestParameters.factName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FactFromJSON(jsonValue));
    }

    /**
     * Getfact
     */
    async getFact_2(requestParameters: GetFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Fact> {
        const response = await this.getFact_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getfacts
     */
    async getFactsRaw(requestParameters: GetFactsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Fact>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/facts/facts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FactFromJSON));
    }

    /**
     * Getfacts
     */
    async getFacts(requestParameters: GetFactsRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Fact>> {
        const response = await this.getFactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getfacts
     */
    async getFacts_3Raw(requestParameters: GetFacts0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Fact>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/facts/facts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FactFromJSON));
    }

    /**
     * Getfacts
     */
    async getFacts_3(requestParameters: GetFacts0Request = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Fact>> {
        const response = await this.getFacts_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Savefact
     */
    async saveFactRaw(requestParameters: SaveFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SaveFact200Response>> {
        if (requestParameters.factCreate === null || requestParameters.factCreate === undefined) {
            throw new runtime.RequiredError('factCreate','Required parameter requestParameters.factCreate was null or undefined when calling saveFact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/facts/facts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FactCreateToJSON(requestParameters.factCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaveFact200ResponseFromJSON(jsonValue));
    }

    /**
     * Savefact
     */
    async saveFact(requestParameters: SaveFactRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SaveFact200Response> {
        const response = await this.saveFactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Savefact
     */
    async saveFact_4Raw(requestParameters: SaveFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SaveFact200Response>> {
        if (requestParameters.factCreate === null || requestParameters.factCreate === undefined) {
            throw new runtime.RequiredError('factCreate','Required parameter requestParameters.factCreate was null or undefined when calling saveFact_4.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/facts/facts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FactCreateToJSON(requestParameters.factCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaveFact200ResponseFromJSON(jsonValue));
    }

    /**
     * Savefact
     */
    async saveFact_4(requestParameters: SaveFact0Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SaveFact200Response> {
        const response = await this.saveFact_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
