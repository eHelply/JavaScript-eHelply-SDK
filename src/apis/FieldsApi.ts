/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.118
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.118
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateField200Response,
    CreateField200ResponseFromJSON,
    CreateField200ResponseToJSON,
    DeleteField200Response,
    DeleteField200ResponseFromJSON,
    DeleteField200ResponseToJSON,
    Field,
    FieldFromJSON,
    FieldToJSON,
    FieldDynamo,
    FieldDynamoFromJSON,
    FieldDynamoToJSON,
    GetAppointment403Response,
    GetAppointment403ResponseFromJSON,
    GetAppointment403ResponseToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    UpdateField200Response,
    UpdateField200ResponseFromJSON,
    UpdateField200ResponseToJSON,
} from '../models';

export interface CreateFieldRequest {
    field: Field;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteFieldRequest {
    fieldUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetFieldRequest {
    fieldUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdateFieldRequest {
    fieldUuid: string;
    field: Field;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

/**
 * FieldsApi - interface
 * 
 * @export
 * @interface FieldsApiInterface
 */
export interface FieldsApiInterface {
    /**
     * 
     * @summary Createfield
     * @param {Field} field 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApiInterface
     */
    createFieldRaw(requestParameters: CreateFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateField200Response>>;

    /**
     * Createfield
     */
    createField(requestParameters: CreateFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateField200Response>;

    /**
     * 
     * @summary Deletefield
     * @param {string} fieldUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApiInterface
     */
    deleteFieldRaw(requestParameters: DeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteField200Response>>;

    /**
     * Deletefield
     */
    deleteField(requestParameters: DeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteField200Response>;

    /**
     * 
     * @summary Getfield
     * @param {string} fieldUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApiInterface
     */
    getFieldRaw(requestParameters: GetFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FieldDynamo>>;

    /**
     * Getfield
     */
    getField(requestParameters: GetFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FieldDynamo>;

    /**
     * 
     * @summary Updatefield
     * @param {string} fieldUuid 
     * @param {Field} field 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApiInterface
     */
    updateFieldRaw(requestParameters: UpdateFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateField200Response>>;

    /**
     * Updatefield
     */
    updateField(requestParameters: UpdateFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateField200Response>;

}

/**
 * 
 */
export class FieldsApi extends runtime.BaseAPI implements FieldsApiInterface {

    /**
     * Createfield
     */
    async createFieldRaw(requestParameters: CreateFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateField200Response>> {
        if (requestParameters.field === null || requestParameters.field === undefined) {
            throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling createField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/fields/fields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FieldToJSON(requestParameters.field),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateField200ResponseFromJSON(jsonValue));
    }

    /**
     * Createfield
     */
    async createField(requestParameters: CreateFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateField200Response> {
        const response = await this.createFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletefield
     */
    async deleteFieldRaw(requestParameters: DeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteField200Response>> {
        if (requestParameters.fieldUuid === null || requestParameters.fieldUuid === undefined) {
            throw new runtime.RequiredError('fieldUuid','Required parameter requestParameters.fieldUuid was null or undefined when calling deleteField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/fields/fields/{field_uuid}`.replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters.fieldUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteField200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletefield
     */
    async deleteField(requestParameters: DeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteField200Response> {
        const response = await this.deleteFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getfield
     */
    async getFieldRaw(requestParameters: GetFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<FieldDynamo>> {
        if (requestParameters.fieldUuid === null || requestParameters.fieldUuid === undefined) {
            throw new runtime.RequiredError('fieldUuid','Required parameter requestParameters.fieldUuid was null or undefined when calling getField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/fields/fields/{field_uuid}`.replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters.fieldUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldDynamoFromJSON(jsonValue));
    }

    /**
     * Getfield
     */
    async getField(requestParameters: GetFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<FieldDynamo> {
        const response = await this.getFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updatefield
     */
    async updateFieldRaw(requestParameters: UpdateFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateField200Response>> {
        if (requestParameters.fieldUuid === null || requestParameters.fieldUuid === undefined) {
            throw new runtime.RequiredError('fieldUuid','Required parameter requestParameters.fieldUuid was null or undefined when calling updateField.');
        }

        if (requestParameters.field === null || requestParameters.field === undefined) {
            throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling updateField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/fields/fields/{field_uuid}`.replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters.fieldUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FieldToJSON(requestParameters.field),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateField200ResponseFromJSON(jsonValue));
    }

    /**
     * Updatefield
     */
    async updateField(requestParameters: UpdateFieldRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateField200Response> {
        const response = await this.updateFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
