/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.74
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.74
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateKeyResponse,
    CreateKeyResponseFromJSON,
    CreateKeyResponseToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    InlineResponse2005,
    InlineResponse2005FromJSON,
    InlineResponse2005ToJSON,
    InlineResponse403,
    InlineResponse403FromJSON,
    InlineResponse403ToJSON,
    Page,
    PageFromJSON,
    PageToJSON,
    ProjectsProjectCreate,
    ProjectsProjectCreateFromJSON,
    ProjectsProjectCreateToJSON,
    ProjectsProjectGet,
    ProjectsProjectGetFromJSON,
    ProjectsProjectGetToJSON,
    ProjectsProjectMemberDB,
    ProjectsProjectMemberDBFromJSON,
    ProjectsProjectMemberDBToJSON,
    ProjectsProjectUpdate,
    ProjectsProjectUpdateFromJSON,
    ProjectsProjectUpdateToJSON,
    ProjectsProjectUsageDB,
    ProjectsProjectUsageDBFromJSON,
    ProjectsProjectUsageDBToJSON,
    ProjectsUsageTypeCreate,
    ProjectsUsageTypeCreateFromJSON,
    ProjectsUsageTypeCreateToJSON,
    ProjectsUsageTypeDB,
    ProjectsUsageTypeDBFromJSON,
    ProjectsUsageTypeDBToJSON,
    ProjectsUsageTypeGet,
    ProjectsUsageTypeGetFromJSON,
    ProjectsUsageTypeGetToJSON,
    ProjectsUsageTypeUpdate,
    ProjectsUsageTypeUpdateFromJSON,
    ProjectsUsageTypeUpdateToJSON,
    SecurityKeyCreate,
    SecurityKeyCreateFromJSON,
    SecurityKeyCreateToJSON,
} from '../models';

export interface AddMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPostRequest {
    projectUuid: string;
    entityUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ArchiveProjectProjectsProjectsProjectUuidDeleteRequest {
    projectUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateProjectKeyProjectsProjectsProjectUuidKeysPostRequest {
    projectUuid: string;
    securityKeyCreate: SecurityKeyCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateProjectProjectsProjectsPostRequest {
    projectsProjectCreate: ProjectsProjectCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateUsageTypeProjectsUsageTypesPostRequest {
    projectsUsageTypeCreate: ProjectsUsageTypeCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteUsageTypeProjectsUsageTypesUsageTypeKeyDeleteRequest {
    usageTypeKey: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetAllProjectUsageProjectsProjectsProjectUuidUsageGetRequest {
    projectUuid: string;
    year?: number;
    month?: number;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetMemberProjectsProjectsMembersEntityUuidProjectsGetRequest {
    entityUuid: string;
    role?: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetProjectKeysProjectsProjectsProjectUuidKeysGetRequest {
    projectUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetProjectMembersProjectsProjectsProjectUuidMembersGetRequest {
    projectUuid: string;
    role?: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetProjectProjectsProjectsProjectUuidGetRequest {
    projectUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGetRequest {
    usageTypeKey: string;
    projectUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetUsageTypeProjectsUsageTypesUsageTypeKeyGetRequest {
    usageTypeKey: string;
}

export interface RemoveMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDeleteRequest {
    projectUuid: string;
    entityUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface RemoveProjectKeyProjectsProjectsProjectUuidKeysDeleteRequest {
    projectUuid: string;
    accessToken?: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SandboxProjectsSandboxGetRequest {
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SearchProjectsProjectsProjectsGetRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    searchOn?: string;
    sortOn?: string;
    sortDesc?: boolean;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SearchUsageTypeProjectsUsageTypesGetRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    searchOn?: string;
    sortOn?: string;
    sortDesc?: boolean;
}

export interface UpdateProjectProjectsProjectsProjectUuidPutRequest {
    projectUuid: string;
    projectsProjectUpdate: ProjectsProjectUpdate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdateUsageTypeProjectsUsageTypesUsageTypeKeyPutRequest {
    usageTypeKey: string;
    projectsUsageTypeUpdate: ProjectsUsageTypeUpdate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

/**
 * ProjectsApi - interface
 * 
 * @export
 * @interface ProjectsApiInterface
 */
export interface ProjectsApiInterface {
    /**
     * 
     * @summary Add Member To Project
     * @param {string} projectUuid 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPostRaw(requestParameters: AddMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2005>>;

    /**
     * Add Member To Project
     */
    addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(requestParameters: AddMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPostRequest, initOverrides?: RequestInit): Promise<InlineResponse2005>;

    /**
     * 
     * @summary Archive Project
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    archiveProjectProjectsProjectsProjectUuidDeleteRaw(requestParameters: ArchiveProjectProjectsProjectsProjectUuidDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2003>>;

    /**
     * Archive Project
     */
    archiveProjectProjectsProjectsProjectUuidDelete(requestParameters: ArchiveProjectProjectsProjectsProjectUuidDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse2003>;

    /**
     * 
     * @summary Create Project Key
     * @param {string} projectUuid 
     * @param {SecurityKeyCreate} securityKeyCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProjectKeyProjectsProjectsProjectUuidKeysPostRaw(requestParameters: CreateProjectKeyProjectsProjectsProjectUuidKeysPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateKeyResponse>>;

    /**
     * Create Project Key
     */
    createProjectKeyProjectsProjectsProjectUuidKeysPost(requestParameters: CreateProjectKeyProjectsProjectsProjectUuidKeysPostRequest, initOverrides?: RequestInit): Promise<CreateKeyResponse>;

    /**
     * Create a new Project
     * @summary Create Project
     * @param {ProjectsProjectCreate} projectsProjectCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProjectProjectsProjectsPostRaw(requestParameters: CreateProjectProjectsProjectsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Create a new Project
     * Create Project
     */
    createProjectProjectsProjectsPost(requestParameters: CreateProjectProjectsProjectsPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Create Usage Type
     * @param {ProjectsUsageTypeCreate} projectsUsageTypeCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createUsageTypeProjectsUsageTypesPostRaw(requestParameters: CreateUsageTypeProjectsUsageTypesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectsUsageTypeDB>>;

    /**
     * Create Usage Type
     */
    createUsageTypeProjectsUsageTypesPost(requestParameters: CreateUsageTypeProjectsUsageTypesPostRequest, initOverrides?: RequestInit): Promise<ProjectsUsageTypeDB>;

    /**
     * 
     * @summary Delete Usage Type
     * @param {string} usageTypeKey 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteUsageTypeProjectsUsageTypesUsageTypeKeyDeleteRaw(requestParameters: DeleteUsageTypeProjectsUsageTypesUsageTypeKeyDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2004>>;

    /**
     * Delete Usage Type
     */
    deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(requestParameters: DeleteUsageTypeProjectsUsageTypesUsageTypeKeyDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse2004>;

    /**
     * 
     * @summary Get All Project Usage
     * @param {string} projectUuid 
     * @param {number} [year] 
     * @param {number} [month] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getAllProjectUsageProjectsProjectsProjectUuidUsageGetRaw(requestParameters: GetAllProjectUsageProjectsProjectsProjectUuidUsageGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectsProjectUsageDB>>>;

    /**
     * Get All Project Usage
     */
    getAllProjectUsageProjectsProjectsProjectUuidUsageGet(requestParameters: GetAllProjectUsageProjectsProjectsProjectUuidUsageGetRequest, initOverrides?: RequestInit): Promise<Array<ProjectsProjectUsageDB>>;

    /**
     * 
     * @summary Get Member Projects
     * @param {string} entityUuid 
     * @param {string} [role] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getMemberProjectsProjectsMembersEntityUuidProjectsGetRaw(requestParameters: GetMemberProjectsProjectsMembersEntityUuidProjectsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectsProjectGet>>>;

    /**
     * Get Member Projects
     */
    getMemberProjectsProjectsMembersEntityUuidProjectsGet(requestParameters: GetMemberProjectsProjectsMembersEntityUuidProjectsGetRequest, initOverrides?: RequestInit): Promise<Array<ProjectsProjectGet>>;

    /**
     * 
     * @summary Get Project Keys
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectKeysProjectsProjectsProjectUuidKeysGetRaw(requestParameters: GetProjectKeysProjectsProjectsProjectUuidKeysGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectsProjectMemberDB>>>;

    /**
     * Get Project Keys
     */
    getProjectKeysProjectsProjectsProjectUuidKeysGet(requestParameters: GetProjectKeysProjectsProjectsProjectUuidKeysGetRequest, initOverrides?: RequestInit): Promise<Array<ProjectsProjectMemberDB>>;

    /**
     * 
     * @summary Get Project Members
     * @param {string} projectUuid 
     * @param {string} [role] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectMembersProjectsProjectsProjectUuidMembersGetRaw(requestParameters: GetProjectMembersProjectsProjectsProjectUuidMembersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectsProjectMemberDB>>>;

    /**
     * Get Project Members
     */
    getProjectMembersProjectsProjectsProjectUuidMembersGet(requestParameters: GetProjectMembersProjectsProjectsProjectUuidMembersGetRequest, initOverrides?: RequestInit): Promise<Array<ProjectsProjectMemberDB>>;

    /**
     * Get a Project
     * @summary Get Project
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectProjectsProjectsProjectUuidGetRaw(requestParameters: GetProjectProjectsProjectsProjectUuidGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get a Project
     * Get Project
     */
    getProjectProjectsProjectsProjectUuidGet(requestParameters: GetProjectProjectsProjectsProjectUuidGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Specific Project Usage
     * @param {string} usageTypeKey 
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGetRaw(requestParameters: GetSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectsProjectUsageDB>>;

    /**
     * Get Specific Project Usage
     */
    getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(requestParameters: GetSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGetRequest, initOverrides?: RequestInit): Promise<ProjectsProjectUsageDB>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * @summary Get Usage Type
     * @param {string} usageTypeKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getUsageTypeProjectsUsageTypesUsageTypeKeyGetRaw(requestParameters: GetUsageTypeProjectsUsageTypesUsageTypeKeyGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectsUsageTypeGet>>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Get Usage Type
     */
    getUsageTypeProjectsUsageTypesUsageTypeKeyGet(requestParameters: GetUsageTypeProjectsUsageTypesUsageTypeKeyGetRequest, initOverrides?: RequestInit): Promise<ProjectsUsageTypeGet>;

    /**
     * 
     * @summary Remove Member From Project
     * @param {string} projectUuid 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDeleteRaw(requestParameters: RemoveMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2005>>;

    /**
     * Remove Member From Project
     */
    removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(requestParameters: RemoveMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse2005>;

    /**
     * 
     * @summary Remove Project Key
     * @param {string} projectUuid 
     * @param {string} [accessToken] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    removeProjectKeyProjectsProjectsProjectUuidKeysDeleteRaw(requestParameters: RemoveProjectKeyProjectsProjectsProjectUuidKeysDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Remove Project Key
     */
    removeProjectKeyProjectsProjectsProjectUuidKeysDelete(requestParameters: RemoveProjectKeyProjectsProjectsProjectUuidKeysDeleteRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Sandbox
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    sandboxProjectsSandboxGetRaw(requestParameters: SandboxProjectsSandboxGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Sandbox
     */
    sandboxProjectsSandboxGet(requestParameters: SandboxProjectsSandboxGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * Search projects
     * @summary Search Projects
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    searchProjectsProjectsProjectsGetRaw(requestParameters: SearchProjectsProjectsProjectsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Page>>;

    /**
     * Search projects
     * Search Projects
     */
    searchProjectsProjectsProjectsGet(requestParameters: SearchProjectsProjectsProjectsGetRequest, initOverrides?: RequestInit): Promise<Page>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * @summary Search Usage Type
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    searchUsageTypeProjectsUsageTypesGetRaw(requestParameters: SearchUsageTypeProjectsUsageTypesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Page>>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Search Usage Type
     */
    searchUsageTypeProjectsUsageTypesGet(requestParameters: SearchUsageTypeProjectsUsageTypesGetRequest, initOverrides?: RequestInit): Promise<Page>;

    /**
     * 
     * @summary Update Project
     * @param {string} projectUuid 
     * @param {ProjectsProjectUpdate} projectsProjectUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    updateProjectProjectsProjectsProjectUuidPutRaw(requestParameters: UpdateProjectProjectsProjectsProjectUuidPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Update Project
     */
    updateProjectProjectsProjectsProjectUuidPut(requestParameters: UpdateProjectProjectsProjectsProjectUuidPutRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Update Usage Type
     * @param {string} usageTypeKey 
     * @param {ProjectsUsageTypeUpdate} projectsUsageTypeUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    updateUsageTypeProjectsUsageTypesUsageTypeKeyPutRaw(requestParameters: UpdateUsageTypeProjectsUsageTypesUsageTypeKeyPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectsUsageTypeDB>>;

    /**
     * Update Usage Type
     */
    updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(requestParameters: UpdateUsageTypeProjectsUsageTypesUsageTypeKeyPutRequest, initOverrides?: RequestInit): Promise<ProjectsUsageTypeDB>;

}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI implements ProjectsApiInterface {

    /**
     * Add Member To Project
     */
    async addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPostRaw(requestParameters: AddMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2005>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/members/{entity_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     * Add Member To Project
     */
    async addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(requestParameters: AddMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPostRequest, initOverrides?: RequestInit): Promise<InlineResponse2005> {
        const response = await this.addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Archive Project
     */
    async archiveProjectProjectsProjectsProjectUuidDeleteRaw(requestParameters: ArchiveProjectProjectsProjectsProjectUuidDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling archiveProjectProjectsProjectsProjectUuidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * Archive Project
     */
    async archiveProjectProjectsProjectsProjectUuidDelete(requestParameters: ArchiveProjectProjectsProjectsProjectUuidDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse2003> {
        const response = await this.archiveProjectProjectsProjectsProjectUuidDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Project Key
     */
    async createProjectKeyProjectsProjectsProjectUuidKeysPostRaw(requestParameters: CreateProjectKeyProjectsProjectsProjectUuidKeysPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateKeyResponse>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling createProjectKeyProjectsProjectsProjectUuidKeysPost.');
        }

        if (requestParameters.securityKeyCreate === null || requestParameters.securityKeyCreate === undefined) {
            throw new runtime.RequiredError('securityKeyCreate','Required parameter requestParameters.securityKeyCreate was null or undefined when calling createProjectKeyProjectsProjectsProjectUuidKeysPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/keys`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityKeyCreateToJSON(requestParameters.securityKeyCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateKeyResponseFromJSON(jsonValue));
    }

    /**
     * Create Project Key
     */
    async createProjectKeyProjectsProjectsProjectUuidKeysPost(requestParameters: CreateProjectKeyProjectsProjectsProjectUuidKeysPostRequest, initOverrides?: RequestInit): Promise<CreateKeyResponse> {
        const response = await this.createProjectKeyProjectsProjectsProjectUuidKeysPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Project
     * Create Project
     */
    async createProjectProjectsProjectsPostRaw(requestParameters: CreateProjectProjectsProjectsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectsProjectCreate === null || requestParameters.projectsProjectCreate === undefined) {
            throw new runtime.RequiredError('projectsProjectCreate','Required parameter requestParameters.projectsProjectCreate was null or undefined when calling createProjectProjectsProjectsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsProjectCreateToJSON(requestParameters.projectsProjectCreate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create a new Project
     * Create Project
     */
    async createProjectProjectsProjectsPost(requestParameters: CreateProjectProjectsProjectsPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.createProjectProjectsProjectsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Usage Type
     */
    async createUsageTypeProjectsUsageTypesPostRaw(requestParameters: CreateUsageTypeProjectsUsageTypesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectsUsageTypeDB>> {
        if (requestParameters.projectsUsageTypeCreate === null || requestParameters.projectsUsageTypeCreate === undefined) {
            throw new runtime.RequiredError('projectsUsageTypeCreate','Required parameter requestParameters.projectsUsageTypeCreate was null or undefined when calling createUsageTypeProjectsUsageTypesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/usage/types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsUsageTypeCreateToJSON(requestParameters.projectsUsageTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsUsageTypeDBFromJSON(jsonValue));
    }

    /**
     * Create Usage Type
     */
    async createUsageTypeProjectsUsageTypesPost(requestParameters: CreateUsageTypeProjectsUsageTypesPostRequest, initOverrides?: RequestInit): Promise<ProjectsUsageTypeDB> {
        const response = await this.createUsageTypeProjectsUsageTypesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Usage Type
     */
    async deleteUsageTypeProjectsUsageTypesUsageTypeKeyDeleteRaw(requestParameters: DeleteUsageTypeProjectsUsageTypesUsageTypeKeyDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2004>> {
        if (requestParameters.usageTypeKey === null || requestParameters.usageTypeKey === undefined) {
            throw new runtime.RequiredError('usageTypeKey','Required parameter requestParameters.usageTypeKey was null or undefined when calling deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/usage/types/{usage_type_key}`.replace(`{${"usage_type_key"}}`, encodeURIComponent(String(requestParameters.usageTypeKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * Delete Usage Type
     */
    async deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(requestParameters: DeleteUsageTypeProjectsUsageTypesUsageTypeKeyDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse2004> {
        const response = await this.deleteUsageTypeProjectsUsageTypesUsageTypeKeyDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get All Project Usage
     */
    async getAllProjectUsageProjectsProjectsProjectUuidUsageGetRaw(requestParameters: GetAllProjectUsageProjectsProjectsProjectUuidUsageGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectsProjectUsageDB>>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getAllProjectUsageProjectsProjectsProjectUuidUsageGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.month !== undefined) {
            queryParameters['month'] = requestParameters.month;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/usage`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectsProjectUsageDBFromJSON));
    }

    /**
     * Get All Project Usage
     */
    async getAllProjectUsageProjectsProjectsProjectUuidUsageGet(requestParameters: GetAllProjectUsageProjectsProjectsProjectUuidUsageGetRequest, initOverrides?: RequestInit): Promise<Array<ProjectsProjectUsageDB>> {
        const response = await this.getAllProjectUsageProjectsProjectsProjectUuidUsageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Member Projects
     */
    async getMemberProjectsProjectsMembersEntityUuidProjectsGetRaw(requestParameters: GetMemberProjectsProjectsMembersEntityUuidProjectsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectsProjectGet>>> {
        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling getMemberProjectsProjectsMembersEntityUuidProjectsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/members/{entity_uuid}/projects`.replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectsProjectGetFromJSON));
    }

    /**
     * Get Member Projects
     */
    async getMemberProjectsProjectsMembersEntityUuidProjectsGet(requestParameters: GetMemberProjectsProjectsMembersEntityUuidProjectsGetRequest, initOverrides?: RequestInit): Promise<Array<ProjectsProjectGet>> {
        const response = await this.getMemberProjectsProjectsMembersEntityUuidProjectsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Project Keys
     */
    async getProjectKeysProjectsProjectsProjectUuidKeysGetRaw(requestParameters: GetProjectKeysProjectsProjectsProjectUuidKeysGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectsProjectMemberDB>>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getProjectKeysProjectsProjectsProjectUuidKeysGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/keys`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectsProjectMemberDBFromJSON));
    }

    /**
     * Get Project Keys
     */
    async getProjectKeysProjectsProjectsProjectUuidKeysGet(requestParameters: GetProjectKeysProjectsProjectsProjectUuidKeysGetRequest, initOverrides?: RequestInit): Promise<Array<ProjectsProjectMemberDB>> {
        const response = await this.getProjectKeysProjectsProjectsProjectUuidKeysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Project Members
     */
    async getProjectMembersProjectsProjectsProjectUuidMembersGetRaw(requestParameters: GetProjectMembersProjectsProjectsProjectUuidMembersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProjectsProjectMemberDB>>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getProjectMembersProjectsProjectsProjectUuidMembersGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/members`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectsProjectMemberDBFromJSON));
    }

    /**
     * Get Project Members
     */
    async getProjectMembersProjectsProjectsProjectUuidMembersGet(requestParameters: GetProjectMembersProjectsProjectsProjectUuidMembersGetRequest, initOverrides?: RequestInit): Promise<Array<ProjectsProjectMemberDB>> {
        const response = await this.getProjectMembersProjectsProjectsProjectUuidMembersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a Project
     * Get Project
     */
    async getProjectProjectsProjectsProjectUuidGetRaw(requestParameters: GetProjectProjectsProjectsProjectUuidGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getProjectProjectsProjectsProjectUuidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get a Project
     * Get Project
     */
    async getProjectProjectsProjectsProjectUuidGet(requestParameters: GetProjectProjectsProjectsProjectUuidGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getProjectProjectsProjectsProjectUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Specific Project Usage
     */
    async getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGetRaw(requestParameters: GetSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectsProjectUsageDB>> {
        if (requestParameters.usageTypeKey === null || requestParameters.usageTypeKey === undefined) {
            throw new runtime.RequiredError('usageTypeKey','Required parameter requestParameters.usageTypeKey was null or undefined when calling getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet.');
        }

        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/usage/{usage_type_key}`.replace(`{${"usage_type_key"}}`, encodeURIComponent(String(requestParameters.usageTypeKey))).replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsProjectUsageDBFromJSON(jsonValue));
    }

    /**
     * Get Specific Project Usage
     */
    async getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(requestParameters: GetSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGetRequest, initOverrides?: RequestInit): Promise<ProjectsProjectUsageDB> {
        const response = await this.getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Get Usage Type
     */
    async getUsageTypeProjectsUsageTypesUsageTypeKeyGetRaw(requestParameters: GetUsageTypeProjectsUsageTypesUsageTypeKeyGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectsUsageTypeGet>> {
        if (requestParameters.usageTypeKey === null || requestParameters.usageTypeKey === undefined) {
            throw new runtime.RequiredError('usageTypeKey','Required parameter requestParameters.usageTypeKey was null or undefined when calling getUsageTypeProjectsUsageTypesUsageTypeKeyGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/projects/usage/types/{usage_type_key}`.replace(`{${"usage_type_key"}}`, encodeURIComponent(String(requestParameters.usageTypeKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsUsageTypeGetFromJSON(jsonValue));
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Get Usage Type
     */
    async getUsageTypeProjectsUsageTypesUsageTypeKeyGet(requestParameters: GetUsageTypeProjectsUsageTypesUsageTypeKeyGetRequest, initOverrides?: RequestInit): Promise<ProjectsUsageTypeGet> {
        const response = await this.getUsageTypeProjectsUsageTypesUsageTypeKeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Member From Project
     */
    async removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDeleteRaw(requestParameters: RemoveMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2005>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/members/{entity_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     * Remove Member From Project
     */
    async removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(requestParameters: RemoveMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse2005> {
        const response = await this.removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove Project Key
     */
    async removeProjectKeyProjectsProjectsProjectUuidKeysDeleteRaw(requestParameters: RemoveProjectKeyProjectsProjectsProjectUuidKeysDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling removeProjectKeyProjectsProjectsProjectUuidKeysDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.accessToken !== undefined) {
            queryParameters['access_token'] = requestParameters.accessToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/keys`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Remove Project Key
     */
    async removeProjectKeyProjectsProjectsProjectUuidKeysDelete(requestParameters: RemoveProjectKeyProjectsProjectsProjectUuidKeysDeleteRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.removeProjectKeyProjectsProjectsProjectUuidKeysDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sandbox
     */
    async sandboxProjectsSandboxGetRaw(requestParameters: SandboxProjectsSandboxGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/sandbox`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Sandbox
     */
    async sandboxProjectsSandboxGet(requestParameters: SandboxProjectsSandboxGetRequest = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.sandboxProjectsSandboxGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search projects
     * Search Projects
     */
    async searchProjectsProjectsProjectsGetRaw(requestParameters: SearchProjectsProjectsProjectsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchOn !== undefined) {
            queryParameters['search_on'] = requestParameters.searchOn;
        }

        if (requestParameters.sortOn !== undefined) {
            queryParameters['sort_on'] = requestParameters.sortOn;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Search projects
     * Search Projects
     */
    async searchProjectsProjectsProjectsGet(requestParameters: SearchProjectsProjectsProjectsGetRequest = {}, initOverrides?: RequestInit): Promise<Page> {
        const response = await this.searchProjectsProjectsProjectsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Search Usage Type
     */
    async searchUsageTypeProjectsUsageTypesGetRaw(requestParameters: SearchUsageTypeProjectsUsageTypesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchOn !== undefined) {
            queryParameters['search_on'] = requestParameters.searchOn;
        }

        if (requestParameters.sortOn !== undefined) {
            queryParameters['sort_on'] = requestParameters.sortOn;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/projects/usage/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Search Usage Type
     */
    async searchUsageTypeProjectsUsageTypesGet(requestParameters: SearchUsageTypeProjectsUsageTypesGetRequest = {}, initOverrides?: RequestInit): Promise<Page> {
        const response = await this.searchUsageTypeProjectsUsageTypesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Project
     */
    async updateProjectProjectsProjectsProjectUuidPutRaw(requestParameters: UpdateProjectProjectsProjectsProjectUuidPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling updateProjectProjectsProjectsProjectUuidPut.');
        }

        if (requestParameters.projectsProjectUpdate === null || requestParameters.projectsProjectUpdate === undefined) {
            throw new runtime.RequiredError('projectsProjectUpdate','Required parameter requestParameters.projectsProjectUpdate was null or undefined when calling updateProjectProjectsProjectsProjectUuidPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsProjectUpdateToJSON(requestParameters.projectsProjectUpdate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update Project
     */
    async updateProjectProjectsProjectsProjectUuidPut(requestParameters: UpdateProjectProjectsProjectsProjectUuidPutRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.updateProjectProjectsProjectsProjectUuidPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Usage Type
     */
    async updateUsageTypeProjectsUsageTypesUsageTypeKeyPutRaw(requestParameters: UpdateUsageTypeProjectsUsageTypesUsageTypeKeyPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectsUsageTypeDB>> {
        if (requestParameters.usageTypeKey === null || requestParameters.usageTypeKey === undefined) {
            throw new runtime.RequiredError('usageTypeKey','Required parameter requestParameters.usageTypeKey was null or undefined when calling updateUsageTypeProjectsUsageTypesUsageTypeKeyPut.');
        }

        if (requestParameters.projectsUsageTypeUpdate === null || requestParameters.projectsUsageTypeUpdate === undefined) {
            throw new runtime.RequiredError('projectsUsageTypeUpdate','Required parameter requestParameters.projectsUsageTypeUpdate was null or undefined when calling updateUsageTypeProjectsUsageTypesUsageTypeKeyPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/usage/types/{usage_type_key}`.replace(`{${"usage_type_key"}}`, encodeURIComponent(String(requestParameters.usageTypeKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsUsageTypeUpdateToJSON(requestParameters.projectsUsageTypeUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsUsageTypeDBFromJSON(jsonValue));
    }

    /**
     * Update Usage Type
     */
    async updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(requestParameters: UpdateUsageTypeProjectsUsageTypesUsageTypeKeyPutRequest, initOverrides?: RequestInit): Promise<ProjectsUsageTypeDB> {
        const response = await this.updateUsageTypeProjectsUsageTypesUsageTypeKeyPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
