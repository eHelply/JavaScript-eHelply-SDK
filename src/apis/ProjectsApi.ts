/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.89
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.89
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateKeyResponse,
  GetAppointment403Response,
  HTTPValidationError,
  Page,
  ProjectDB,
  ProjectsProjectCreate,
  ProjectsProjectGet,
  ProjectsProjectMemberDB,
  ProjectsProjectUpdate,
  ProjectsProjectUsageDB,
  ProjectsUsageTypeCreate,
  ProjectsUsageTypeDB,
  ProjectsUsageTypeGet,
  ProjectsUsageTypeUpdate,
  ResponseAddmembertoproject,
  ResponseArchiveproject,
  ResponseDeleteusagetype,
  ResponseRemovememberfromproject,
  SecurityKeyCreate,
} from '../models';
import {
    CreateKeyResponseFromJSON,
    CreateKeyResponseToJSON,
    GetAppointment403ResponseFromJSON,
    GetAppointment403ResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PageFromJSON,
    PageToJSON,
    ProjectDBFromJSON,
    ProjectDBToJSON,
    ProjectsProjectCreateFromJSON,
    ProjectsProjectCreateToJSON,
    ProjectsProjectGetFromJSON,
    ProjectsProjectGetToJSON,
    ProjectsProjectMemberDBFromJSON,
    ProjectsProjectMemberDBToJSON,
    ProjectsProjectUpdateFromJSON,
    ProjectsProjectUpdateToJSON,
    ProjectsProjectUsageDBFromJSON,
    ProjectsProjectUsageDBToJSON,
    ProjectsUsageTypeCreateFromJSON,
    ProjectsUsageTypeCreateToJSON,
    ProjectsUsageTypeDBFromJSON,
    ProjectsUsageTypeDBToJSON,
    ProjectsUsageTypeGetFromJSON,
    ProjectsUsageTypeGetToJSON,
    ProjectsUsageTypeUpdateFromJSON,
    ProjectsUsageTypeUpdateToJSON,
    ResponseAddmembertoprojectFromJSON,
    ResponseAddmembertoprojectToJSON,
    ResponseArchiveprojectFromJSON,
    ResponseArchiveprojectToJSON,
    ResponseDeleteusagetypeFromJSON,
    ResponseDeleteusagetypeToJSON,
    ResponseRemovememberfromprojectFromJSON,
    ResponseRemovememberfromprojectToJSON,
    SecurityKeyCreateFromJSON,
    SecurityKeyCreateToJSON,
} from '../models';

export interface AddMemberToProjectRequest {
    projectUuid: string;
    entityUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface ArchiveProjectRequest {
    projectUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateProjectRequest {
    projectsProjectCreate: ProjectsProjectCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateProjectKeyRequest {
    projectUuid: string;
    securityKeyCreate: SecurityKeyCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateUsageTypeRequest {
    projectsUsageTypeCreate: ProjectsUsageTypeCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteProjectKeyRequest {
    projectUuid: string;
    accessToken?: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteUsageTypeRequest {
    usageTypeKey: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetAllProjectUsageRequest {
    projectUuid: string;
    year?: number;
    month?: number;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetMemberProjectsRequest {
    entityUuid: string;
    role?: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetProjectRequest {
    projectUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetProjectKeysRequest {
    projectUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetProjectMembersRequest {
    projectUuid: string;
    role?: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetSpecificProjectUsageRequest {
    usageTypeKey: string;
    projectUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetUsageTypeRequest {
    usageTypeKey: string;
}

export interface RemoveMemberFromProjectRequest {
    projectUuid: string;
    entityUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SearchProjectsRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    searchOn?: string;
    sortOn?: string;
    sortDesc?: boolean;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface SearchUsageTypeRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    searchOn?: string;
    sortOn?: string;
    sortDesc?: boolean;
}

export interface UpdateProjectRequest {
    projectUuid: string;
    projectsProjectUpdate: ProjectsProjectUpdate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdateUsageTypeRequest {
    usageTypeKey: string;
    projectsUsageTypeUpdate: ProjectsUsageTypeUpdate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

/**
 * ProjectsApi - interface
 * 
 * @export
 * @interface ProjectsApiInterface
 */
export interface ProjectsApiInterface {
    /**
     * 
     * @summary Addmembertoproject
     * @param {string} projectUuid 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    addMemberToProjectRaw(requestParameters: AddMemberToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAddmembertoproject>>;

    /**
     * Addmembertoproject
     */
    addMemberToProject(requestParameters: AddMemberToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAddmembertoproject>;

    /**
     * 
     * @summary Archiveproject
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    archiveProjectRaw(requestParameters: ArchiveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseArchiveproject>>;

    /**
     * Archiveproject
     */
    archiveProject(requestParameters: ArchiveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseArchiveproject>;

    /**
     * Create a new Project
     * @summary Createproject
     * @param {ProjectsProjectCreate} projectsProjectCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDB>>;

    /**
     * Create a new Project
     * Createproject
     */
    createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDB>;

    /**
     * 
     * @summary Createprojectkey
     * @param {string} projectUuid 
     * @param {SecurityKeyCreate} securityKeyCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProjectKeyRaw(requestParameters: CreateProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateKeyResponse>>;

    /**
     * Createprojectkey
     */
    createProjectKey(requestParameters: CreateProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateKeyResponse>;

    /**
     * 
     * @summary Createusagetype
     * @param {ProjectsUsageTypeCreate} projectsUsageTypeCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createUsageTypeRaw(requestParameters: CreateUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsUsageTypeDB>>;

    /**
     * Createusagetype
     */
    createUsageType(requestParameters: CreateUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsUsageTypeDB>;

    /**
     * 
     * @summary Deleteprojectkey
     * @param {string} projectUuid 
     * @param {string} [accessToken] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteProjectKeyRaw(requestParameters: DeleteProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * Deleteprojectkey
     */
    deleteProjectKey(requestParameters: DeleteProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary Deleteusagetype
     * @param {string} usageTypeKey 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteUsageTypeRaw(requestParameters: DeleteUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeleteusagetype>>;

    /**
     * Deleteusagetype
     */
    deleteUsageType(requestParameters: DeleteUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeleteusagetype>;

    /**
     * 
     * @summary Getallprojectusage
     * @param {string} projectUuid 
     * @param {number} [year] 
     * @param {number} [month] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getAllProjectUsageRaw(requestParameters: GetAllProjectUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectsProjectUsageDB>>>;

    /**
     * Getallprojectusage
     */
    getAllProjectUsage(requestParameters: GetAllProjectUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectsProjectUsageDB>>;

    /**
     * 
     * @summary Getmemberprojects
     * @param {string} entityUuid 
     * @param {string} [role] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getMemberProjectsRaw(requestParameters: GetMemberProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectsProjectGet>>>;

    /**
     * Getmemberprojects
     */
    getMemberProjects(requestParameters: GetMemberProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectsProjectGet>>;

    /**
     * Get a Project
     * @summary Getproject
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDB>>;

    /**
     * Get a Project
     * Getproject
     */
    getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDB>;

    /**
     * 
     * @summary Getprojectkeys
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectKeysRaw(requestParameters: GetProjectKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectsProjectMemberDB>>>;

    /**
     * Getprojectkeys
     */
    getProjectKeys(requestParameters: GetProjectKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectsProjectMemberDB>>;

    /**
     * 
     * @summary Getprojectmembers
     * @param {string} projectUuid 
     * @param {string} [role] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectMembersRaw(requestParameters: GetProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectsProjectMemberDB>>>;

    /**
     * Getprojectmembers
     */
    getProjectMembers(requestParameters: GetProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectsProjectMemberDB>>;

    /**
     * 
     * @summary Getspecificprojectusage
     * @param {string} usageTypeKey 
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getSpecificProjectUsageRaw(requestParameters: GetSpecificProjectUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsProjectUsageDB>>;

    /**
     * Getspecificprojectusage
     */
    getSpecificProjectUsage(requestParameters: GetSpecificProjectUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsProjectUsageDB>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * @summary Getusagetype
     * @param {string} usageTypeKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getUsageTypeRaw(requestParameters: GetUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsUsageTypeGet>>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Getusagetype
     */
    getUsageType(requestParameters: GetUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsUsageTypeGet>;

    /**
     * 
     * @summary Removememberfromproject
     * @param {string} projectUuid 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    removeMemberFromProjectRaw(requestParameters: RemoveMemberFromProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseRemovememberfromproject>>;

    /**
     * Removememberfromproject
     */
    removeMemberFromProject(requestParameters: RemoveMemberFromProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseRemovememberfromproject>;

    /**
     * Search projects
     * @summary Searchprojects
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    searchProjectsRaw(requestParameters: SearchProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>>;

    /**
     * Search projects
     * Searchprojects
     */
    searchProjects(requestParameters: SearchProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * @summary Searchusagetype
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    searchUsageTypeRaw(requestParameters: SearchUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Searchusagetype
     */
    searchUsageType(requestParameters: SearchUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page>;

    /**
     * 
     * @summary Updateproject
     * @param {string} projectUuid 
     * @param {ProjectsProjectUpdate} projectsProjectUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Updateproject
     */
    updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @summary Updateusagetype
     * @param {string} usageTypeKey 
     * @param {ProjectsUsageTypeUpdate} projectsUsageTypeUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    updateUsageTypeRaw(requestParameters: UpdateUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsUsageTypeDB>>;

    /**
     * Updateusagetype
     */
    updateUsageType(requestParameters: UpdateUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsUsageTypeDB>;

}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI implements ProjectsApiInterface {

    /**
     * Addmembertoproject
     */
    async addMemberToProjectRaw(requestParameters: AddMemberToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseAddmembertoproject>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling addMemberToProject.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling addMemberToProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/members/{entity_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseAddmembertoprojectFromJSON(jsonValue));
    }

    /**
     * Addmembertoproject
     */
    async addMemberToProject(requestParameters: AddMemberToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseAddmembertoproject> {
        const response = await this.addMemberToProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Archiveproject
     */
    async archiveProjectRaw(requestParameters: ArchiveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseArchiveproject>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling archiveProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseArchiveprojectFromJSON(jsonValue));
    }

    /**
     * Archiveproject
     */
    async archiveProject(requestParameters: ArchiveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseArchiveproject> {
        const response = await this.archiveProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Project
     * Createproject
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDB>> {
        if (requestParameters.projectsProjectCreate === null || requestParameters.projectsProjectCreate === undefined) {
            throw new runtime.RequiredError('projectsProjectCreate','Required parameter requestParameters.projectsProjectCreate was null or undefined when calling createProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsProjectCreateToJSON(requestParameters.projectsProjectCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDBFromJSON(jsonValue));
    }

    /**
     * Create a new Project
     * Createproject
     */
    async createProject(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDB> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Createprojectkey
     */
    async createProjectKeyRaw(requestParameters: CreateProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateKeyResponse>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling createProjectKey.');
        }

        if (requestParameters.securityKeyCreate === null || requestParameters.securityKeyCreate === undefined) {
            throw new runtime.RequiredError('securityKeyCreate','Required parameter requestParameters.securityKeyCreate was null or undefined when calling createProjectKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/keys`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SecurityKeyCreateToJSON(requestParameters.securityKeyCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateKeyResponseFromJSON(jsonValue));
    }

    /**
     * Createprojectkey
     */
    async createProjectKey(requestParameters: CreateProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateKeyResponse> {
        const response = await this.createProjectKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Createusagetype
     */
    async createUsageTypeRaw(requestParameters: CreateUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsUsageTypeDB>> {
        if (requestParameters.projectsUsageTypeCreate === null || requestParameters.projectsUsageTypeCreate === undefined) {
            throw new runtime.RequiredError('projectsUsageTypeCreate','Required parameter requestParameters.projectsUsageTypeCreate was null or undefined when calling createUsageType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/usage/types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsUsageTypeCreateToJSON(requestParameters.projectsUsageTypeCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsUsageTypeDBFromJSON(jsonValue));
    }

    /**
     * Createusagetype
     */
    async createUsageType(requestParameters: CreateUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsUsageTypeDB> {
        const response = await this.createUsageTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deleteprojectkey
     */
    async deleteProjectKeyRaw(requestParameters: DeleteProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling deleteProjectKey.');
        }

        const queryParameters: any = {};

        if (requestParameters.accessToken !== undefined) {
            queryParameters['access_token'] = requestParameters.accessToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/keys`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Deleteprojectkey
     */
    async deleteProjectKey(requestParameters: DeleteProjectKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.deleteProjectKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deleteusagetype
     */
    async deleteUsageTypeRaw(requestParameters: DeleteUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDeleteusagetype>> {
        if (requestParameters.usageTypeKey === null || requestParameters.usageTypeKey === undefined) {
            throw new runtime.RequiredError('usageTypeKey','Required parameter requestParameters.usageTypeKey was null or undefined when calling deleteUsageType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/usage/types/{usage_type_key}`.replace(`{${"usage_type_key"}}`, encodeURIComponent(String(requestParameters.usageTypeKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDeleteusagetypeFromJSON(jsonValue));
    }

    /**
     * Deleteusagetype
     */
    async deleteUsageType(requestParameters: DeleteUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDeleteusagetype> {
        const response = await this.deleteUsageTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getallprojectusage
     */
    async getAllProjectUsageRaw(requestParameters: GetAllProjectUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectsProjectUsageDB>>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getAllProjectUsage.');
        }

        const queryParameters: any = {};

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.month !== undefined) {
            queryParameters['month'] = requestParameters.month;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/usage`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectsProjectUsageDBFromJSON));
    }

    /**
     * Getallprojectusage
     */
    async getAllProjectUsage(requestParameters: GetAllProjectUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectsProjectUsageDB>> {
        const response = await this.getAllProjectUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getmemberprojects
     */
    async getMemberProjectsRaw(requestParameters: GetMemberProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectsProjectGet>>> {
        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling getMemberProjects.');
        }

        const queryParameters: any = {};

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/members/{entity_uuid}/projects`.replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectsProjectGetFromJSON));
    }

    /**
     * Getmemberprojects
     */
    async getMemberProjects(requestParameters: GetMemberProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectsProjectGet>> {
        const response = await this.getMemberProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a Project
     * Getproject
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectDB>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDBFromJSON(jsonValue));
    }

    /**
     * Get a Project
     * Getproject
     */
    async getProject(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectDB> {
        const response = await this.getProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getprojectkeys
     */
    async getProjectKeysRaw(requestParameters: GetProjectKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectsProjectMemberDB>>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getProjectKeys.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/keys`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectsProjectMemberDBFromJSON));
    }

    /**
     * Getprojectkeys
     */
    async getProjectKeys(requestParameters: GetProjectKeysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectsProjectMemberDB>> {
        const response = await this.getProjectKeysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getprojectmembers
     */
    async getProjectMembersRaw(requestParameters: GetProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProjectsProjectMemberDB>>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getProjectMembers.');
        }

        const queryParameters: any = {};

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/members`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectsProjectMemberDBFromJSON));
    }

    /**
     * Getprojectmembers
     */
    async getProjectMembers(requestParameters: GetProjectMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProjectsProjectMemberDB>> {
        const response = await this.getProjectMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getspecificprojectusage
     */
    async getSpecificProjectUsageRaw(requestParameters: GetSpecificProjectUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsProjectUsageDB>> {
        if (requestParameters.usageTypeKey === null || requestParameters.usageTypeKey === undefined) {
            throw new runtime.RequiredError('usageTypeKey','Required parameter requestParameters.usageTypeKey was null or undefined when calling getSpecificProjectUsage.');
        }

        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling getSpecificProjectUsage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/usage/{usage_type_key}`.replace(`{${"usage_type_key"}}`, encodeURIComponent(String(requestParameters.usageTypeKey))).replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsProjectUsageDBFromJSON(jsonValue));
    }

    /**
     * Getspecificprojectusage
     */
    async getSpecificProjectUsage(requestParameters: GetSpecificProjectUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsProjectUsageDB> {
        const response = await this.getSpecificProjectUsageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Getusagetype
     */
    async getUsageTypeRaw(requestParameters: GetUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsUsageTypeGet>> {
        if (requestParameters.usageTypeKey === null || requestParameters.usageTypeKey === undefined) {
            throw new runtime.RequiredError('usageTypeKey','Required parameter requestParameters.usageTypeKey was null or undefined when calling getUsageType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/projects/usage/types/{usage_type_key}`.replace(`{${"usage_type_key"}}`, encodeURIComponent(String(requestParameters.usageTypeKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsUsageTypeGetFromJSON(jsonValue));
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Getusagetype
     */
    async getUsageType(requestParameters: GetUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsUsageTypeGet> {
        const response = await this.getUsageTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removememberfromproject
     */
    async removeMemberFromProjectRaw(requestParameters: RemoveMemberFromProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseRemovememberfromproject>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling removeMemberFromProject.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling removeMemberFromProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}/members/{entity_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseRemovememberfromprojectFromJSON(jsonValue));
    }

    /**
     * Removememberfromproject
     */
    async removeMemberFromProject(requestParameters: RemoveMemberFromProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseRemovememberfromproject> {
        const response = await this.removeMemberFromProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search projects
     * Searchprojects
     */
    async searchProjectsRaw(requestParameters: SearchProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchOn !== undefined) {
            queryParameters['search_on'] = requestParameters.searchOn;
        }

        if (requestParameters.sortOn !== undefined) {
            queryParameters['sort_on'] = requestParameters.sortOn;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Search projects
     * Searchprojects
     */
    async searchProjects(requestParameters: SearchProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.searchProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Searchusagetype
     */
    async searchUsageTypeRaw(requestParameters: SearchUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchOn !== undefined) {
            queryParameters['search_on'] = requestParameters.searchOn;
        }

        if (requestParameters.sortOn !== undefined) {
            queryParameters['sort_on'] = requestParameters.sortOn;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/projects/usage/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * Searchusagetype
     */
    async searchUsageType(requestParameters: SearchUsageTypeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.searchUsageTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updateproject
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectUuid === null || requestParameters.projectUuid === undefined) {
            throw new runtime.RequiredError('projectUuid','Required parameter requestParameters.projectUuid was null or undefined when calling updateProject.');
        }

        if (requestParameters.projectsProjectUpdate === null || requestParameters.projectsProjectUpdate === undefined) {
            throw new runtime.RequiredError('projectsProjectUpdate','Required parameter requestParameters.projectsProjectUpdate was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/projects/{project_uuid}`.replace(`{${"project_uuid"}}`, encodeURIComponent(String(requestParameters.projectUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsProjectUpdateToJSON(requestParameters.projectsProjectUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updateproject
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updateusagetype
     */
    async updateUsageTypeRaw(requestParameters: UpdateUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsUsageTypeDB>> {
        if (requestParameters.usageTypeKey === null || requestParameters.usageTypeKey === undefined) {
            throw new runtime.RequiredError('usageTypeKey','Required parameter requestParameters.usageTypeKey was null or undefined when calling updateUsageType.');
        }

        if (requestParameters.projectsUsageTypeUpdate === null || requestParameters.projectsUsageTypeUpdate === undefined) {
            throw new runtime.RequiredError('projectsUsageTypeUpdate','Required parameter requestParameters.projectsUsageTypeUpdate was null or undefined when calling updateUsageType.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/sam/projects/usage/types/{usage_type_key}`.replace(`{${"usage_type_key"}}`, encodeURIComponent(String(requestParameters.usageTypeKey))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectsUsageTypeUpdateToJSON(requestParameters.projectsUsageTypeUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsUsageTypeDBFromJSON(jsonValue));
    }

    /**
     * Updateusagetype
     */
    async updateUsageType(requestParameters: UpdateUsageTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsUsageTypeDB> {
        const response = await this.updateUsageTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
