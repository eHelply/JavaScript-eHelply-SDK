/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.74
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.74
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BodyCreateKeySecurityKeysPost,
    BodyCreateKeySecurityKeysPostFromJSON,
    BodyCreateKeySecurityKeysPostToJSON,
    BodyGenerateTokenSecurityTokensPost,
    BodyGenerateTokenSecurityTokensPostFromJSON,
    BodyGenerateTokenSecurityTokensPostToJSON,
    BodyVerifyKeySecurityKeysVerifyPost,
    BodyVerifyKeySecurityKeysVerifyPostFromJSON,
    BodyVerifyKeySecurityKeysVerifyPostToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InlineResponse2006,
    InlineResponse2006FromJSON,
    InlineResponse2006ToJSON,
    InlineResponse2007,
    InlineResponse2007FromJSON,
    InlineResponse2007ToJSON,
    InlineResponse2008,
    InlineResponse2008FromJSON,
    InlineResponse2008ToJSON,
    InlineResponse403,
    InlineResponse403FromJSON,
    InlineResponse403ToJSON,
    SecurityEncryptionKeyGet,
    SecurityEncryptionKeyGetFromJSON,
    SecurityEncryptionKeyGetToJSON,
    SecurityKeyGet,
    SecurityKeyGetFromJSON,
    SecurityKeyGetToJSON,
} from '../models';

export interface CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostRequest {
    category: string;
    ehelplySecuritySecretKey?: string;
}

export interface CreateKeySecurityKeysPostRequest {
    bodyCreateKeySecurityKeysPost: BodyCreateKeySecurityKeysPost;
    accessLength?: number;
    secretLength?: number;
}

export interface DeleteKeySecurityKeysKeyUuidDeleteRequest {
    keyUuid: string;
}

export interface GenerateTokenSecurityTokensPostRequest {
    bodyGenerateTokenSecurityTokensPost: BodyGenerateTokenSecurityTokensPost;
}

export interface GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetRequest {
    category: string;
    ehelplySecuritySecretKey?: string;
}

export interface GetKeySecurityKeysKeyUuidGetRequest {
    keyUuid: string;
}

export interface VerifyKeySecurityKeysVerifyPostRequest {
    bodyVerifyKeySecurityKeysVerifyPost: BodyVerifyKeySecurityKeysVerifyPost;
}

/**
 * SecurityApi - interface
 * 
 * @export
 * @interface SecurityApiInterface
 */
export interface SecurityApiInterface {
    /**
     * 
     * @summary Create Encryption Key
     * @param {string} category 
     * @param {string} [ehelplySecuritySecretKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostRaw(requestParameters: CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Create Encryption Key
     */
    createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(requestParameters: CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Create Key
     * @param {BodyCreateKeySecurityKeysPost} bodyCreateKeySecurityKeysPost 
     * @param {number} [accessLength] 
     * @param {number} [secretLength] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    createKeySecurityKeysPostRaw(requestParameters: CreateKeySecurityKeysPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2007>>;

    /**
     * Create Key
     */
    createKeySecurityKeysPost(requestParameters: CreateKeySecurityKeysPostRequest, initOverrides?: RequestInit): Promise<InlineResponse2007>;

    /**
     * 
     * @summary Delete Key
     * @param {string} keyUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    deleteKeySecurityKeysKeyUuidDeleteRaw(requestParameters: DeleteKeySecurityKeysKeyUuidDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2008>>;

    /**
     * Delete Key
     */
    deleteKeySecurityKeysKeyUuidDelete(requestParameters: DeleteKeySecurityKeysKeyUuidDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse2008>;

    /**
     * 
     * @summary Generate Token
     * @param {BodyGenerateTokenSecurityTokensPost} bodyGenerateTokenSecurityTokensPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    generateTokenSecurityTokensPostRaw(requestParameters: GenerateTokenSecurityTokensPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2006>>;

    /**
     * Generate Token
     */
    generateTokenSecurityTokensPost(requestParameters: GenerateTokenSecurityTokensPostRequest, initOverrides?: RequestInit): Promise<InlineResponse2006>;

    /**
     * 
     * @summary Get Encryption Key
     * @param {string} category 
     * @param {string} [ehelplySecuritySecretKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetRaw(requestParameters: GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SecurityEncryptionKeyGet>>>;

    /**
     * Get Encryption Key
     */
    getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(requestParameters: GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetRequest, initOverrides?: RequestInit): Promise<Array<SecurityEncryptionKeyGet>>;

    /**
     * 
     * @summary Get Key
     * @param {string} keyUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    getKeySecurityKeysKeyUuidGetRaw(requestParameters: GetKeySecurityKeysKeyUuidGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SecurityKeyGet>>;

    /**
     * Get Key
     */
    getKeySecurityKeysKeyUuidGet(requestParameters: GetKeySecurityKeysKeyUuidGetRequest, initOverrides?: RequestInit): Promise<SecurityKeyGet>;

    /**
     * 
     * @summary Search Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    searchKeysSecurityKeysGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SecurityKeyGet>>>;

    /**
     * Search Keys
     */
    searchKeysSecurityKeysGet(initOverrides?: RequestInit): Promise<Array<SecurityKeyGet>>;

    /**
     * 
     * @summary Verify Key
     * @param {BodyVerifyKeySecurityKeysVerifyPost} bodyVerifyKeySecurityKeysVerifyPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    verifyKeySecurityKeysVerifyPostRaw(requestParameters: VerifyKeySecurityKeysVerifyPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SecurityKeyGet>>;

    /**
     * Verify Key
     */
    verifyKeySecurityKeysVerifyPost(requestParameters: VerifyKeySecurityKeysVerifyPostRequest, initOverrides?: RequestInit): Promise<SecurityKeyGet>;

}

/**
 * 
 */
export class SecurityApi extends runtime.BaseAPI implements SecurityApiInterface {

    /**
     * Create Encryption Key
     */
    async createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostRaw(requestParameters: CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ehelplySecuritySecretKey !== undefined && requestParameters.ehelplySecuritySecretKey !== null) {
            headerParameters['ehelply-security-secret-key'] = String(requestParameters.ehelplySecuritySecretKey);
        }

        const response = await this.request({
            path: `/sam/security/encryption/categories/{category}/keys`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create Encryption Key
     */
    async createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(requestParameters: CreateEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Key
     */
    async createKeySecurityKeysPostRaw(requestParameters: CreateKeySecurityKeysPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2007>> {
        if (requestParameters.bodyCreateKeySecurityKeysPost === null || requestParameters.bodyCreateKeySecurityKeysPost === undefined) {
            throw new runtime.RequiredError('bodyCreateKeySecurityKeysPost','Required parameter requestParameters.bodyCreateKeySecurityKeysPost was null or undefined when calling createKeySecurityKeysPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.accessLength !== undefined) {
            queryParameters['access_length'] = requestParameters.accessLength;
        }

        if (requestParameters.secretLength !== undefined) {
            queryParameters['secret_length'] = requestParameters.secretLength;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/security/keys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyCreateKeySecurityKeysPostToJSON(requestParameters.bodyCreateKeySecurityKeysPost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2007FromJSON(jsonValue));
    }

    /**
     * Create Key
     */
    async createKeySecurityKeysPost(requestParameters: CreateKeySecurityKeysPostRequest, initOverrides?: RequestInit): Promise<InlineResponse2007> {
        const response = await this.createKeySecurityKeysPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Key
     */
    async deleteKeySecurityKeysKeyUuidDeleteRaw(requestParameters: DeleteKeySecurityKeysKeyUuidDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2008>> {
        if (requestParameters.keyUuid === null || requestParameters.keyUuid === undefined) {
            throw new runtime.RequiredError('keyUuid','Required parameter requestParameters.keyUuid was null or undefined when calling deleteKeySecurityKeysKeyUuidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/security/keys/{key_uuid}`.replace(`{${"key_uuid"}}`, encodeURIComponent(String(requestParameters.keyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2008FromJSON(jsonValue));
    }

    /**
     * Delete Key
     */
    async deleteKeySecurityKeysKeyUuidDelete(requestParameters: DeleteKeySecurityKeysKeyUuidDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse2008> {
        const response = await this.deleteKeySecurityKeysKeyUuidDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate Token
     */
    async generateTokenSecurityTokensPostRaw(requestParameters: GenerateTokenSecurityTokensPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2006>> {
        if (requestParameters.bodyGenerateTokenSecurityTokensPost === null || requestParameters.bodyGenerateTokenSecurityTokensPost === undefined) {
            throw new runtime.RequiredError('bodyGenerateTokenSecurityTokensPost','Required parameter requestParameters.bodyGenerateTokenSecurityTokensPost was null or undefined when calling generateTokenSecurityTokensPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/security/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyGenerateTokenSecurityTokensPostToJSON(requestParameters.bodyGenerateTokenSecurityTokensPost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2006FromJSON(jsonValue));
    }

    /**
     * Generate Token
     */
    async generateTokenSecurityTokensPost(requestParameters: GenerateTokenSecurityTokensPostRequest, initOverrides?: RequestInit): Promise<InlineResponse2006> {
        const response = await this.generateTokenSecurityTokensPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Encryption Key
     */
    async getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetRaw(requestParameters: GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SecurityEncryptionKeyGet>>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ehelplySecuritySecretKey !== undefined && requestParameters.ehelplySecuritySecretKey !== null) {
            headerParameters['ehelply-security-secret-key'] = String(requestParameters.ehelplySecuritySecretKey);
        }

        const response = await this.request({
            path: `/sam/security/encryption/categories/{category}/keys`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SecurityEncryptionKeyGetFromJSON));
    }

    /**
     * Get Encryption Key
     */
    async getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(requestParameters: GetEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetRequest, initOverrides?: RequestInit): Promise<Array<SecurityEncryptionKeyGet>> {
        const response = await this.getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Key
     */
    async getKeySecurityKeysKeyUuidGetRaw(requestParameters: GetKeySecurityKeysKeyUuidGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SecurityKeyGet>> {
        if (requestParameters.keyUuid === null || requestParameters.keyUuid === undefined) {
            throw new runtime.RequiredError('keyUuid','Required parameter requestParameters.keyUuid was null or undefined when calling getKeySecurityKeysKeyUuidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/security/keys/{key_uuid}`.replace(`{${"key_uuid"}}`, encodeURIComponent(String(requestParameters.keyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityKeyGetFromJSON(jsonValue));
    }

    /**
     * Get Key
     */
    async getKeySecurityKeysKeyUuidGet(requestParameters: GetKeySecurityKeysKeyUuidGetRequest, initOverrides?: RequestInit): Promise<SecurityKeyGet> {
        const response = await this.getKeySecurityKeysKeyUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Keys
     */
    async searchKeysSecurityKeysGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SecurityKeyGet>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/security/keys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SecurityKeyGetFromJSON));
    }

    /**
     * Search Keys
     */
    async searchKeysSecurityKeysGet(initOverrides?: RequestInit): Promise<Array<SecurityKeyGet>> {
        const response = await this.searchKeysSecurityKeysGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Verify Key
     */
    async verifyKeySecurityKeysVerifyPostRaw(requestParameters: VerifyKeySecurityKeysVerifyPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SecurityKeyGet>> {
        if (requestParameters.bodyVerifyKeySecurityKeysVerifyPost === null || requestParameters.bodyVerifyKeySecurityKeysVerifyPost === undefined) {
            throw new runtime.RequiredError('bodyVerifyKeySecurityKeysVerifyPost','Required parameter requestParameters.bodyVerifyKeySecurityKeysVerifyPost was null or undefined when calling verifyKeySecurityKeysVerifyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/security/keys/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyVerifyKeySecurityKeysVerifyPostToJSON(requestParameters.bodyVerifyKeySecurityKeysVerifyPost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SecurityKeyGetFromJSON(jsonValue));
    }

    /**
     * Verify Key
     */
    async verifyKeySecurityKeysVerifyPost(requestParameters: VerifyKeySecurityKeysVerifyPostRequest, initOverrides?: RequestInit): Promise<SecurityKeyGet> {
        const response = await this.verifyKeySecurityKeysVerifyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
