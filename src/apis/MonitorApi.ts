/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.74
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.74
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost,
    BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostFromJSON,
    BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostToJSON,
    BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost,
    BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostFromJSON,
    BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostToJSON,
    BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost,
    BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostFromJSON,
    BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostToJSON,
    BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost,
    BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostFromJSON,
    BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostToJSON,
    BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost,
    BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostFromJSON,
    BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostToJSON,
    BodyRegisterServiceMonitorServicesPost,
    BodyRegisterServiceMonitorServicesPostFromJSON,
    BodyRegisterServiceMonitorServicesPostToJSON,
    BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost,
    BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostFromJSON,
    BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostToJSON,
    BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost,
    BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPostFromJSON,
    BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPostToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse403,
    InlineResponse403FromJSON,
    InlineResponse403ToJSON,
} from '../models';

export interface AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost;
}

export interface AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost;
}

export interface AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost;
}

export interface AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost;
}

export interface ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostRequest {
    service: string;
    stage: string;
    alarmUuid: string;
}

export interface GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetRequest {
    service: string;
    stage: string;
    alarmUuid: string;
}

export interface GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetRequest {
    service: string;
    stage: string;
    history?: number;
    includeTerminated?: boolean;
    includeCleared?: boolean;
}

export interface GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetRequest {
    service: string;
    stage: string;
    history?: number;
}

export interface GetServiceKpisMonitorServicesServiceKpisGetRequest {
    service: string;
    history?: number;
}

export interface GetServiceMonitorServicesServiceGetRequest {
    service: string;
    heartbeats?: boolean;
    heartbeatLimit?: number;
    alarms?: boolean;
    alarmLimit?: number;
    stage?: string;
}

export interface GetServiceSpecRequest {
    service: string;
    spec: string;
    asJson?: boolean;
}

export interface GetServiceSpecsRequest {
    service: string;
}

export interface GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetRequest {
    service: string;
    stage: string;
    history?: number;
}

export interface GetServicesMonitorServicesGetRequest {
    heartbeats?: boolean;
    heartbeatLimit?: number;
    alarms?: boolean;
    alarmLimit?: number;
    includeHidden?: boolean;
    stage?: string;
    key?: string;
}

export interface HideServiceMonitorServicesServiceStagesStageHidePostRequest {
    service: string;
    stage: string;
}

export interface IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost;
}

export interface RegisterServiceMonitorServicesPostRequest {
    bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost;
}

export interface SearchAlarmsMonitorServicesServiceAlarmsGetRequest {
    service: string;
    page?: number;
    pageSize?: number;
    search?: string;
    searchOn?: string;
    sortOn?: string;
    sortDesc?: boolean;
}

export interface ShowServiceMonitorServicesServiceStagesStageShowPostRequest {
    service: string;
    stage: string;
}

export interface TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost;
}

export interface TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostRequest {
    service: string;
    stage: string;
    bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost;
}

/**
 * MonitorApi - interface
 * 
 * @export
 * @interface MonitorApiInterface
 */
export interface MonitorApiInterface {
    /**
     * 
     * @summary Ack Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostRaw(requestParameters: AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Ack Alarm
     */
    ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(requestParameters: AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Assign Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostRaw(requestParameters: AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Assign Alarm
     */
    assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(requestParameters: AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Attach Alarm Note
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostRaw(requestParameters: AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Attach Alarm Note
     */
    attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(requestParameters: AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Attach Alarm Ticket
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostRaw(requestParameters: AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Attach Alarm Ticket
     */
    attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(requestParameters: AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Clear Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostRaw(requestParameters: ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Clear Alarm
     */
    clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(requestParameters: ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Service Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetRaw(requestParameters: GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Service Alarm
     */
    getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(requestParameters: GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Service Alarms
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {boolean} [includeTerminated] 
     * @param {boolean} [includeCleared] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetRaw(requestParameters: GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Service Alarms
     */
    getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(requestParameters: GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Service Heartbeats
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetRaw(requestParameters: GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Service Heartbeats
     */
    getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(requestParameters: GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Service Kpis
     * @param {string} service 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceKpisMonitorServicesServiceKpisGetRaw(requestParameters: GetServiceKpisMonitorServicesServiceKpisGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Service Kpis
     */
    getServiceKpisMonitorServicesServiceKpisGet(requestParameters: GetServiceKpisMonitorServicesServiceKpisGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Service
     * @param {string} service 
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {string} [stage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceMonitorServicesServiceGetRaw(requestParameters: GetServiceMonitorServicesServiceGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Service
     */
    getServiceMonitorServicesServiceGet(requestParameters: GetServiceMonitorServicesServiceGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Getservicespec
     * @param {string} service 
     * @param {string} spec 
     * @param {boolean} [asJson] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceSpecRaw(requestParameters: GetServiceSpecRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2002>>;

    /**
     * Getservicespec
     */
    getServiceSpec(requestParameters: GetServiceSpecRequest, initOverrides?: RequestInit): Promise<InlineResponse2002>;

    /**
     * 
     * @summary Getservicespecs
     * @param {string} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceSpecsRaw(requestParameters: GetServiceSpecsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>>;

    /**
     * Getservicespecs
     */
    getServiceSpecs(requestParameters: GetServiceSpecsRequest, initOverrides?: RequestInit): Promise<InlineResponse2001>;

    /**
     * 
     * @summary Get Service Vitals
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceVitalsMonitorServicesServiceStagesStageVitalsGetRaw(requestParameters: GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Service Vitals
     */
    getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(requestParameters: GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Get Services
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {boolean} [includeHidden] 
     * @param {string} [stage] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServicesMonitorServicesGetRaw(requestParameters: GetServicesMonitorServicesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Get Services
     */
    getServicesMonitorServicesGet(requestParameters: GetServicesMonitorServicesGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Getserviceswithspecs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServicesWithSpecsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>>;

    /**
     * Getserviceswithspecs
     */
    getServicesWithSpecs(initOverrides?: RequestInit): Promise<InlineResponse200>;

    /**
     * 
     * @summary Hide Service
     * @param {string} service 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    hideServiceMonitorServicesServiceStagesStageHidePostRaw(requestParameters: HideServiceMonitorServicesServiceStagesStageHidePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Hide Service
     */
    hideServiceMonitorServicesServiceStagesStageHidePost(requestParameters: HideServiceMonitorServicesServiceStagesStageHidePostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Ignore Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostRaw(requestParameters: IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Ignore Alarm
     */
    ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(requestParameters: IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Register Service
     * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    registerServiceMonitorServicesPostRaw(requestParameters: RegisterServiceMonitorServicesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Register Service
     */
    registerServiceMonitorServicesPost(requestParameters: RegisterServiceMonitorServicesPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Search Alarms
     * @param {string} service 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    searchAlarmsMonitorServicesServiceAlarmsGetRaw(requestParameters: SearchAlarmsMonitorServicesServiceAlarmsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Search Alarms
     */
    searchAlarmsMonitorServicesServiceAlarmsGet(requestParameters: SearchAlarmsMonitorServicesServiceAlarmsGetRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Show Service
     * @param {string} service 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    showServiceMonitorServicesServiceStagesStageShowPostRaw(requestParameters: ShowServiceMonitorServicesServiceStagesStageShowPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Show Service
     */
    showServiceMonitorServicesServiceStagesStageShowPost(requestParameters: ShowServiceMonitorServicesServiceStagesStageShowPostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Terminate Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostRaw(requestParameters: TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Terminate Alarm
     */
    terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(requestParameters: TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostRequest, initOverrides?: RequestInit): Promise<any>;

    /**
     * 
     * @summary Trigger Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    triggerAlarmMonitorServicesServiceStagesStageAlarmsPostRaw(requestParameters: TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>>;

    /**
     * Trigger Alarm
     */
    triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(requestParameters: TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostRequest, initOverrides?: RequestInit): Promise<any>;

}

/**
 * 
 */
export class MonitorApi extends runtime.BaseAPI implements MonitorApiInterface {

    /**
     * Ack Alarm
     */
    async ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostRaw(requestParameters: AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost.');
        }

        if (requestParameters.bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost === null || requestParameters.bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost === undefined) {
            throw new runtime.RequiredError('bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost','Required parameter requestParameters.bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost was null or undefined when calling ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/acknowledge`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostToJSON(requestParameters.bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Ack Alarm
     */
    async ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(requestParameters: AckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign Alarm
     */
    async assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostRaw(requestParameters: AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost.');
        }

        if (requestParameters.bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost === null || requestParameters.bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost === undefined) {
            throw new runtime.RequiredError('bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost','Required parameter requestParameters.bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost was null or undefined when calling assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/assign`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostToJSON(requestParameters.bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Assign Alarm
     */
    async assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(requestParameters: AssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attach Alarm Note
     */
    async attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostRaw(requestParameters: AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost.');
        }

        if (requestParameters.bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost === null || requestParameters.bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost === undefined) {
            throw new runtime.RequiredError('bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost','Required parameter requestParameters.bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost was null or undefined when calling attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/note`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostToJSON(requestParameters.bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Attach Alarm Note
     */
    async attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(requestParameters: AttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attach Alarm Ticket
     */
    async attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostRaw(requestParameters: AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost.');
        }

        if (requestParameters.bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost === null || requestParameters.bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost === undefined) {
            throw new runtime.RequiredError('bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost','Required parameter requestParameters.bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost was null or undefined when calling attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ticket`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostToJSON(requestParameters.bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Attach Alarm Ticket
     */
    async attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(requestParameters: AttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear Alarm
     */
    async clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostRaw(requestParameters: ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/clear`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Clear Alarm
     */
    async clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(requestParameters: ClearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Service Alarm
     */
    async getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetRaw(requestParameters: GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Service Alarm
     */
    async getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(requestParameters: GetServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Service Alarms
     */
    async getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetRaw(requestParameters: GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        if (requestParameters.includeTerminated !== undefined) {
            queryParameters['include_terminated'] = requestParameters.includeTerminated;
        }

        if (requestParameters.includeCleared !== undefined) {
            queryParameters['include_cleared'] = requestParameters.includeCleared;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Service Alarms
     */
    async getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(requestParameters: GetServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Service Heartbeats
     */
    async getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetRaw(requestParameters: GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/heartbeats`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Service Heartbeats
     */
    async getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(requestParameters: GetServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Service Kpis
     */
    async getServiceKpisMonitorServicesServiceKpisGetRaw(requestParameters: GetServiceKpisMonitorServicesServiceKpisGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceKpisMonitorServicesServiceKpisGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/kpis`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Service Kpis
     */
    async getServiceKpisMonitorServicesServiceKpisGet(requestParameters: GetServiceKpisMonitorServicesServiceKpisGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getServiceKpisMonitorServicesServiceKpisGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Service
     */
    async getServiceMonitorServicesServiceGetRaw(requestParameters: GetServiceMonitorServicesServiceGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceMonitorServicesServiceGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.heartbeats !== undefined) {
            queryParameters['heartbeats'] = requestParameters.heartbeats;
        }

        if (requestParameters.heartbeatLimit !== undefined) {
            queryParameters['heartbeat_limit'] = requestParameters.heartbeatLimit;
        }

        if (requestParameters.alarms !== undefined) {
            queryParameters['alarms'] = requestParameters.alarms;
        }

        if (requestParameters.alarmLimit !== undefined) {
            queryParameters['alarm_limit'] = requestParameters.alarmLimit;
        }

        if (requestParameters.stage !== undefined) {
            queryParameters['stage'] = requestParameters.stage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Service
     */
    async getServiceMonitorServicesServiceGet(requestParameters: GetServiceMonitorServicesServiceGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getServiceMonitorServicesServiceGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservicespec
     */
    async getServiceSpecRaw(requestParameters: GetServiceSpecRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceSpec.');
        }

        if (requestParameters.spec === null || requestParameters.spec === undefined) {
            throw new runtime.RequiredError('spec','Required parameter requestParameters.spec was null or undefined when calling getServiceSpec.');
        }

        const queryParameters: any = {};

        if (requestParameters.asJson !== undefined) {
            queryParameters['as_json'] = requestParameters.asJson;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/specs/{spec}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"spec"}}`, encodeURIComponent(String(requestParameters.spec))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Getservicespec
     */
    async getServiceSpec(requestParameters: GetServiceSpecRequest, initOverrides?: RequestInit): Promise<InlineResponse2002> {
        const response = await this.getServiceSpecRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservicespecs
     */
    async getServiceSpecsRaw(requestParameters: GetServiceSpecsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceSpecs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/specs`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Getservicespecs
     */
    async getServiceSpecs(requestParameters: GetServiceSpecsRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.getServiceSpecsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Service Vitals
     */
    async getServiceVitalsMonitorServicesServiceStagesStageVitalsGetRaw(requestParameters: GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceVitalsMonitorServicesServiceStagesStageVitalsGet.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling getServiceVitalsMonitorServicesServiceStagesStageVitalsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/vitals`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Service Vitals
     */
    async getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(requestParameters: GetServiceVitalsMonitorServicesServiceStagesStageVitalsGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getServiceVitalsMonitorServicesServiceStagesStageVitalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Services
     */
    async getServicesMonitorServicesGetRaw(requestParameters: GetServicesMonitorServicesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.heartbeats !== undefined) {
            queryParameters['heartbeats'] = requestParameters.heartbeats;
        }

        if (requestParameters.heartbeatLimit !== undefined) {
            queryParameters['heartbeat_limit'] = requestParameters.heartbeatLimit;
        }

        if (requestParameters.alarms !== undefined) {
            queryParameters['alarms'] = requestParameters.alarms;
        }

        if (requestParameters.alarmLimit !== undefined) {
            queryParameters['alarm_limit'] = requestParameters.alarmLimit;
        }

        if (requestParameters.includeHidden !== undefined) {
            queryParameters['include_hidden'] = requestParameters.includeHidden;
        }

        if (requestParameters.stage !== undefined) {
            queryParameters['stage'] = requestParameters.stage;
        }

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get Services
     */
    async getServicesMonitorServicesGet(requestParameters: GetServicesMonitorServicesGetRequest = {}, initOverrides?: RequestInit): Promise<any> {
        const response = await this.getServicesMonitorServicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getserviceswithspecs
     */
    async getServicesWithSpecsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/specs/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Getserviceswithspecs
     */
    async getServicesWithSpecs(initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.getServicesWithSpecsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Hide Service
     */
    async hideServiceMonitorServicesServiceStagesStageHidePostRaw(requestParameters: HideServiceMonitorServicesServiceStagesStageHidePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling hideServiceMonitorServicesServiceStagesStageHidePost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling hideServiceMonitorServicesServiceStagesStageHidePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/hide`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Hide Service
     */
    async hideServiceMonitorServicesServiceStagesStageHidePost(requestParameters: HideServiceMonitorServicesServiceStagesStageHidePostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.hideServiceMonitorServicesServiceStagesStageHidePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ignore Alarm
     */
    async ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostRaw(requestParameters: IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost.');
        }

        if (requestParameters.bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost === null || requestParameters.bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost === undefined) {
            throw new runtime.RequiredError('bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost','Required parameter requestParameters.bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost was null or undefined when calling ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ignore`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostToJSON(requestParameters.bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Ignore Alarm
     */
    async ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(requestParameters: IgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register Service
     */
    async registerServiceMonitorServicesPostRaw(requestParameters: RegisterServiceMonitorServicesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bodyRegisterServiceMonitorServicesPost === null || requestParameters.bodyRegisterServiceMonitorServicesPost === undefined) {
            throw new runtime.RequiredError('bodyRegisterServiceMonitorServicesPost','Required parameter requestParameters.bodyRegisterServiceMonitorServicesPost was null or undefined when calling registerServiceMonitorServicesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyRegisterServiceMonitorServicesPostToJSON(requestParameters.bodyRegisterServiceMonitorServicesPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Register Service
     */
    async registerServiceMonitorServicesPost(requestParameters: RegisterServiceMonitorServicesPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.registerServiceMonitorServicesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search Alarms
     */
    async searchAlarmsMonitorServicesServiceAlarmsGetRaw(requestParameters: SearchAlarmsMonitorServicesServiceAlarmsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling searchAlarmsMonitorServicesServiceAlarmsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchOn !== undefined) {
            queryParameters['search_on'] = requestParameters.searchOn;
        }

        if (requestParameters.sortOn !== undefined) {
            queryParameters['sort_on'] = requestParameters.sortOn;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/alarms`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Search Alarms
     */
    async searchAlarmsMonitorServicesServiceAlarmsGet(requestParameters: SearchAlarmsMonitorServicesServiceAlarmsGetRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.searchAlarmsMonitorServicesServiceAlarmsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show Service
     */
    async showServiceMonitorServicesServiceStagesStageShowPostRaw(requestParameters: ShowServiceMonitorServicesServiceStagesStageShowPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling showServiceMonitorServicesServiceStagesStageShowPost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling showServiceMonitorServicesServiceStagesStageShowPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/show`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Show Service
     */
    async showServiceMonitorServicesServiceStagesStageShowPost(requestParameters: ShowServiceMonitorServicesServiceStagesStageShowPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.showServiceMonitorServicesServiceStagesStageShowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Terminate Alarm
     */
    async terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostRaw(requestParameters: TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost.');
        }

        if (requestParameters.bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost === null || requestParameters.bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost === undefined) {
            throw new runtime.RequiredError('bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost','Required parameter requestParameters.bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost was null or undefined when calling terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/terminate`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostToJSON(requestParameters.bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Terminate Alarm
     */
    async terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(requestParameters: TerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Trigger Alarm
     */
    async triggerAlarmMonitorServicesServiceStagesStageAlarmsPostRaw(requestParameters: TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling triggerAlarmMonitorServicesServiceStagesStageAlarmsPost.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling triggerAlarmMonitorServicesServiceStagesStageAlarmsPost.');
        }

        if (requestParameters.bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost === null || requestParameters.bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost === undefined) {
            throw new runtime.RequiredError('bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost','Required parameter requestParameters.bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost was null or undefined when calling triggerAlarmMonitorServicesServiceStagesStageAlarmsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPostToJSON(requestParameters.bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Trigger Alarm
     */
    async triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(requestParameters: TriggerAlarmMonitorServicesServiceStagesStageAlarmsPostRequest, initOverrides?: RequestInit): Promise<any> {
        const response = await this.triggerAlarmMonitorServicesServiceStagesStageAlarmsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
