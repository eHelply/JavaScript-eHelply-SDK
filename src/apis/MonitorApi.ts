/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.101
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.101
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlarmAcknowledge,
  AlarmAssign,
  AlarmCreate,
  AlarmIgnore,
  AlarmNote,
  AlarmResponse,
  AlarmTerminate,
  AlarmTicket,
  GetServiceServiceWithSpecsResponse,
  GetServiceSpecResponse,
  GetServiceSpecsResponse,
  GetServicesWithSpecs403Response,
  HTTPValidationError,
  HeartbeatResponse,
  KpiResponse,
  Page,
  ServiceCreate,
  ServiceMessageResponse,
  ServiceResponse,
  StatsVitalsResponse,
} from '../models';
import {
    AlarmAcknowledgeFromJSON,
    AlarmAcknowledgeToJSON,
    AlarmAssignFromJSON,
    AlarmAssignToJSON,
    AlarmCreateFromJSON,
    AlarmCreateToJSON,
    AlarmIgnoreFromJSON,
    AlarmIgnoreToJSON,
    AlarmNoteFromJSON,
    AlarmNoteToJSON,
    AlarmResponseFromJSON,
    AlarmResponseToJSON,
    AlarmTerminateFromJSON,
    AlarmTerminateToJSON,
    AlarmTicketFromJSON,
    AlarmTicketToJSON,
    GetServiceServiceWithSpecsResponseFromJSON,
    GetServiceServiceWithSpecsResponseToJSON,
    GetServiceSpecResponseFromJSON,
    GetServiceSpecResponseToJSON,
    GetServiceSpecsResponseFromJSON,
    GetServiceSpecsResponseToJSON,
    GetServicesWithSpecs403ResponseFromJSON,
    GetServicesWithSpecs403ResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    HeartbeatResponseFromJSON,
    HeartbeatResponseToJSON,
    KpiResponseFromJSON,
    KpiResponseToJSON,
    PageFromJSON,
    PageToJSON,
    ServiceCreateFromJSON,
    ServiceCreateToJSON,
    ServiceMessageResponseFromJSON,
    ServiceMessageResponseToJSON,
    ServiceResponseFromJSON,
    ServiceResponseToJSON,
    StatsVitalsResponseFromJSON,
    StatsVitalsResponseToJSON,
} from '../models';

export interface AcknowledgeAlarmRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    alarmAcknowledge: AlarmAcknowledge;
}

export interface AssignAlarmRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    alarmAssign: AlarmAssign;
}

export interface AttachAlarmNoteRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    alarmNote: AlarmNote;
}

export interface AttachAlarmTicketRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    alarmTicket: AlarmTicket;
}

export interface ClearAlarmRequest {
    service: string;
    stage: string;
    alarmUuid: string;
}

export interface GetServiceRequest {
    service: string;
    heartbeats?: boolean;
    heartbeatLimit?: number;
    alarms?: boolean;
    alarmLimit?: number;
    stage?: string;
}

export interface GetServiceAlarmRequest {
    service: string;
    stage: string;
    alarmUuid: string;
}

export interface GetServiceAlarmsRequest {
    service: string;
    stage: string;
    history?: number;
    includeTerminated?: boolean;
    includeCleared?: boolean;
}

export interface GetServiceHeartbeatRequest {
    service: string;
    stage: string;
    history?: number;
}

export interface GetServiceKpisRequest {
    service: string;
    history?: number;
}

export interface GetServiceSpecRequest {
    service: string;
    spec: string;
}

export interface GetServiceSpecsRequest {
    service: string;
}

export interface GetServiceVitalsRequest {
    service: string;
    stage: string;
    history?: number;
}

export interface GetServicesRequest {
    heartbeats?: boolean;
    heartbeatLimit?: number;
    alarms?: boolean;
    alarmLimit?: number;
    includeHidden?: boolean;
    stage?: string;
    key?: string;
}

export interface HideServiceRequest {
    service: string;
    stage: string;
}

export interface IgnoreAlarmRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    alarmIgnore: AlarmIgnore;
}

export interface RegisterServiceRequest {
    serviceCreate: ServiceCreate;
}

export interface SearchAlarmsRequest {
    service: string;
    page?: number;
    pageSize?: number;
    search?: string;
    searchOn?: string;
    sortOn?: string;
    sortDesc?: boolean;
}

export interface ShowServiceRequest {
    service: string;
    stage: string;
}

export interface TerminateAlarmRequest {
    service: string;
    stage: string;
    alarmUuid: string;
    alarmTerminate: AlarmTerminate;
}

export interface TriggerAlarmRequest {
    service: string;
    stage: string;
    alarmCreate: AlarmCreate;
}

/**
 * MonitorApi - interface
 * 
 * @export
 * @interface MonitorApiInterface
 */
export interface MonitorApiInterface {
    /**
     * 
     * @summary Acknowledgealarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {AlarmAcknowledge} alarmAcknowledge 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    acknowledgeAlarmRaw(requestParameters: AcknowledgeAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Acknowledgealarm
     */
    acknowledgeAlarm(requestParameters: AcknowledgeAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

    /**
     * 
     * @summary Assignalarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {AlarmAssign} alarmAssign 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    assignAlarmRaw(requestParameters: AssignAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Assignalarm
     */
    assignAlarm(requestParameters: AssignAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

    /**
     * 
     * @summary Attachalarmnote
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {AlarmNote} alarmNote 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    attachAlarmNoteRaw(requestParameters: AttachAlarmNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Attachalarmnote
     */
    attachAlarmNote(requestParameters: AttachAlarmNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

    /**
     * 
     * @summary Attachalarmticket
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {AlarmTicket} alarmTicket 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    attachAlarmTicketRaw(requestParameters: AttachAlarmTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Attachalarmticket
     */
    attachAlarmTicket(requestParameters: AttachAlarmTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

    /**
     * 
     * @summary Clearalarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    clearAlarmRaw(requestParameters: ClearAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Clearalarm
     */
    clearAlarm(requestParameters: ClearAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

    /**
     * 
     * @summary Getservice
     * @param {string} service 
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {string} [stage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceRaw(requestParameters: GetServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceResponse>>;

    /**
     * Getservice
     */
    getService(requestParameters: GetServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceResponse>;

    /**
     * 
     * @summary Getservicealarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceAlarmRaw(requestParameters: GetServiceAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Getservicealarm
     */
    getServiceAlarm(requestParameters: GetServiceAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

    /**
     * 
     * @summary Getservicealarms
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {boolean} [includeTerminated] 
     * @param {boolean} [includeCleared] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceAlarmsRaw(requestParameters: GetServiceAlarmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlarmResponse>>>;

    /**
     * Getservicealarms
     */
    getServiceAlarms(requestParameters: GetServiceAlarmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlarmResponse>>;

    /**
     * 
     * @summary Getserviceheartbeat
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceHeartbeatRaw(requestParameters: GetServiceHeartbeatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HeartbeatResponse>>>;

    /**
     * Getserviceheartbeat
     */
    getServiceHeartbeat(requestParameters: GetServiceHeartbeatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HeartbeatResponse>>;

    /**
     * 
     * @summary Getservicekpis
     * @param {string} service 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceKpisRaw(requestParameters: GetServiceKpisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KpiResponse>>>;

    /**
     * Getservicekpis
     */
    getServiceKpis(requestParameters: GetServiceKpisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KpiResponse>>;

    /**
     * 
     * @summary Getservicespec
     * @param {string} service 
     * @param {string} spec 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceSpecRaw(requestParameters: GetServiceSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceSpecResponse>>;

    /**
     * Getservicespec
     */
    getServiceSpec(requestParameters: GetServiceSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceSpecResponse>;

    /**
     * 
     * @summary Getservicespecs
     * @param {string} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceSpecsRaw(requestParameters: GetServiceSpecsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceSpecsResponse>>;

    /**
     * Getservicespecs
     */
    getServiceSpecs(requestParameters: GetServiceSpecsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceSpecsResponse>;

    /**
     * 
     * @summary Getservicevitals
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceVitalsRaw(requestParameters: GetServiceVitalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StatsVitalsResponse>>>;

    /**
     * Getservicevitals
     */
    getServiceVitals(requestParameters: GetServiceVitalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StatsVitalsResponse>>;

    /**
     * 
     * @summary Getservices
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {boolean} [includeHidden] 
     * @param {string} [stage] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServicesRaw(requestParameters: GetServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceResponse>>>;

    /**
     * Getservices
     */
    getServices(requestParameters: GetServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceResponse>>;

    /**
     * 
     * @summary Getserviceswithspecs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServicesWithSpecsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceServiceWithSpecsResponse>>;

    /**
     * Getserviceswithspecs
     */
    getServicesWithSpecs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceServiceWithSpecsResponse>;

    /**
     * 
     * @summary Hideservice
     * @param {string} service 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    hideServiceRaw(requestParameters: HideServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceMessageResponse>>;

    /**
     * Hideservice
     */
    hideService(requestParameters: HideServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceMessageResponse>;

    /**
     * 
     * @summary Ignorealarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {AlarmIgnore} alarmIgnore 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    ignoreAlarmRaw(requestParameters: IgnoreAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Ignorealarm
     */
    ignoreAlarm(requestParameters: IgnoreAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

    /**
     * 
     * @summary Registerservice
     * @param {ServiceCreate} serviceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    registerServiceRaw(requestParameters: RegisterServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceResponse>>;

    /**
     * Registerservice
     */
    registerService(requestParameters: RegisterServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceResponse>;

    /**
     * 
     * @summary Searchalarms
     * @param {string} service 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    searchAlarmsRaw(requestParameters: SearchAlarmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>>;

    /**
     * Searchalarms
     */
    searchAlarms(requestParameters: SearchAlarmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page>;

    /**
     * 
     * @summary Showservice
     * @param {string} service 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    showServiceRaw(requestParameters: ShowServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceMessageResponse>>;

    /**
     * Showservice
     */
    showService(requestParameters: ShowServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceMessageResponse>;

    /**
     * 
     * @summary Terminatealarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {AlarmTerminate} alarmTerminate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    terminateAlarmRaw(requestParameters: TerminateAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Terminatealarm
     */
    terminateAlarm(requestParameters: TerminateAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

    /**
     * 
     * @summary Triggeralarm
     * @param {string} service 
     * @param {string} stage 
     * @param {AlarmCreate} alarmCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    triggerAlarmRaw(requestParameters: TriggerAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>>;

    /**
     * Triggeralarm
     */
    triggerAlarm(requestParameters: TriggerAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse>;

}

/**
 * 
 */
export class MonitorApi extends runtime.BaseAPI implements MonitorApiInterface {

    /**
     * Acknowledgealarm
     */
    async acknowledgeAlarmRaw(requestParameters: AcknowledgeAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling acknowledgeAlarm.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling acknowledgeAlarm.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling acknowledgeAlarm.');
        }

        if (requestParameters.alarmAcknowledge === null || requestParameters.alarmAcknowledge === undefined) {
            throw new runtime.RequiredError('alarmAcknowledge','Required parameter requestParameters.alarmAcknowledge was null or undefined when calling acknowledgeAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/acknowledge`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmAcknowledgeToJSON(requestParameters.alarmAcknowledge),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Acknowledgealarm
     */
    async acknowledgeAlarm(requestParameters: AcknowledgeAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.acknowledgeAlarmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assignalarm
     */
    async assignAlarmRaw(requestParameters: AssignAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling assignAlarm.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling assignAlarm.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling assignAlarm.');
        }

        if (requestParameters.alarmAssign === null || requestParameters.alarmAssign === undefined) {
            throw new runtime.RequiredError('alarmAssign','Required parameter requestParameters.alarmAssign was null or undefined when calling assignAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/assign`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmAssignToJSON(requestParameters.alarmAssign),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Assignalarm
     */
    async assignAlarm(requestParameters: AssignAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.assignAlarmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attachalarmnote
     */
    async attachAlarmNoteRaw(requestParameters: AttachAlarmNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling attachAlarmNote.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling attachAlarmNote.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling attachAlarmNote.');
        }

        if (requestParameters.alarmNote === null || requestParameters.alarmNote === undefined) {
            throw new runtime.RequiredError('alarmNote','Required parameter requestParameters.alarmNote was null or undefined when calling attachAlarmNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/note`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmNoteToJSON(requestParameters.alarmNote),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Attachalarmnote
     */
    async attachAlarmNote(requestParameters: AttachAlarmNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.attachAlarmNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attachalarmticket
     */
    async attachAlarmTicketRaw(requestParameters: AttachAlarmTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling attachAlarmTicket.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling attachAlarmTicket.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling attachAlarmTicket.');
        }

        if (requestParameters.alarmTicket === null || requestParameters.alarmTicket === undefined) {
            throw new runtime.RequiredError('alarmTicket','Required parameter requestParameters.alarmTicket was null or undefined when calling attachAlarmTicket.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ticket`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmTicketToJSON(requestParameters.alarmTicket),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Attachalarmticket
     */
    async attachAlarmTicket(requestParameters: AttachAlarmTicketRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.attachAlarmTicketRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clearalarm
     */
    async clearAlarmRaw(requestParameters: ClearAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling clearAlarm.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling clearAlarm.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling clearAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/clear`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Clearalarm
     */
    async clearAlarm(requestParameters: ClearAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.clearAlarmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservice
     */
    async getServiceRaw(requestParameters: GetServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getService.');
        }

        const queryParameters: any = {};

        if (requestParameters.heartbeats !== undefined) {
            queryParameters['heartbeats'] = requestParameters.heartbeats;
        }

        if (requestParameters.heartbeatLimit !== undefined) {
            queryParameters['heartbeat_limit'] = requestParameters.heartbeatLimit;
        }

        if (requestParameters.alarms !== undefined) {
            queryParameters['alarms'] = requestParameters.alarms;
        }

        if (requestParameters.alarmLimit !== undefined) {
            queryParameters['alarm_limit'] = requestParameters.alarmLimit;
        }

        if (requestParameters.stage !== undefined) {
            queryParameters['stage'] = requestParameters.stage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResponseFromJSON(jsonValue));
    }

    /**
     * Getservice
     */
    async getService(requestParameters: GetServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceResponse> {
        const response = await this.getServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservicealarm
     */
    async getServiceAlarmRaw(requestParameters: GetServiceAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceAlarm.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling getServiceAlarm.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling getServiceAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Getservicealarm
     */
    async getServiceAlarm(requestParameters: GetServiceAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.getServiceAlarmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservicealarms
     */
    async getServiceAlarmsRaw(requestParameters: GetServiceAlarmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AlarmResponse>>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceAlarms.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling getServiceAlarms.');
        }

        const queryParameters: any = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        if (requestParameters.includeTerminated !== undefined) {
            queryParameters['include_terminated'] = requestParameters.includeTerminated;
        }

        if (requestParameters.includeCleared !== undefined) {
            queryParameters['include_cleared'] = requestParameters.includeCleared;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlarmResponseFromJSON));
    }

    /**
     * Getservicealarms
     */
    async getServiceAlarms(requestParameters: GetServiceAlarmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AlarmResponse>> {
        const response = await this.getServiceAlarmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getserviceheartbeat
     */
    async getServiceHeartbeatRaw(requestParameters: GetServiceHeartbeatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<HeartbeatResponse>>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceHeartbeat.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling getServiceHeartbeat.');
        }

        const queryParameters: any = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/heartbeats`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HeartbeatResponseFromJSON));
    }

    /**
     * Getserviceheartbeat
     */
    async getServiceHeartbeat(requestParameters: GetServiceHeartbeatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<HeartbeatResponse>> {
        const response = await this.getServiceHeartbeatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservicekpis
     */
    async getServiceKpisRaw(requestParameters: GetServiceKpisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KpiResponse>>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceKpis.');
        }

        const queryParameters: any = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/kpis`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KpiResponseFromJSON));
    }

    /**
     * Getservicekpis
     */
    async getServiceKpis(requestParameters: GetServiceKpisRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KpiResponse>> {
        const response = await this.getServiceKpisRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservicespec
     */
    async getServiceSpecRaw(requestParameters: GetServiceSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceSpecResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceSpec.');
        }

        if (requestParameters.spec === null || requestParameters.spec === undefined) {
            throw new runtime.RequiredError('spec','Required parameter requestParameters.spec was null or undefined when calling getServiceSpec.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/specs/{spec}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"spec"}}`, encodeURIComponent(String(requestParameters.spec))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServiceSpecResponseFromJSON(jsonValue));
    }

    /**
     * Getservicespec
     */
    async getServiceSpec(requestParameters: GetServiceSpecRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceSpecResponse> {
        const response = await this.getServiceSpecRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservicespecs
     */
    async getServiceSpecsRaw(requestParameters: GetServiceSpecsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceSpecsResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceSpecs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/specs`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServiceSpecsResponseFromJSON(jsonValue));
    }

    /**
     * Getservicespecs
     */
    async getServiceSpecs(requestParameters: GetServiceSpecsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceSpecsResponse> {
        const response = await this.getServiceSpecsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservicevitals
     */
    async getServiceVitalsRaw(requestParameters: GetServiceVitalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StatsVitalsResponse>>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getServiceVitals.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling getServiceVitals.');
        }

        const queryParameters: any = {};

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/vitals`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StatsVitalsResponseFromJSON));
    }

    /**
     * Getservicevitals
     */
    async getServiceVitals(requestParameters: GetServiceVitalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StatsVitalsResponse>> {
        const response = await this.getServiceVitalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getservices
     */
    async getServicesRaw(requestParameters: GetServicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceResponse>>> {
        const queryParameters: any = {};

        if (requestParameters.heartbeats !== undefined) {
            queryParameters['heartbeats'] = requestParameters.heartbeats;
        }

        if (requestParameters.heartbeatLimit !== undefined) {
            queryParameters['heartbeat_limit'] = requestParameters.heartbeatLimit;
        }

        if (requestParameters.alarms !== undefined) {
            queryParameters['alarms'] = requestParameters.alarms;
        }

        if (requestParameters.alarmLimit !== undefined) {
            queryParameters['alarm_limit'] = requestParameters.alarmLimit;
        }

        if (requestParameters.includeHidden !== undefined) {
            queryParameters['include_hidden'] = requestParameters.includeHidden;
        }

        if (requestParameters.stage !== undefined) {
            queryParameters['stage'] = requestParameters.stage;
        }

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceResponseFromJSON));
    }

    /**
     * Getservices
     */
    async getServices(requestParameters: GetServicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceResponse>> {
        const response = await this.getServicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getserviceswithspecs
     */
    async getServicesWithSpecsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetServiceServiceWithSpecsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/specs/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetServiceServiceWithSpecsResponseFromJSON(jsonValue));
    }

    /**
     * Getserviceswithspecs
     */
    async getServicesWithSpecs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetServiceServiceWithSpecsResponse> {
        const response = await this.getServicesWithSpecsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Hideservice
     */
    async hideServiceRaw(requestParameters: HideServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceMessageResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling hideService.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling hideService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/hide`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceMessageResponseFromJSON(jsonValue));
    }

    /**
     * Hideservice
     */
    async hideService(requestParameters: HideServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceMessageResponse> {
        const response = await this.hideServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ignorealarm
     */
    async ignoreAlarmRaw(requestParameters: IgnoreAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling ignoreAlarm.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling ignoreAlarm.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling ignoreAlarm.');
        }

        if (requestParameters.alarmIgnore === null || requestParameters.alarmIgnore === undefined) {
            throw new runtime.RequiredError('alarmIgnore','Required parameter requestParameters.alarmIgnore was null or undefined when calling ignoreAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ignore`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmIgnoreToJSON(requestParameters.alarmIgnore),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Ignorealarm
     */
    async ignoreAlarm(requestParameters: IgnoreAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.ignoreAlarmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Registerservice
     */
    async registerServiceRaw(requestParameters: RegisterServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceResponse>> {
        if (requestParameters.serviceCreate === null || requestParameters.serviceCreate === undefined) {
            throw new runtime.RequiredError('serviceCreate','Required parameter requestParameters.serviceCreate was null or undefined when calling registerService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceCreateToJSON(requestParameters.serviceCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceResponseFromJSON(jsonValue));
    }

    /**
     * Registerservice
     */
    async registerService(requestParameters: RegisterServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceResponse> {
        const response = await this.registerServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Searchalarms
     */
    async searchAlarmsRaw(requestParameters: SearchAlarmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Page>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling searchAlarms.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchOn !== undefined) {
            queryParameters['search_on'] = requestParameters.searchOn;
        }

        if (requestParameters.sortOn !== undefined) {
            queryParameters['sort_on'] = requestParameters.sortOn;
        }

        if (requestParameters.sortDesc !== undefined) {
            queryParameters['sort_desc'] = requestParameters.sortDesc;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/alarms`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageFromJSON(jsonValue));
    }

    /**
     * Searchalarms
     */
    async searchAlarms(requestParameters: SearchAlarmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Page> {
        const response = await this.searchAlarmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Showservice
     */
    async showServiceRaw(requestParameters: ShowServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceMessageResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling showService.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling showService.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/show`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceMessageResponseFromJSON(jsonValue));
    }

    /**
     * Showservice
     */
    async showService(requestParameters: ShowServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceMessageResponse> {
        const response = await this.showServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Terminatealarm
     */
    async terminateAlarmRaw(requestParameters: TerminateAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling terminateAlarm.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling terminateAlarm.');
        }

        if (requestParameters.alarmUuid === null || requestParameters.alarmUuid === undefined) {
            throw new runtime.RequiredError('alarmUuid','Required parameter requestParameters.alarmUuid was null or undefined when calling terminateAlarm.');
        }

        if (requestParameters.alarmTerminate === null || requestParameters.alarmTerminate === undefined) {
            throw new runtime.RequiredError('alarmTerminate','Required parameter requestParameters.alarmTerminate was null or undefined when calling terminateAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/terminate`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))).replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(requestParameters.alarmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmTerminateToJSON(requestParameters.alarmTerminate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Terminatealarm
     */
    async terminateAlarm(requestParameters: TerminateAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.terminateAlarmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Triggeralarm
     */
    async triggerAlarmRaw(requestParameters: TriggerAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlarmResponse>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling triggerAlarm.');
        }

        if (requestParameters.stage === null || requestParameters.stage === undefined) {
            throw new runtime.RequiredError('stage','Required parameter requestParameters.stage was null or undefined when calling triggerAlarm.');
        }

        if (requestParameters.alarmCreate === null || requestParameters.alarmCreate === undefined) {
            throw new runtime.RequiredError('alarmCreate','Required parameter requestParameters.alarmCreate was null or undefined when calling triggerAlarm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sam/monitor/services/{service}/stages/{stage}/alarms`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"stage"}}`, encodeURIComponent(String(requestParameters.stage))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlarmCreateToJSON(requestParameters.alarmCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlarmResponseFromJSON(jsonValue));
    }

    /**
     * Triggeralarm
     */
    async triggerAlarm(requestParameters: TriggerAlarmRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlarmResponse> {
        const response = await this.triggerAlarmRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
