/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.120
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.120
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateMeta200Response,
    CreateMeta200ResponseFromJSON,
    CreateMeta200ResponseToJSON,
    CreateSlug200Response,
    CreateSlug200ResponseFromJSON,
    CreateSlug200ResponseToJSON,
    DeleteMeta200Response,
    DeleteMeta200ResponseFromJSON,
    DeleteMeta200ResponseToJSON,
    GetAppointment403Response,
    GetAppointment403ResponseFromJSON,
    GetAppointment403ResponseToJSON,
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MetaCreate,
    MetaCreateFromJSON,
    MetaCreateToJSON,
    MetaDynamo,
    MetaDynamoFromJSON,
    MetaDynamoToJSON,
    Slugger,
    SluggerFromJSON,
    SluggerToJSON,
    TouchMeta200Response,
    TouchMeta200ResponseFromJSON,
    TouchMeta200ResponseToJSON,
    UpdateMeta200Response,
    UpdateMeta200ResponseFromJSON,
    UpdateMeta200ResponseToJSON,
} from '../models';

export interface CreateMetaRequest {
    service: string;
    typeName: string;
    entityUuid: string;
    metaCreate: MetaCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateSlugRequest {
    slugger: Slugger;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteMetaRequest {
    metaUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteMetaFromPartsRequest {
    service: string;
    typeName: string;
    entityUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetMetaRequest {
    metaUuid: string;
    detailed?: boolean;
    custom?: boolean;
    history?: number;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetMetaFromPartsRequest {
    service: string;
    typeName: string;
    entityUuid: string;
    detailed?: boolean;
    custom?: boolean;
    history?: number;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface TouchMetaRequest {
    metaUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdateMetaRequest {
    metaUuid: string;
    metaCreate: MetaCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdateMetaFromPartsRequest {
    service: string;
    typeName: string;
    entityUuid: string;
    metaCreate: MetaCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

/**
 * MetaApi - interface
 * 
 * @export
 * @interface MetaApiInterface
 */
export interface MetaApiInterface {
    /**
     * 
     * @summary Createmeta
     * @param {string} service 
     * @param {string} typeName 
     * @param {string} entityUuid 
     * @param {MetaCreate} metaCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    createMetaRaw(requestParameters: CreateMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateMeta200Response>>;

    /**
     * Createmeta
     */
    createMeta(requestParameters: CreateMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateMeta200Response>;

    /**
     * 
     * @summary Createslug
     * @param {Slugger} slugger 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    createSlugRaw(requestParameters: CreateSlugRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateSlug200Response>>;

    /**
     * Createslug
     */
    createSlug(requestParameters: CreateSlugRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateSlug200Response>;

    /**
     * 
     * @summary Deletemeta
     * @param {string} metaUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    deleteMetaRaw(requestParameters: DeleteMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteMeta200Response>>;

    /**
     * Deletemeta
     */
    deleteMeta(requestParameters: DeleteMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteMeta200Response>;

    /**
     * 
     * @summary Deletemetafromparts
     * @param {string} service 
     * @param {string} typeName 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    deleteMetaFromPartsRaw(requestParameters: DeleteMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteMeta200Response>>;

    /**
     * Deletemetafromparts
     */
    deleteMetaFromParts(requestParameters: DeleteMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteMeta200Response>;

    /**
     * 
     * @summary Getmeta
     * @param {string} metaUuid 
     * @param {boolean} [detailed] 
     * @param {boolean} [custom] 
     * @param {number} [history] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getMetaRaw(requestParameters: GetMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MetaDynamo>>;

    /**
     * Getmeta
     */
    getMeta(requestParameters: GetMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MetaDynamo>;

    /**
     * 
     * @summary Getmetafromparts
     * @param {string} service 
     * @param {string} typeName 
     * @param {string} entityUuid 
     * @param {boolean} [detailed] 
     * @param {boolean} [custom] 
     * @param {number} [history] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getMetaFromPartsRaw(requestParameters: GetMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MetaDynamo>>;

    /**
     * Getmetafromparts
     */
    getMetaFromParts(requestParameters: GetMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MetaDynamo>;

    /**
     * 
     * @summary Touchmeta
     * @param {string} metaUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    touchMetaRaw(requestParameters: TouchMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TouchMeta200Response>>;

    /**
     * Touchmeta
     */
    touchMeta(requestParameters: TouchMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TouchMeta200Response>;

    /**
     * 
     * @summary Updatemeta
     * @param {string} metaUuid 
     * @param {MetaCreate} metaCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    updateMetaRaw(requestParameters: UpdateMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateMeta200Response>>;

    /**
     * Updatemeta
     */
    updateMeta(requestParameters: UpdateMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateMeta200Response>;

    /**
     * 
     * @summary Updatemetafromparts
     * @param {string} service 
     * @param {string} typeName 
     * @param {string} entityUuid 
     * @param {MetaCreate} metaCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    updateMetaFromPartsRaw(requestParameters: UpdateMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateMeta200Response>>;

    /**
     * Updatemetafromparts
     */
    updateMetaFromParts(requestParameters: UpdateMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateMeta200Response>;

}

/**
 * 
 */
export class MetaApi extends runtime.BaseAPI implements MetaApiInterface {

    /**
     * Createmeta
     */
    async createMetaRaw(requestParameters: CreateMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateMeta200Response>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling createMeta.');
        }

        if (requestParameters.typeName === null || requestParameters.typeName === undefined) {
            throw new runtime.RequiredError('typeName','Required parameter requestParameters.typeName was null or undefined when calling createMeta.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling createMeta.');
        }

        if (requestParameters.metaCreate === null || requestParameters.metaCreate === undefined) {
            throw new runtime.RequiredError('metaCreate','Required parameter requestParameters.metaCreate was null or undefined when calling createMeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_name}/entity/{entity_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_name"}}`, encodeURIComponent(String(requestParameters.typeName))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetaCreateToJSON(requestParameters.metaCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateMeta200ResponseFromJSON(jsonValue));
    }

    /**
     * Createmeta
     */
    async createMeta(requestParameters: CreateMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateMeta200Response> {
        const response = await this.createMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Createslug
     */
    async createSlugRaw(requestParameters: CreateSlugRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateSlug200Response>> {
        if (requestParameters.slugger === null || requestParameters.slugger === undefined) {
            throw new runtime.RequiredError('slugger','Required parameter requestParameters.slugger was null or undefined when calling createSlug.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/slug`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SluggerToJSON(requestParameters.slugger),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSlug200ResponseFromJSON(jsonValue));
    }

    /**
     * Createslug
     */
    async createSlug(requestParameters: CreateSlugRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateSlug200Response> {
        const response = await this.createSlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletemeta
     */
    async deleteMetaRaw(requestParameters: DeleteMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteMeta200Response>> {
        if (requestParameters.metaUuid === null || requestParameters.metaUuid === undefined) {
            throw new runtime.RequiredError('metaUuid','Required parameter requestParameters.metaUuid was null or undefined when calling deleteMeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/{meta_uuid}`.replace(`{${"meta_uuid"}}`, encodeURIComponent(String(requestParameters.metaUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteMeta200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletemeta
     */
    async deleteMeta(requestParameters: DeleteMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteMeta200Response> {
        const response = await this.deleteMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletemetafromparts
     */
    async deleteMetaFromPartsRaw(requestParameters: DeleteMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteMeta200Response>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling deleteMetaFromParts.');
        }

        if (requestParameters.typeName === null || requestParameters.typeName === undefined) {
            throw new runtime.RequiredError('typeName','Required parameter requestParameters.typeName was null or undefined when calling deleteMetaFromParts.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling deleteMetaFromParts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_name}/entity/{entity_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_name"}}`, encodeURIComponent(String(requestParameters.typeName))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteMeta200ResponseFromJSON(jsonValue));
    }

    /**
     * Deletemetafromparts
     */
    async deleteMetaFromParts(requestParameters: DeleteMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteMeta200Response> {
        const response = await this.deleteMetaFromPartsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getmeta
     */
    async getMetaRaw(requestParameters: GetMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MetaDynamo>> {
        if (requestParameters.metaUuid === null || requestParameters.metaUuid === undefined) {
            throw new runtime.RequiredError('metaUuid','Required parameter requestParameters.metaUuid was null or undefined when calling getMeta.');
        }

        const queryParameters: any = {};

        if (requestParameters.detailed !== undefined) {
            queryParameters['detailed'] = requestParameters.detailed;
        }

        if (requestParameters.custom !== undefined) {
            queryParameters['custom'] = requestParameters.custom;
        }

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/{meta_uuid}`.replace(`{${"meta_uuid"}}`, encodeURIComponent(String(requestParameters.metaUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaDynamoFromJSON(jsonValue));
    }

    /**
     * Getmeta
     */
    async getMeta(requestParameters: GetMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MetaDynamo> {
        const response = await this.getMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getmetafromparts
     */
    async getMetaFromPartsRaw(requestParameters: GetMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<MetaDynamo>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getMetaFromParts.');
        }

        if (requestParameters.typeName === null || requestParameters.typeName === undefined) {
            throw new runtime.RequiredError('typeName','Required parameter requestParameters.typeName was null or undefined when calling getMetaFromParts.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling getMetaFromParts.');
        }

        const queryParameters: any = {};

        if (requestParameters.detailed !== undefined) {
            queryParameters['detailed'] = requestParameters.detailed;
        }

        if (requestParameters.custom !== undefined) {
            queryParameters['custom'] = requestParameters.custom;
        }

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_name}/entity/{entity_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_name"}}`, encodeURIComponent(String(requestParameters.typeName))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaDynamoFromJSON(jsonValue));
    }

    /**
     * Getmetafromparts
     */
    async getMetaFromParts(requestParameters: GetMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<MetaDynamo> {
        const response = await this.getMetaFromPartsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Touchmeta
     */
    async touchMetaRaw(requestParameters: TouchMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TouchMeta200Response>> {
        if (requestParameters.metaUuid === null || requestParameters.metaUuid === undefined) {
            throw new runtime.RequiredError('metaUuid','Required parameter requestParameters.metaUuid was null or undefined when calling touchMeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/{meta_uuid}/touch`.replace(`{${"meta_uuid"}}`, encodeURIComponent(String(requestParameters.metaUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TouchMeta200ResponseFromJSON(jsonValue));
    }

    /**
     * Touchmeta
     */
    async touchMeta(requestParameters: TouchMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TouchMeta200Response> {
        const response = await this.touchMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updatemeta
     */
    async updateMetaRaw(requestParameters: UpdateMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateMeta200Response>> {
        if (requestParameters.metaUuid === null || requestParameters.metaUuid === undefined) {
            throw new runtime.RequiredError('metaUuid','Required parameter requestParameters.metaUuid was null or undefined when calling updateMeta.');
        }

        if (requestParameters.metaCreate === null || requestParameters.metaCreate === undefined) {
            throw new runtime.RequiredError('metaCreate','Required parameter requestParameters.metaCreate was null or undefined when calling updateMeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/{meta_uuid}`.replace(`{${"meta_uuid"}}`, encodeURIComponent(String(requestParameters.metaUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetaCreateToJSON(requestParameters.metaCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMeta200ResponseFromJSON(jsonValue));
    }

    /**
     * Updatemeta
     */
    async updateMeta(requestParameters: UpdateMetaRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateMeta200Response> {
        const response = await this.updateMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updatemetafromparts
     */
    async updateMetaFromPartsRaw(requestParameters: UpdateMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateMeta200Response>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling updateMetaFromParts.');
        }

        if (requestParameters.typeName === null || requestParameters.typeName === undefined) {
            throw new runtime.RequiredError('typeName','Required parameter requestParameters.typeName was null or undefined when calling updateMetaFromParts.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling updateMetaFromParts.');
        }

        if (requestParameters.metaCreate === null || requestParameters.metaCreate === undefined) {
            throw new runtime.RequiredError('metaCreate','Required parameter requestParameters.metaCreate was null or undefined when calling updateMetaFromParts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_name}/entity/{entity_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_name"}}`, encodeURIComponent(String(requestParameters.typeName))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetaCreateToJSON(requestParameters.metaCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateMeta200ResponseFromJSON(jsonValue));
    }

    /**
     * Updatemetafromparts
     */
    async updateMetaFromParts(requestParameters: UpdateMetaFromPartsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateMeta200Response> {
        const response = await this.updateMetaFromPartsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
