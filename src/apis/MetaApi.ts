/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.103
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.103
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Field,
  FieldDynamo,
  HTTPValidationError,
  MetaCreate,
  MetaDynamo,
  MetaGet,
  MetaSlugger,
} from '../models';
import {
    FieldFromJSON,
    FieldToJSON,
    FieldDynamoFromJSON,
    FieldDynamoToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MetaCreateFromJSON,
    MetaCreateToJSON,
    MetaDynamoFromJSON,
    MetaDynamoToJSON,
    MetaGetFromJSON,
    MetaGetToJSON,
    MetaSluggerFromJSON,
    MetaSluggerToJSON,
} from '../models';

export interface CreateFieldRequest {
    field: Field;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface CreateMetaRequest {
    service: string;
    typeStr: string;
    entityUuid: string;
    metaCreate: MetaCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteFieldRequest {
    fieldUuid: string;
    softDelete?: boolean;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteMetaRequest {
    service: string;
    typeStr: string;
    entityUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface DeleteMetaFromUuidRequest {
    metaUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetFieldRequest {
    fieldUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetMetaRequest {
    service: string;
    typeStr: string;
    entityUuid: string;
    detailed?: boolean;
    custom?: boolean;
    dates?: boolean;
    history?: number;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface GetMetaFromUuidRequest {
    metaUuid: string;
    detailed?: boolean;
    custom?: boolean;
    dates?: boolean;
    history?: number;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface MakeSlugRequest {
    metaSlugger: MetaSlugger;
}

export interface TouchMetaRequest {
    service: string;
    typeStr: string;
    entityUuid: string;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdateFieldRequest {
    fieldUuid: string;
    field: Field;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdateMetaRequest {
    service: string;
    typeStr: string;
    entityUuid: string;
    metaCreate: MetaCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

export interface UpdateMetaFromUuidRequest {
    metaUuid: string;
    metaCreate: MetaCreate;
    xAccessToken?: string;
    xSecretToken?: string;
    authorization?: string;
    ehelplyActiveParticipant?: string;
    ehelplyProject?: string;
    ehelplyData?: string;
}

/**
 * MetaApi - interface
 * 
 * @export
 * @interface MetaApiInterface
 */
export interface MetaApiInterface {
    /**
     * 
     * @summary Create Field
     * @param {Field} field 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    createFieldRaw(requestParameters: CreateFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldDynamo>>;

    /**
     * Create Field
     */
    createField(requestParameters: CreateFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldDynamo>;

    /**
     * 
     * @summary Create Meta
     * @param {string} service 
     * @param {string} typeStr 
     * @param {string} entityUuid 
     * @param {MetaCreate} metaCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    createMetaRaw(requestParameters: CreateMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaDynamo>>;

    /**
     * Create Meta
     */
    createMeta(requestParameters: CreateMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaDynamo>;

    /**
     * 
     * @summary Delete Field
     * @param {string} fieldUuid 
     * @param {boolean} [softDelete] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    deleteFieldRaw(requestParameters: DeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete Field
     */
    deleteField(requestParameters: DeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Delete Meta
     * @param {string} service 
     * @param {string} typeStr 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    deleteMetaRaw(requestParameters: DeleteMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete Meta
     */
    deleteMeta(requestParameters: DeleteMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Delete Meta From Uuid
     * @param {string} metaUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    deleteMetaFromUuidRaw(requestParameters: DeleteMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Delete Meta From Uuid
     */
    deleteMetaFromUuid(requestParameters: DeleteMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Get Field
     * @param {string} fieldUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getFieldRaw(requestParameters: GetFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldDynamo>>;

    /**
     * Get Field
     */
    getField(requestParameters: GetFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldDynamo>;

    /**
     * 
     * @summary Get Meta
     * @param {string} service 
     * @param {string} typeStr 
     * @param {string} entityUuid 
     * @param {boolean} [detailed] 
     * @param {boolean} [custom] 
     * @param {boolean} [dates] 
     * @param {number} [history] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getMetaRaw(requestParameters: GetMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaGet>>;

    /**
     * Get Meta
     */
    getMeta(requestParameters: GetMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaGet>;

    /**
     * 
     * @summary Get Meta From Uuid
     * @param {string} metaUuid 
     * @param {boolean} [detailed] 
     * @param {boolean} [custom] 
     * @param {boolean} [dates] 
     * @param {number} [history] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getMetaFromUuidRaw(requestParameters: GetMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaGet>>;

    /**
     * Get Meta From Uuid
     */
    getMetaFromUuid(requestParameters: GetMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaGet>;

    /**
     * 
     * @summary Make Slug
     * @param {MetaSlugger} metaSlugger 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    makeSlugRaw(requestParameters: MakeSlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Make Slug
     */
    makeSlug(requestParameters: MakeSlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Touch Meta
     * @param {string} service 
     * @param {string} typeStr 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    touchMetaRaw(requestParameters: TouchMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaDynamo>>;

    /**
     * Touch Meta
     */
    touchMeta(requestParameters: TouchMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaDynamo>;

    /**
     * 
     * @summary Update Field
     * @param {string} fieldUuid 
     * @param {Field} field 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    updateFieldRaw(requestParameters: UpdateFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;

    /**
     * Update Field
     */
    updateField(requestParameters: UpdateFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;

    /**
     * 
     * @summary Update Meta
     * @param {string} service 
     * @param {string} typeStr 
     * @param {string} entityUuid 
     * @param {MetaCreate} metaCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    updateMetaRaw(requestParameters: UpdateMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaDynamo>>;

    /**
     * Update Meta
     */
    updateMeta(requestParameters: UpdateMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaDynamo>;

    /**
     * 
     * @summary Update Meta From Uuid
     * @param {string} metaUuid 
     * @param {MetaCreate} metaCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    updateMetaFromUuidRaw(requestParameters: UpdateMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaDynamo>>;

    /**
     * Update Meta From Uuid
     */
    updateMetaFromUuid(requestParameters: UpdateMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaDynamo>;

}

/**
 * 
 */
export class MetaApi extends runtime.BaseAPI implements MetaApiInterface {

    /**
     * Create Field
     */
    async createFieldRaw(requestParameters: CreateFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldDynamo>> {
        if (requestParameters.field === null || requestParameters.field === undefined) {
            throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling createField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/field`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FieldToJSON(requestParameters.field),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldDynamoFromJSON(jsonValue));
    }

    /**
     * Create Field
     */
    async createField(requestParameters: CreateFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldDynamo> {
        const response = await this.createFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Meta
     */
    async createMetaRaw(requestParameters: CreateMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaDynamo>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling createMeta.');
        }

        if (requestParameters.typeStr === null || requestParameters.typeStr === undefined) {
            throw new runtime.RequiredError('typeStr','Required parameter requestParameters.typeStr was null or undefined when calling createMeta.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling createMeta.');
        }

        if (requestParameters.metaCreate === null || requestParameters.metaCreate === undefined) {
            throw new runtime.RequiredError('metaCreate','Required parameter requestParameters.metaCreate was null or undefined when calling createMeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_str"}}`, encodeURIComponent(String(requestParameters.typeStr))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetaCreateToJSON(requestParameters.metaCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaDynamoFromJSON(jsonValue));
    }

    /**
     * Create Meta
     */
    async createMeta(requestParameters: CreateMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaDynamo> {
        const response = await this.createMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Field
     */
    async deleteFieldRaw(requestParameters: DeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.fieldUuid === null || requestParameters.fieldUuid === undefined) {
            throw new runtime.RequiredError('fieldUuid','Required parameter requestParameters.fieldUuid was null or undefined when calling deleteField.');
        }

        const queryParameters: any = {};

        if (requestParameters.softDelete !== undefined) {
            queryParameters['soft_delete'] = requestParameters.softDelete;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/field/{field_uuid}`.replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters.fieldUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete Field
     */
    async deleteField(requestParameters: DeleteFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Meta
     */
    async deleteMetaRaw(requestParameters: DeleteMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling deleteMeta.');
        }

        if (requestParameters.typeStr === null || requestParameters.typeStr === undefined) {
            throw new runtime.RequiredError('typeStr','Required parameter requestParameters.typeStr was null or undefined when calling deleteMeta.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling deleteMeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_str"}}`, encodeURIComponent(String(requestParameters.typeStr))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete Meta
     */
    async deleteMeta(requestParameters: DeleteMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Meta From Uuid
     */
    async deleteMetaFromUuidRaw(requestParameters: DeleteMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.metaUuid === null || requestParameters.metaUuid === undefined) {
            throw new runtime.RequiredError('metaUuid','Required parameter requestParameters.metaUuid was null or undefined when calling deleteMetaFromUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/{meta_uuid}`.replace(`{${"meta_uuid"}}`, encodeURIComponent(String(requestParameters.metaUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete Meta From Uuid
     */
    async deleteMetaFromUuid(requestParameters: DeleteMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteMetaFromUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Field
     */
    async getFieldRaw(requestParameters: GetFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FieldDynamo>> {
        if (requestParameters.fieldUuid === null || requestParameters.fieldUuid === undefined) {
            throw new runtime.RequiredError('fieldUuid','Required parameter requestParameters.fieldUuid was null or undefined when calling getField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/field/{field_uuid}`.replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters.fieldUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldDynamoFromJSON(jsonValue));
    }

    /**
     * Get Field
     */
    async getField(requestParameters: GetFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FieldDynamo> {
        const response = await this.getFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Meta
     */
    async getMetaRaw(requestParameters: GetMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaGet>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getMeta.');
        }

        if (requestParameters.typeStr === null || requestParameters.typeStr === undefined) {
            throw new runtime.RequiredError('typeStr','Required parameter requestParameters.typeStr was null or undefined when calling getMeta.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling getMeta.');
        }

        const queryParameters: any = {};

        if (requestParameters.detailed !== undefined) {
            queryParameters['detailed'] = requestParameters.detailed;
        }

        if (requestParameters.custom !== undefined) {
            queryParameters['custom'] = requestParameters.custom;
        }

        if (requestParameters.dates !== undefined) {
            queryParameters['dates'] = requestParameters.dates;
        }

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_str"}}`, encodeURIComponent(String(requestParameters.typeStr))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaGetFromJSON(jsonValue));
    }

    /**
     * Get Meta
     */
    async getMeta(requestParameters: GetMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaGet> {
        const response = await this.getMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Meta From Uuid
     */
    async getMetaFromUuidRaw(requestParameters: GetMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaGet>> {
        if (requestParameters.metaUuid === null || requestParameters.metaUuid === undefined) {
            throw new runtime.RequiredError('metaUuid','Required parameter requestParameters.metaUuid was null or undefined when calling getMetaFromUuid.');
        }

        const queryParameters: any = {};

        if (requestParameters.detailed !== undefined) {
            queryParameters['detailed'] = requestParameters.detailed;
        }

        if (requestParameters.custom !== undefined) {
            queryParameters['custom'] = requestParameters.custom;
        }

        if (requestParameters.dates !== undefined) {
            queryParameters['dates'] = requestParameters.dates;
        }

        if (requestParameters.history !== undefined) {
            queryParameters['history'] = requestParameters.history;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/{meta_uuid}`.replace(`{${"meta_uuid"}}`, encodeURIComponent(String(requestParameters.metaUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaGetFromJSON(jsonValue));
    }

    /**
     * Get Meta From Uuid
     */
    async getMetaFromUuid(requestParameters: GetMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaGet> {
        const response = await this.getMetaFromUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Make Slug
     */
    async makeSlugRaw(requestParameters: MakeSlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.metaSlugger === null || requestParameters.metaSlugger === undefined) {
            throw new runtime.RequiredError('metaSlugger','Required parameter requestParameters.metaSlugger was null or undefined when calling makeSlug.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/meta/meta/slug`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetaSluggerToJSON(requestParameters.metaSlugger),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Make Slug
     */
    async makeSlug(requestParameters: MakeSlugRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.makeSlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Touch Meta
     */
    async touchMetaRaw(requestParameters: TouchMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaDynamo>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling touchMeta.');
        }

        if (requestParameters.typeStr === null || requestParameters.typeStr === undefined) {
            throw new runtime.RequiredError('typeStr','Required parameter requestParameters.typeStr was null or undefined when calling touchMeta.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling touchMeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}/touch`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_str"}}`, encodeURIComponent(String(requestParameters.typeStr))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaDynamoFromJSON(jsonValue));
    }

    /**
     * Touch Meta
     */
    async touchMeta(requestParameters: TouchMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaDynamo> {
        const response = await this.touchMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Field
     */
    async updateFieldRaw(requestParameters: UpdateFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.fieldUuid === null || requestParameters.fieldUuid === undefined) {
            throw new runtime.RequiredError('fieldUuid','Required parameter requestParameters.fieldUuid was null or undefined when calling updateField.');
        }

        if (requestParameters.field === null || requestParameters.field === undefined) {
            throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling updateField.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/field/{field_uuid}`.replace(`{${"field_uuid"}}`, encodeURIComponent(String(requestParameters.fieldUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FieldToJSON(requestParameters.field),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update Field
     */
    async updateField(requestParameters: UpdateFieldRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateFieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Meta
     */
    async updateMetaRaw(requestParameters: UpdateMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaDynamo>> {
        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling updateMeta.');
        }

        if (requestParameters.typeStr === null || requestParameters.typeStr === undefined) {
            throw new runtime.RequiredError('typeStr','Required parameter requestParameters.typeStr was null or undefined when calling updateMeta.');
        }

        if (requestParameters.entityUuid === null || requestParameters.entityUuid === undefined) {
            throw new runtime.RequiredError('entityUuid','Required parameter requestParameters.entityUuid was null or undefined when calling updateMeta.');
        }

        if (requestParameters.metaCreate === null || requestParameters.metaCreate === undefined) {
            throw new runtime.RequiredError('metaCreate','Required parameter requestParameters.metaCreate was null or undefined when calling updateMeta.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}`.replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))).replace(`{${"type_str"}}`, encodeURIComponent(String(requestParameters.typeStr))).replace(`{${"entity_uuid"}}`, encodeURIComponent(String(requestParameters.entityUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetaCreateToJSON(requestParameters.metaCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaDynamoFromJSON(jsonValue));
    }

    /**
     * Update Meta
     */
    async updateMeta(requestParameters: UpdateMetaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaDynamo> {
        const response = await this.updateMetaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Meta From Uuid
     */
    async updateMetaFromUuidRaw(requestParameters: UpdateMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MetaDynamo>> {
        if (requestParameters.metaUuid === null || requestParameters.metaUuid === undefined) {
            throw new runtime.RequiredError('metaUuid','Required parameter requestParameters.metaUuid was null or undefined when calling updateMetaFromUuid.');
        }

        if (requestParameters.metaCreate === null || requestParameters.metaCreate === undefined) {
            throw new runtime.RequiredError('metaCreate','Required parameter requestParameters.metaCreate was null or undefined when calling updateMetaFromUuid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xAccessToken !== undefined && requestParameters.xAccessToken !== null) {
            headerParameters['x-access-token'] = String(requestParameters.xAccessToken);
        }

        if (requestParameters.xSecretToken !== undefined && requestParameters.xSecretToken !== null) {
            headerParameters['x-secret-token'] = String(requestParameters.xSecretToken);
        }

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.ehelplyActiveParticipant !== undefined && requestParameters.ehelplyActiveParticipant !== null) {
            headerParameters['ehelply-active-participant'] = String(requestParameters.ehelplyActiveParticipant);
        }

        if (requestParameters.ehelplyProject !== undefined && requestParameters.ehelplyProject !== null) {
            headerParameters['ehelply-project'] = String(requestParameters.ehelplyProject);
        }

        if (requestParameters.ehelplyData !== undefined && requestParameters.ehelplyData !== null) {
            headerParameters['ehelply-data'] = String(requestParameters.ehelplyData);
        }

        const response = await this.request({
            path: `/meta/meta/{meta_uuid}`.replace(`{${"meta_uuid"}}`, encodeURIComponent(String(requestParameters.metaUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetaCreateToJSON(requestParameters.metaCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaDynamoFromJSON(jsonValue));
    }

    /**
     * Update Meta From Uuid
     */
    async updateMetaFromUuid(requestParameters: UpdateMetaFromUuidRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MetaDynamo> {
        const response = await this.updateMetaFromUuidRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
