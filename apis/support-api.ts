/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK
 * eHelply SDK
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost } from '../models';
// @ts-ignore
import { BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut } from '../models';
// @ts-ignore
import { ContactResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { TicketResponse } from '../models';
// @ts-ignore
import { TicketsResponse } from '../models';
/**
 * SupportApi - axios parameter creator
 * @export
 */
export const SupportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Contact
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactSupportContactPost: async (xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/support/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost} bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost: async (projectUuid: string, memberUuid: string, bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost: BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost', 'projectUuid', projectUuid)
            // verify required parameter 'memberUuid' is not null or undefined
            assertParamExists('createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost', 'memberUuid', memberUuid)
            // verify required parameter 'bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost' is not null or undefined
            assertParamExists('createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost', 'bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost', bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost)
            const localVarPath = `/sam/support/projects/{project_uuid}/members/{member_uuid}/tickets`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)))
                .replace(`{${"member_uuid"}}`, encodeURIComponent(String(memberUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Contact
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactSupportContactDelete: async (xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/support/contact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Tickets
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet: async (projectUuid: string, memberUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet', 'projectUuid', projectUuid)
            // verify required parameter 'memberUuid' is not null or undefined
            assertParamExists('listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet', 'memberUuid', memberUuid)
            const localVarPath = `/sam/support/projects/{project_uuid}/members/{member_uuid}/tickets`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)))
                .replace(`{${"member_uuid"}}`, encodeURIComponent(String(memberUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} ticketId 
         * @param {BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut} bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut: async (projectUuid: string, memberUuid: string, ticketId: string, bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut: BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut', 'projectUuid', projectUuid)
            // verify required parameter 'memberUuid' is not null or undefined
            assertParamExists('updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut', 'memberUuid', memberUuid)
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut', 'ticketId', ticketId)
            // verify required parameter 'bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut' is not null or undefined
            assertParamExists('updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut', 'bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut', bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut)
            const localVarPath = `/sam/support/projects/{project_uuid}/members/{member_uuid}/tickets/{ticket_id}`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)))
                .replace(`{${"member_uuid"}}`, encodeURIComponent(String(memberUuid)))
                .replace(`{${"ticket_id"}}`, encodeURIComponent(String(ticketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary View Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} ticketId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet: async (projectUuid: string, memberUuid: string, ticketId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet', 'projectUuid', projectUuid)
            // verify required parameter 'memberUuid' is not null or undefined
            assertParamExists('viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet', 'memberUuid', memberUuid)
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet', 'ticketId', ticketId)
            const localVarPath = `/sam/support/projects/{project_uuid}/members/{member_uuid}/tickets/{ticket_id}`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)))
                .replace(`{${"member_uuid"}}`, encodeURIComponent(String(memberUuid)))
                .replace(`{${"ticket_id"}}`, encodeURIComponent(String(ticketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupportApi - functional programming interface
 * @export
 */
export const SupportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SupportApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Contact
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContactSupportContactPost(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContactSupportContactPost(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost} bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost(projectUuid: string, memberUuid: string, bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost: BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost(projectUuid, memberUuid, bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Contact
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContactSupportContactDelete(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContactSupportContactDelete(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Tickets
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet(projectUuid: string, memberUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet(projectUuid, memberUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} ticketId 
         * @param {BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut} bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut(projectUuid: string, memberUuid: string, ticketId: string, bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut: BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut(projectUuid, memberUuid, ticketId, bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary View Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} ticketId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet(projectUuid: string, memberUuid: string, ticketId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet(projectUuid, memberUuid, ticketId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SupportApi - factory interface
 * @export
 */
export const SupportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SupportApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Contact
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContactSupportContactPost(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<ContactResponse> {
            return localVarFp.createContactSupportContactPost(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost} bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost(projectUuid: string, memberUuid: string, bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost: BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<TicketResponse> {
            return localVarFp.createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost(projectUuid, memberUuid, bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Contact
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContactSupportContactDelete(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteContactSupportContactDelete(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Tickets
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet(projectUuid: string, memberUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<Array<TicketsResponse>> {
            return localVarFp.listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet(projectUuid, memberUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} ticketId 
         * @param {BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut} bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut(projectUuid: string, memberUuid: string, ticketId: string, bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut: BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<TicketResponse> {
            return localVarFp.updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut(projectUuid, memberUuid, ticketId, bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary View Ticket
         * @param {string} projectUuid 
         * @param {string} memberUuid 
         * @param {string} ticketId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet(projectUuid: string, memberUuid: string, ticketId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<TicketResponse> {
            return localVarFp.viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet(projectUuid, memberUuid, ticketId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SupportApi - interface
 * @export
 * @interface SupportApi
 */
export interface SupportApiInterface {
    /**
     * 
     * @summary Create Contact
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApiInterface
     */
    createContactSupportContactPost(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<ContactResponse>;

    /**
     * 
     * @summary Create Ticket
     * @param {string} projectUuid 
     * @param {string} memberUuid 
     * @param {BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost} bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApiInterface
     */
    createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost(projectUuid: string, memberUuid: string, bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost: BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<TicketResponse>;

    /**
     * 
     * @summary Delete Contact
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApiInterface
     */
    deleteContactSupportContactDelete(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary List Tickets
     * @param {string} projectUuid 
     * @param {string} memberUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApiInterface
     */
    listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet(projectUuid: string, memberUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<Array<TicketsResponse>>;

    /**
     * 
     * @summary Update Ticket
     * @param {string} projectUuid 
     * @param {string} memberUuid 
     * @param {string} ticketId 
     * @param {BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut} bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApiInterface
     */
    updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut(projectUuid: string, memberUuid: string, ticketId: string, bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut: BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<TicketResponse>;

    /**
     * 
     * @summary View Ticket
     * @param {string} projectUuid 
     * @param {string} memberUuid 
     * @param {string} ticketId 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApiInterface
     */
    viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet(projectUuid: string, memberUuid: string, ticketId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<TicketResponse>;

}

/**
 * SupportApi - object-oriented interface
 * @export
 * @class SupportApi
 * @extends {BaseAPI}
 */
export class SupportApi extends BaseAPI implements SupportApiInterface {
    /**
     * 
     * @summary Create Contact
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApi
     */
    public createContactSupportContactPost(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return SupportApiFp(this.configuration).createContactSupportContactPost(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Ticket
     * @param {string} projectUuid 
     * @param {string} memberUuid 
     * @param {BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost} bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApi
     */
    public createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost(projectUuid: string, memberUuid: string, bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost: BodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return SupportApiFp(this.configuration).createTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost(projectUuid, memberUuid, bodyCreateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Contact
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApi
     */
    public deleteContactSupportContactDelete(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return SupportApiFp(this.configuration).deleteContactSupportContactDelete(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Tickets
     * @param {string} projectUuid 
     * @param {string} memberUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApi
     */
    public listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet(projectUuid: string, memberUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return SupportApiFp(this.configuration).listTicketsSupportProjectsProjectUuidMembersMemberUuidTicketsGet(projectUuid, memberUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Ticket
     * @param {string} projectUuid 
     * @param {string} memberUuid 
     * @param {string} ticketId 
     * @param {BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut} bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApi
     */
    public updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut(projectUuid: string, memberUuid: string, ticketId: string, bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut: BodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return SupportApiFp(this.configuration).updateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut(projectUuid, memberUuid, ticketId, bodyUpdateTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary View Ticket
     * @param {string} projectUuid 
     * @param {string} memberUuid 
     * @param {string} ticketId 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportApi
     */
    public viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet(projectUuid: string, memberUuid: string, ticketId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return SupportApiFp(this.configuration).viewTicketSupportProjectsProjectUuidMembersMemberUuidTicketsTicketIdGet(projectUuid, memberUuid, ticketId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }
}
