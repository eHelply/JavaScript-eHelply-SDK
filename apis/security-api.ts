/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK
 * eHelply SDK
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyCreateKeySecurityKeysPost } from '../models';
// @ts-ignore
import { BodyGenerateTokenSecurityTokensPost } from '../models';
// @ts-ignore
import { BodyVerifyKeySecurityKeysVerifyPost } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { SecurityEncryptionKeyGet } from '../models';
// @ts-ignore
import { SecurityKeyGet } from '../models';
/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Encryption Key
         * @param {string} category 
         * @param {string} [ehelplySecuritySecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost: async (category: string, ehelplySecuritySecretKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost', 'category', category)
            const localVarPath = `/sam/security/encryption/categories/{category}/keys`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ehelplySecuritySecretKey !== undefined && ehelplySecuritySecretKey !== null) {
                localVarHeaderParameter['ehelply-security-secret-key'] = String(ehelplySecuritySecretKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Key
         * @param {BodyCreateKeySecurityKeysPost} bodyCreateKeySecurityKeysPost 
         * @param {number} [accessLength] 
         * @param {number} [secretLength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeySecurityKeysPost: async (bodyCreateKeySecurityKeysPost: BodyCreateKeySecurityKeysPost, accessLength?: number, secretLength?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyCreateKeySecurityKeysPost' is not null or undefined
            assertParamExists('createKeySecurityKeysPost', 'bodyCreateKeySecurityKeysPost', bodyCreateKeySecurityKeysPost)
            const localVarPath = `/sam/security/keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessLength !== undefined) {
                localVarQueryParameter['access_length'] = accessLength;
            }

            if (secretLength !== undefined) {
                localVarQueryParameter['secret_length'] = secretLength;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyCreateKeySecurityKeysPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Key
         * @param {string} keyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeySecurityKeysKeyUuidDelete: async (keyUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyUuid' is not null or undefined
            assertParamExists('deleteKeySecurityKeysKeyUuidDelete', 'keyUuid', keyUuid)
            const localVarPath = `/sam/security/keys/{key_uuid}`
                .replace(`{${"key_uuid"}}`, encodeURIComponent(String(keyUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Token
         * @param {BodyGenerateTokenSecurityTokensPost} bodyGenerateTokenSecurityTokensPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTokenSecurityTokensPost: async (bodyGenerateTokenSecurityTokensPost: BodyGenerateTokenSecurityTokensPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyGenerateTokenSecurityTokensPost' is not null or undefined
            assertParamExists('generateTokenSecurityTokensPost', 'bodyGenerateTokenSecurityTokensPost', bodyGenerateTokenSecurityTokensPost)
            const localVarPath = `/sam/security/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyGenerateTokenSecurityTokensPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Encryption Key
         * @param {string} category 
         * @param {string} [ehelplySecuritySecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet: async (category: string, ehelplySecuritySecretKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            assertParamExists('getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet', 'category', category)
            const localVarPath = `/sam/security/encryption/categories/{category}/keys`
                .replace(`{${"category"}}`, encodeURIComponent(String(category)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ehelplySecuritySecretKey !== undefined && ehelplySecuritySecretKey !== null) {
                localVarHeaderParameter['ehelply-security-secret-key'] = String(ehelplySecuritySecretKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Key
         * @param {string} keyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeySecurityKeysKeyUuidGet: async (keyUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyUuid' is not null or undefined
            assertParamExists('getKeySecurityKeysKeyUuidGet', 'keyUuid', keyUuid)
            const localVarPath = `/sam/security/keys/{key_uuid}`
                .replace(`{${"key_uuid"}}`, encodeURIComponent(String(keyUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchKeysSecurityKeysGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/security/keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Verify Key
         * @param {BodyVerifyKeySecurityKeysVerifyPost} bodyVerifyKeySecurityKeysVerifyPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyKeySecurityKeysVerifyPost: async (bodyVerifyKeySecurityKeysVerifyPost: BodyVerifyKeySecurityKeysVerifyPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyVerifyKeySecurityKeysVerifyPost' is not null or undefined
            assertParamExists('verifyKeySecurityKeysVerifyPost', 'bodyVerifyKeySecurityKeysVerifyPost', bodyVerifyKeySecurityKeysVerifyPost)
            const localVarPath = `/sam/security/keys/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyVerifyKeySecurityKeysVerifyPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Encryption Key
         * @param {string} category 
         * @param {string} [ehelplySecuritySecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(category: string, ehelplySecuritySecretKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(category, ehelplySecuritySecretKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Key
         * @param {BodyCreateKeySecurityKeysPost} bodyCreateKeySecurityKeysPost 
         * @param {number} [accessLength] 
         * @param {number} [secretLength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createKeySecurityKeysPost(bodyCreateKeySecurityKeysPost: BodyCreateKeySecurityKeysPost, accessLength?: number, secretLength?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createKeySecurityKeysPost(bodyCreateKeySecurityKeysPost, accessLength, secretLength, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Key
         * @param {string} keyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteKeySecurityKeysKeyUuidDelete(keyUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKeySecurityKeysKeyUuidDelete(keyUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate Token
         * @param {BodyGenerateTokenSecurityTokensPost} bodyGenerateTokenSecurityTokensPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTokenSecurityTokensPost(bodyGenerateTokenSecurityTokensPost: BodyGenerateTokenSecurityTokensPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateTokenSecurityTokensPost(bodyGenerateTokenSecurityTokensPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Encryption Key
         * @param {string} category 
         * @param {string} [ehelplySecuritySecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(category: string, ehelplySecuritySecretKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecurityEncryptionKeyGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(category, ehelplySecuritySecretKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Key
         * @param {string} keyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKeySecurityKeysKeyUuidGet(keyUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityKeyGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKeySecurityKeysKeyUuidGet(keyUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchKeysSecurityKeysGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecurityKeyGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchKeysSecurityKeysGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Verify Key
         * @param {BodyVerifyKeySecurityKeysVerifyPost} bodyVerifyKeySecurityKeysVerifyPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyKeySecurityKeysVerifyPost(bodyVerifyKeySecurityKeysVerifyPost: BodyVerifyKeySecurityKeysVerifyPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityKeyGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyKeySecurityKeysVerifyPost(bodyVerifyKeySecurityKeysVerifyPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Encryption Key
         * @param {string} category 
         * @param {string} [ehelplySecuritySecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(category: string, ehelplySecuritySecretKey?: string, options?: any): AxiosPromise<any> {
            return localVarFp.createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(category, ehelplySecuritySecretKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Key
         * @param {BodyCreateKeySecurityKeysPost} bodyCreateKeySecurityKeysPost 
         * @param {number} [accessLength] 
         * @param {number} [secretLength] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createKeySecurityKeysPost(bodyCreateKeySecurityKeysPost: BodyCreateKeySecurityKeysPost, accessLength?: number, secretLength?: number, options?: any): AxiosPromise<any> {
            return localVarFp.createKeySecurityKeysPost(bodyCreateKeySecurityKeysPost, accessLength, secretLength, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Key
         * @param {string} keyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteKeySecurityKeysKeyUuidDelete(keyUuid: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteKeySecurityKeysKeyUuidDelete(keyUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Token
         * @param {BodyGenerateTokenSecurityTokensPost} bodyGenerateTokenSecurityTokensPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTokenSecurityTokensPost(bodyGenerateTokenSecurityTokensPost: BodyGenerateTokenSecurityTokensPost, options?: any): AxiosPromise<any> {
            return localVarFp.generateTokenSecurityTokensPost(bodyGenerateTokenSecurityTokensPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Encryption Key
         * @param {string} category 
         * @param {string} [ehelplySecuritySecretKey] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(category: string, ehelplySecuritySecretKey?: string, options?: any): AxiosPromise<Array<SecurityEncryptionKeyGet>> {
            return localVarFp.getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(category, ehelplySecuritySecretKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Key
         * @param {string} keyUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeySecurityKeysKeyUuidGet(keyUuid: string, options?: any): AxiosPromise<SecurityKeyGet> {
            return localVarFp.getKeySecurityKeysKeyUuidGet(keyUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchKeysSecurityKeysGet(options?: any): AxiosPromise<Array<SecurityKeyGet>> {
            return localVarFp.searchKeysSecurityKeysGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Verify Key
         * @param {BodyVerifyKeySecurityKeysVerifyPost} bodyVerifyKeySecurityKeysVerifyPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyKeySecurityKeysVerifyPost(bodyVerifyKeySecurityKeysVerifyPost: BodyVerifyKeySecurityKeysVerifyPost, options?: any): AxiosPromise<SecurityKeyGet> {
            return localVarFp.verifyKeySecurityKeysVerifyPost(bodyVerifyKeySecurityKeysVerifyPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityApi - interface
 * @export
 * @interface SecurityApi
 */
export interface SecurityApiInterface {
    /**
     * 
     * @summary Create Encryption Key
     * @param {string} category 
     * @param {string} [ehelplySecuritySecretKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(category: string, ehelplySecuritySecretKey?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Create Key
     * @param {BodyCreateKeySecurityKeysPost} bodyCreateKeySecurityKeysPost 
     * @param {number} [accessLength] 
     * @param {number} [secretLength] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    createKeySecurityKeysPost(bodyCreateKeySecurityKeysPost: BodyCreateKeySecurityKeysPost, accessLength?: number, secretLength?: number, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Delete Key
     * @param {string} keyUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    deleteKeySecurityKeysKeyUuidDelete(keyUuid: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Generate Token
     * @param {BodyGenerateTokenSecurityTokensPost} bodyGenerateTokenSecurityTokensPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    generateTokenSecurityTokensPost(bodyGenerateTokenSecurityTokensPost: BodyGenerateTokenSecurityTokensPost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Encryption Key
     * @param {string} category 
     * @param {string} [ehelplySecuritySecretKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(category: string, ehelplySecuritySecretKey?: string, options?: AxiosRequestConfig): AxiosPromise<Array<SecurityEncryptionKeyGet>>;

    /**
     * 
     * @summary Get Key
     * @param {string} keyUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    getKeySecurityKeysKeyUuidGet(keyUuid: string, options?: AxiosRequestConfig): AxiosPromise<SecurityKeyGet>;

    /**
     * 
     * @summary Search Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    searchKeysSecurityKeysGet(options?: AxiosRequestConfig): AxiosPromise<Array<SecurityKeyGet>>;

    /**
     * 
     * @summary Verify Key
     * @param {BodyVerifyKeySecurityKeysVerifyPost} bodyVerifyKeySecurityKeysVerifyPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApiInterface
     */
    verifyKeySecurityKeysVerifyPost(bodyVerifyKeySecurityKeysVerifyPost: BodyVerifyKeySecurityKeysVerifyPost, options?: AxiosRequestConfig): AxiosPromise<SecurityKeyGet>;

}

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI implements SecurityApiInterface {
    /**
     * 
     * @summary Create Encryption Key
     * @param {string} category 
     * @param {string} [ehelplySecuritySecretKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(category: string, ehelplySecuritySecretKey?: string, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).createEncryptionKeySecurityEncryptionCategoriesCategoryKeysPost(category, ehelplySecuritySecretKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Key
     * @param {BodyCreateKeySecurityKeysPost} bodyCreateKeySecurityKeysPost 
     * @param {number} [accessLength] 
     * @param {number} [secretLength] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public createKeySecurityKeysPost(bodyCreateKeySecurityKeysPost: BodyCreateKeySecurityKeysPost, accessLength?: number, secretLength?: number, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).createKeySecurityKeysPost(bodyCreateKeySecurityKeysPost, accessLength, secretLength, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Key
     * @param {string} keyUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public deleteKeySecurityKeysKeyUuidDelete(keyUuid: string, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).deleteKeySecurityKeysKeyUuidDelete(keyUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Token
     * @param {BodyGenerateTokenSecurityTokensPost} bodyGenerateTokenSecurityTokensPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public generateTokenSecurityTokensPost(bodyGenerateTokenSecurityTokensPost: BodyGenerateTokenSecurityTokensPost, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).generateTokenSecurityTokensPost(bodyGenerateTokenSecurityTokensPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Encryption Key
     * @param {string} category 
     * @param {string} [ehelplySecuritySecretKey] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(category: string, ehelplySecuritySecretKey?: string, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).getEncryptionKeySecurityEncryptionCategoriesCategoryKeysGet(category, ehelplySecuritySecretKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Key
     * @param {string} keyUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public getKeySecurityKeysKeyUuidGet(keyUuid: string, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).getKeySecurityKeysKeyUuidGet(keyUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public searchKeysSecurityKeysGet(options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).searchKeysSecurityKeysGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Verify Key
     * @param {BodyVerifyKeySecurityKeysVerifyPost} bodyVerifyKeySecurityKeysVerifyPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    public verifyKeySecurityKeysVerifyPost(bodyVerifyKeySecurityKeysVerifyPost: BodyVerifyKeySecurityKeysVerifyPost, options?: AxiosRequestConfig) {
        return SecurityApiFp(this.configuration).verifyKeySecurityKeysVerifyPost(bodyVerifyKeySecurityKeysVerifyPost, options).then((request) => request(this.axios, this.basePath));
    }
}
