/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.72
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.72
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { Page } from '../models';
// @ts-ignore
import { ParticipantCreate } from '../models';
// @ts-ignore
import { ParticipantUpdate } from '../models';
// @ts-ignore
import { ParticipantUserReturn } from '../models';
// @ts-ignore
import { User } from '../models';
// @ts-ignore
import { UserConfirmation } from '../models';
// @ts-ignore
import { UserLogin } from '../models';
// @ts-ignore
import { UserLoginReturn } from '../models';
// @ts-ignore
import { UserPasswordReset } from '../models';
// @ts-ignore
import { UserPasswordResetConfirmation } from '../models';
// @ts-ignore
import { UserResponse } from '../models';
// @ts-ignore
import { UserSignup } from '../models';
// @ts-ignore
import { UserSignupReturn } from '../models';
// @ts-ignore
import { UserTokenReturn } from '../models';
// @ts-ignore
import { UserValidations } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validates a user signup with a given confirmation
         * @summary Confirmsignup
         * @param {UserConfirmation} userConfirmation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmSignup: async (userConfirmation: UserConfirmation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userConfirmation' is not null or undefined
            assertParamExists('confirmSignup', 'userConfirmation', userConfirmation)
            const localVarPath = `/sam/users/auth/signup/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userConfirmation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a participant given the participant info (meta and user_id)
         * @summary Createparticipant
         * @param {ParticipantCreate} participantCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParticipant: async (participantCreate: ParticipantCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantCreate' is not null or undefined
            assertParamExists('createParticipant', 'participantCreate', participantCreate)
            const localVarPath = `/sam/users/participants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(participantCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Usually ran after login and will do the following: - If no user exists (AKA signed in with social media) it will create a new user and default participant - If a user exists, sync Cognito data from Cognito to the user - Determine missing fields that SHOULD be filled
         * @summary Createuser
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (authorization?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete participants related to the given participant_id, returns True if successful
         * @summary Deleteparticipant
         * @param {string} participantId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParticipant: async (participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('deleteParticipant', 'participantId', participantId)
            const localVarPath = `/sam/users/participants/{participant_id}`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Soft deletes the user with the provided user id, granted the deleter is the same person or an admin. Returns True if successful
         * @summary Deleteuser
         * @param {string} userId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (userId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUser', 'userId', userId)
            const localVarPath = `/sam/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a participant given their participant ID
         * @summary Getparticipant
         * @param {string} participantId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipant: async (participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('getParticipant', 'participantId', participantId)
            const localVarPath = `/sam/users/participants/{participant_id}`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the user object given user id (uuid) or cognito id (cognito)
         * @summary Getuser
         * @param {string} userId 
         * @param {string} [idType] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (userId: string, idType?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUser', 'userId', userId)
            const localVarPath = `/sam/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idType !== undefined) {
                localVarQueryParameter['id_type'] = idType;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login endpoint, returns tokens. EMAIL NEEDS TO BE VERIFIED (can be done through the email the user received).
         * @summary Login
         * @param {UserLogin} userLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userLogin: UserLogin, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userLogin' is not null or undefined
            assertParamExists('login', 'userLogin', userLogin)
            const localVarPath = `/sam/users/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userLogin, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refreshes tokens given a refresh token.
         * @summary Refreshtoken
         * @param {string} appClient 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (appClient: string, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appClient' is not null or undefined
            assertParamExists('refreshToken', 'appClient', appClient)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('refreshToken', 'body', body)
            const localVarPath = `/sam/users/auth/{app_client}/refresh-token`
                .replace(`{${"app_client"}}`, encodeURIComponent(String(appClient)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends the user an email with a confirmation code so they can reset their password
         * @summary Resetpassword
         * @param {UserPasswordReset} userPasswordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (userPasswordReset: UserPasswordReset, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userPasswordReset' is not null or undefined
            assertParamExists('resetPassword', 'userPasswordReset', userPasswordReset)
            const localVarPath = `/sam/users/auth/password/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userPasswordReset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resets the given user\'s password to the given password when the proper code is provided
         * @summary Reset Password Confirmation
         * @param {UserPasswordResetConfirmation} userPasswordResetConfirmation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordConfirmationUsersAuthPasswordResetConfirmPost: async (userPasswordResetConfirmation: UserPasswordResetConfirmation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userPasswordResetConfirmation' is not null or undefined
            assertParamExists('resetPasswordConfirmationUsersAuthPasswordResetConfirmPost', 'userPasswordResetConfirmation', userPasswordResetConfirmation)
            const localVarPath = `/sam/users/auth/password/reset/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userPasswordResetConfirmation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search participants using a user uuid, returns pagination information and list of `items` (ParticipantUserReturn from GET Participant). Can search on \"user_uuid\", and sort on any field. To search enter search value into \"search\" query param and the field into \"search on\" (currently only \"user\"uuid\"). For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: date_created). Max pagination items per page is 50.
         * @summary Searchparticipants
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchParticipants: async (page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/users/participants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (searchOn !== undefined) {
                localVarQueryParameter['search_on'] = searchOn;
            }

            if (sortOn !== undefined) {
                localVarQueryParameter['sort_on'] = sortOn;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sort_desc'] = sortDesc;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signup to eHelply, creates a user and default participant behind the scenes. Does not verify email.
         * @summary Signup
         * @param {UserSignup} userSignup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup: async (userSignup: UserSignup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userSignup' is not null or undefined
            assertParamExists('signup', 'userSignup', userSignup)
            const localVarPath = `/sam/users/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userSignup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update participant data given
         * @summary Updateparticipant
         * @param {string} participantId 
         * @param {ParticipantUpdate} participantUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant: async (participantId: string, participantUpdate: ParticipantUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('updateParticipant', 'participantId', participantId)
            // verify required parameter 'participantUpdate' is not null or undefined
            assertParamExists('updateParticipant', 'participantUpdate', participantUpdate)
            const localVarPath = `/sam/users/participants/{participant_id}`
                .replace(`{${"participant_id"}}`, encodeURIComponent(String(participantId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(participantUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the given user and sync the cognito data
         * @summary Updateuser
         * @param {string} userId 
         * @param {User} user 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: string, user: User, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('updateUser', 'user', user)
            const localVarPath = `/sam/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates a certain field.
         * @summary Uservalidations
         * @param {string} field 
         * @param {UserValidations} userValidations 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userValidations: async (field: string, userValidations: UserValidations, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'field' is not null or undefined
            assertParamExists('userValidations', 'field', field)
            // verify required parameter 'userValidations' is not null or undefined
            assertParamExists('userValidations', 'userValidations', userValidations)
            const localVarPath = `/sam/users/validations/{field}`
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userValidations, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Validates a user signup with a given confirmation
         * @summary Confirmsignup
         * @param {UserConfirmation} userConfirmation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmSignup(userConfirmation: UserConfirmation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmSignup(userConfirmation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a participant given the participant info (meta and user_id)
         * @summary Createparticipant
         * @param {ParticipantCreate} participantCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createParticipant(participantCreate: ParticipantCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantUserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createParticipant(participantCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Usually ran after login and will do the following: - If no user exists (AKA signed in with social media) it will create a new user and default participant - If a user exists, sync Cognito data from Cognito to the user - Determine missing fields that SHOULD be filled
         * @summary Createuser
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(authorization?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(authorization, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete participants related to the given participant_id, returns True if successful
         * @summary Deleteparticipant
         * @param {string} participantId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteParticipant(participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteParticipant(participantId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Soft deletes the user with the provided user id, granted the deleter is the same person or an admin. Returns True if successful
         * @summary Deleteuser
         * @param {string} userId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(userId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(userId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a participant given their participant ID
         * @summary Getparticipant
         * @param {string} participantId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipant(participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantUserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipant(participantId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the user object given user id (uuid) or cognito id (cognito)
         * @summary Getuser
         * @param {string} userId 
         * @param {string} [idType] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(userId: string, idType?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, idType, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Login endpoint, returns tokens. EMAIL NEEDS TO BE VERIFIED (can be done through the email the user received).
         * @summary Login
         * @param {UserLogin} userLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userLogin: UserLogin, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserLoginReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(userLogin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Refreshes tokens given a refresh token.
         * @summary Refreshtoken
         * @param {string} appClient 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(appClient: string, body: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTokenReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(appClient, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends the user an email with a confirmation code so they can reset their password
         * @summary Resetpassword
         * @param {UserPasswordReset} userPasswordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(userPasswordReset: UserPasswordReset, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(userPasswordReset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resets the given user\'s password to the given password when the proper code is provided
         * @summary Reset Password Confirmation
         * @param {UserPasswordResetConfirmation} userPasswordResetConfirmation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPasswordConfirmationUsersAuthPasswordResetConfirmPost(userPasswordResetConfirmation: UserPasswordResetConfirmation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPasswordConfirmationUsersAuthPasswordResetConfirmPost(userPasswordResetConfirmation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search participants using a user uuid, returns pagination information and list of `items` (ParticipantUserReturn from GET Participant). Can search on \"user_uuid\", and sort on any field. To search enter search value into \"search\" query param and the field into \"search on\" (currently only \"user\"uuid\"). For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: date_created). Max pagination items per page is 50.
         * @summary Searchparticipants
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchParticipants(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchParticipants(page, pageSize, search, searchOn, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Signup to eHelply, creates a user and default participant behind the scenes. Does not verify email.
         * @summary Signup
         * @param {UserSignup} userSignup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signup(userSignup: UserSignup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSignupReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signup(userSignup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update participant data given
         * @summary Updateparticipant
         * @param {string} participantId 
         * @param {ParticipantUpdate} participantUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateParticipant(participantId: string, participantUpdate: ParticipantUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantUserReturn>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateParticipant(participantId, participantUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the given user and sync the cognito data
         * @summary Updateuser
         * @param {string} userId 
         * @param {User} user 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: string, user: User, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, user, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Validates a certain field.
         * @summary Uservalidations
         * @param {string} field 
         * @param {UserValidations} userValidations 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userValidations(field: string, userValidations: UserValidations, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userValidations(field, userValidations, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Validates a user signup with a given confirmation
         * @summary Confirmsignup
         * @param {UserConfirmation} userConfirmation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmSignup(userConfirmation: UserConfirmation, options?: any): AxiosPromise<any> {
            return localVarFp.confirmSignup(userConfirmation, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a participant given the participant info (meta and user_id)
         * @summary Createparticipant
         * @param {ParticipantCreate} participantCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createParticipant(participantCreate: ParticipantCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<ParticipantUserReturn> {
            return localVarFp.createParticipant(participantCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Usually ran after login and will do the following: - If no user exists (AKA signed in with social media) it will create a new user and default participant - If a user exists, sync Cognito data from Cognito to the user - Determine missing fields that SHOULD be filled
         * @summary Createuser
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(authorization?: string, options?: any): AxiosPromise<any> {
            return localVarFp.createUser(authorization, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete participants related to the given participant_id, returns True if successful
         * @summary Deleteparticipant
         * @param {string} participantId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteParticipant(participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteParticipant(participantId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Soft deletes the user with the provided user id, granted the deleter is the same person or an admin. Returns True if successful
         * @summary Deleteuser
         * @param {string} userId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(userId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.deleteUser(userId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a participant given their participant ID
         * @summary Getparticipant
         * @param {string} participantId 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipant(participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<ParticipantUserReturn> {
            return localVarFp.getParticipant(participantId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the user object given user id (uuid) or cognito id (cognito)
         * @summary Getuser
         * @param {string} userId 
         * @param {string} [idType] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(userId: string, idType?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUser(userId, idType, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Login endpoint, returns tokens. EMAIL NEEDS TO BE VERIFIED (can be done through the email the user received).
         * @summary Login
         * @param {UserLogin} userLogin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userLogin: UserLogin, options?: any): AxiosPromise<UserLoginReturn> {
            return localVarFp.login(userLogin, options).then((request) => request(axios, basePath));
        },
        /**
         * Refreshes tokens given a refresh token.
         * @summary Refreshtoken
         * @param {string} appClient 
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(appClient: string, body: string, options?: any): AxiosPromise<UserTokenReturn> {
            return localVarFp.refreshToken(appClient, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends the user an email with a confirmation code so they can reset their password
         * @summary Resetpassword
         * @param {UserPasswordReset} userPasswordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(userPasswordReset: UserPasswordReset, options?: any): AxiosPromise<any> {
            return localVarFp.resetPassword(userPasswordReset, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets the given user\'s password to the given password when the proper code is provided
         * @summary Reset Password Confirmation
         * @param {UserPasswordResetConfirmation} userPasswordResetConfirmation 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPasswordConfirmationUsersAuthPasswordResetConfirmPost(userPasswordResetConfirmation: UserPasswordResetConfirmation, options?: any): AxiosPromise<any> {
            return localVarFp.resetPasswordConfirmationUsersAuthPasswordResetConfirmPost(userPasswordResetConfirmation, options).then((request) => request(axios, basePath));
        },
        /**
         * Search participants using a user uuid, returns pagination information and list of `items` (ParticipantUserReturn from GET Participant). Can search on \"user_uuid\", and sort on any field. To search enter search value into \"search\" query param and the field into \"search on\" (currently only \"user\"uuid\"). For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: date_created). Max pagination items per page is 50.
         * @summary Searchparticipants
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchParticipants(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<Page> {
            return localVarFp.searchParticipants(page, pageSize, search, searchOn, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Signup to eHelply, creates a user and default participant behind the scenes. Does not verify email.
         * @summary Signup
         * @param {UserSignup} userSignup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(userSignup: UserSignup, options?: any): AxiosPromise<UserSignupReturn> {
            return localVarFp.signup(userSignup, options).then((request) => request(axios, basePath));
        },
        /**
         * Update participant data given
         * @summary Updateparticipant
         * @param {string} participantId 
         * @param {ParticipantUpdate} participantUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParticipant(participantId: string, participantUpdate: ParticipantUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<ParticipantUserReturn> {
            return localVarFp.updateParticipant(participantId, participantUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the given user and sync the cognito data
         * @summary Updateuser
         * @param {string} userId 
         * @param {User} user 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userId: string, user: User, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.updateUser(userId, user, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates a certain field.
         * @summary Uservalidations
         * @param {string} field 
         * @param {UserValidations} userValidations 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userValidations(field: string, userValidations: UserValidations, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.userValidations(field, userValidations, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * Validates a user signup with a given confirmation
     * @summary Confirmsignup
     * @param {UserConfirmation} userConfirmation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    confirmSignup(userConfirmation: UserConfirmation, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Creates a participant given the participant info (meta and user_id)
     * @summary Createparticipant
     * @param {ParticipantCreate} participantCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    createParticipant(participantCreate: ParticipantCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<ParticipantUserReturn>;

    /**
     * Usually ran after login and will do the following: - If no user exists (AKA signed in with social media) it will create a new user and default participant - If a user exists, sync Cognito data from Cognito to the user - Determine missing fields that SHOULD be filled
     * @summary Createuser
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    createUser(authorization?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Delete participants related to the given participant_id, returns True if successful
     * @summary Deleteparticipant
     * @param {string} participantId 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteParticipant(participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * Soft deletes the user with the provided user id, granted the deleter is the same person or an admin. Returns True if successful
     * @summary Deleteuser
     * @param {string} userId 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteUser(userId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<boolean>;

    /**
     * Gets a participant given their participant ID
     * @summary Getparticipant
     * @param {string} participantId 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getParticipant(participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<ParticipantUserReturn>;

    /**
     * Gets the user object given user id (uuid) or cognito id (cognito)
     * @summary Getuser
     * @param {string} userId 
     * @param {string} [idType] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUser(userId: string, idType?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<UserResponse>;

    /**
     * Login endpoint, returns tokens. EMAIL NEEDS TO BE VERIFIED (can be done through the email the user received).
     * @summary Login
     * @param {UserLogin} userLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    login(userLogin: UserLogin, options?: AxiosRequestConfig): AxiosPromise<UserLoginReturn>;

    /**
     * Refreshes tokens given a refresh token.
     * @summary Refreshtoken
     * @param {string} appClient 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    refreshToken(appClient: string, body: string, options?: AxiosRequestConfig): AxiosPromise<UserTokenReturn>;

    /**
     * Sends the user an email with a confirmation code so they can reset their password
     * @summary Resetpassword
     * @param {UserPasswordReset} userPasswordReset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    resetPassword(userPasswordReset: UserPasswordReset, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Resets the given user\'s password to the given password when the proper code is provided
     * @summary Reset Password Confirmation
     * @param {UserPasswordResetConfirmation} userPasswordResetConfirmation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    resetPasswordConfirmationUsersAuthPasswordResetConfirmPost(userPasswordResetConfirmation: UserPasswordResetConfirmation, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Search participants using a user uuid, returns pagination information and list of `items` (ParticipantUserReturn from GET Participant). Can search on \"user_uuid\", and sort on any field. To search enter search value into \"search\" query param and the field into \"search on\" (currently only \"user\"uuid\"). For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: date_created). Max pagination items per page is 50.
     * @summary Searchparticipants
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    searchParticipants(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<Page>;

    /**
     * Signup to eHelply, creates a user and default participant behind the scenes. Does not verify email.
     * @summary Signup
     * @param {UserSignup} userSignup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    signup(userSignup: UserSignup, options?: AxiosRequestConfig): AxiosPromise<UserSignupReturn>;

    /**
     * Update participant data given
     * @summary Updateparticipant
     * @param {string} participantId 
     * @param {ParticipantUpdate} participantUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateParticipant(participantId: string, participantUpdate: ParticipantUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<ParticipantUserReturn>;

    /**
     * Update the given user and sync the cognito data
     * @summary Updateuser
     * @param {string} userId 
     * @param {User} user 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    updateUser(userId: string, user: User, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<UserResponse>;

    /**
     * Validates a certain field.
     * @summary Uservalidations
     * @param {string} field 
     * @param {UserValidations} userValidations 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    userValidations(field: string, userValidations: UserValidations, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<boolean>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * Validates a user signup with a given confirmation
     * @summary Confirmsignup
     * @param {UserConfirmation} userConfirmation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public confirmSignup(userConfirmation: UserConfirmation, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).confirmSignup(userConfirmation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a participant given the participant info (meta and user_id)
     * @summary Createparticipant
     * @param {ParticipantCreate} participantCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createParticipant(participantCreate: ParticipantCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createParticipant(participantCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Usually ran after login and will do the following: - If no user exists (AKA signed in with social media) it will create a new user and default participant - If a user exists, sync Cognito data from Cognito to the user - Determine missing fields that SHOULD be filled
     * @summary Createuser
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(authorization?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(authorization, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete participants related to the given participant_id, returns True if successful
     * @summary Deleteparticipant
     * @param {string} participantId 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteParticipant(participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteParticipant(participantId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Soft deletes the user with the provided user id, granted the deleter is the same person or an admin. Returns True if successful
     * @summary Deleteuser
     * @param {string} userId 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(userId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(userId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a participant given their participant ID
     * @summary Getparticipant
     * @param {string} participantId 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getParticipant(participantId: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getParticipant(participantId, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the user object given user id (uuid) or cognito id (cognito)
     * @summary Getuser
     * @param {string} userId 
     * @param {string} [idType] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(userId: string, idType?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(userId, idType, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login endpoint, returns tokens. EMAIL NEEDS TO BE VERIFIED (can be done through the email the user received).
     * @summary Login
     * @param {UserLogin} userLogin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public login(userLogin: UserLogin, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).login(userLogin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Refreshes tokens given a refresh token.
     * @summary Refreshtoken
     * @param {string} appClient 
     * @param {string} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public refreshToken(appClient: string, body: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).refreshToken(appClient, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends the user an email with a confirmation code so they can reset their password
     * @summary Resetpassword
     * @param {UserPasswordReset} userPasswordReset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public resetPassword(userPasswordReset: UserPasswordReset, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).resetPassword(userPasswordReset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resets the given user\'s password to the given password when the proper code is provided
     * @summary Reset Password Confirmation
     * @param {UserPasswordResetConfirmation} userPasswordResetConfirmation 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public resetPasswordConfirmationUsersAuthPasswordResetConfirmPost(userPasswordResetConfirmation: UserPasswordResetConfirmation, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).resetPasswordConfirmationUsersAuthPasswordResetConfirmPost(userPasswordResetConfirmation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search participants using a user uuid, returns pagination information and list of `items` (ParticipantUserReturn from GET Participant). Can search on \"user_uuid\", and sort on any field. To search enter search value into \"search\" query param and the field into \"search on\" (currently only \"user\"uuid\"). For sorting fill out \"sort_desc\" field with either true/false and the \"sort_on\" query parameter with column you want to sort on (ex: date_created). Max pagination items per page is 50.
     * @summary Searchparticipants
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public searchParticipants(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).searchParticipants(page, pageSize, search, searchOn, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Signup to eHelply, creates a user and default participant behind the scenes. Does not verify email.
     * @summary Signup
     * @param {UserSignup} userSignup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public signup(userSignup: UserSignup, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).signup(userSignup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update participant data given
     * @summary Updateparticipant
     * @param {string} participantId 
     * @param {ParticipantUpdate} participantUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateParticipant(participantId: string, participantUpdate: ParticipantUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateParticipant(participantId, participantUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the given user and sync the cognito data
     * @summary Updateuser
     * @param {string} userId 
     * @param {User} user 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(userId: string, user: User, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(userId, user, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Validates a certain field.
     * @summary Uservalidations
     * @param {string} field 
     * @param {UserValidations} userValidations 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userValidations(field: string, userValidations: UserValidations, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).userValidations(field, userValidations, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }
}
