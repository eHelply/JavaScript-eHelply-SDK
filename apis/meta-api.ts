/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK
 * eHelply SDK
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost } from '../models';
// @ts-ignore
import { BodyUpdateMetaFromUuidMetaMetaMetaUuidPut } from '../models';
// @ts-ignore
import { BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { MetaDynamo } from '../models';
// @ts-ignore
import { MetaSlugger } from '../models';
/**
 * MetaApi - axios parameter creator
 * @export
 */
export const MetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Meta From Uuid
         * @param {string} metaUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMetaFromUuidMetaMetaMetaUuidDelete: async (metaUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metaUuid' is not null or undefined
            assertParamExists('deleteMetaFromUuidMetaMetaMetaUuidDelete', 'metaUuid', metaUuid)
            const localVarPath = `/meta/meta/meta/{meta_uuid}`
                .replace(`{${"meta_uuid"}}`, encodeURIComponent(String(metaUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete: async (service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete', 'service', service)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete', 'type', type)
            // verify required parameter 'entityUuid' is not null or undefined
            assertParamExists('deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete', 'entityUuid', entityUuid)
            const localVarPath = `/meta/meta/meta/service/{service}/type/{type}/entity/{entity_uuid}`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"entity_uuid"}}`, encodeURIComponent(String(entityUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Meta From Uuid
         * @param {string} metaUuid 
         * @param {boolean} [detailed] 
         * @param {boolean} [custom] 
         * @param {boolean} [dates] 
         * @param {number} [history] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetaFromUuidMetaMetaMetaUuidGet: async (metaUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metaUuid' is not null or undefined
            assertParamExists('getMetaFromUuidMetaMetaMetaUuidGet', 'metaUuid', metaUuid)
            const localVarPath = `/meta/meta/meta/{meta_uuid}`
                .replace(`{${"meta_uuid"}}`, encodeURIComponent(String(metaUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detailed !== undefined) {
                localVarQueryParameter['detailed'] = detailed;
            }

            if (custom !== undefined) {
                localVarQueryParameter['custom'] = custom;
            }

            if (dates !== undefined) {
                localVarQueryParameter['dates'] = dates;
            }

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {boolean} [detailed] 
         * @param {boolean} [custom] 
         * @param {boolean} [dates] 
         * @param {number} [history] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet: async (service: string, type: string, entityUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet', 'service', service)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet', 'type', type)
            // verify required parameter 'entityUuid' is not null or undefined
            assertParamExists('getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet', 'entityUuid', entityUuid)
            const localVarPath = `/meta/meta/meta/service/{service}/type/{type}/entity/{entity_uuid}`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"entity_uuid"}}`, encodeURIComponent(String(entityUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detailed !== undefined) {
                localVarQueryParameter['detailed'] = detailed;
            }

            if (custom !== undefined) {
                localVarQueryParameter['custom'] = custom;
            }

            if (dates !== undefined) {
                localVarQueryParameter['dates'] = dates;
            }

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Make Slug
         * @param {MetaSlugger} metaSlugger 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeSlugMetaMetaSlugPost: async (metaSlugger: MetaSlugger, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metaSlugger' is not null or undefined
            assertParamExists('makeSlugMetaMetaSlugPost', 'metaSlugger', metaSlugger)
            const localVarPath = `/meta/meta/meta/slug`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metaSlugger, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Meta
         * @param {string} service 
         * @param {string} typeStr 
         * @param {string} entityUuid 
         * @param {BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost} bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost: async (service: string, typeStr: string, entityUuid: string, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost: BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost', 'service', service)
            // verify required parameter 'typeStr' is not null or undefined
            assertParamExists('postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost', 'typeStr', typeStr)
            // verify required parameter 'entityUuid' is not null or undefined
            assertParamExists('postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost', 'entityUuid', entityUuid)
            // verify required parameter 'bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost' is not null or undefined
            assertParamExists('postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost', 'bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost', bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost)
            const localVarPath = `/meta/meta/meta/service/{service}/type/{type_str}/entity/{entity_uuid}`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"type_str"}}`, encodeURIComponent(String(typeStr)))
                .replace(`{${"entity_uuid"}}`, encodeURIComponent(String(entityUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Touch Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost: async (service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost', 'service', service)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost', 'type', type)
            // verify required parameter 'entityUuid' is not null or undefined
            assertParamExists('touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost', 'entityUuid', entityUuid)
            const localVarPath = `/meta/meta/meta/service/{service}/type/{type}/entity/{entity_uuid}/touch`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"entity_uuid"}}`, encodeURIComponent(String(entityUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Meta From Uuid
         * @param {string} metaUuid 
         * @param {BodyUpdateMetaFromUuidMetaMetaMetaUuidPut} bodyUpdateMetaFromUuidMetaMetaMetaUuidPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetaFromUuidMetaMetaMetaUuidPut: async (metaUuid: string, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut: BodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'metaUuid' is not null or undefined
            assertParamExists('updateMetaFromUuidMetaMetaMetaUuidPut', 'metaUuid', metaUuid)
            // verify required parameter 'bodyUpdateMetaFromUuidMetaMetaMetaUuidPut' is not null or undefined
            assertParamExists('updateMetaFromUuidMetaMetaMetaUuidPut', 'bodyUpdateMetaFromUuidMetaMetaMetaUuidPut', bodyUpdateMetaFromUuidMetaMetaMetaUuidPut)
            const localVarPath = `/meta/meta/meta/{meta_uuid}`
                .replace(`{${"meta_uuid"}}`, encodeURIComponent(String(metaUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyUpdateMetaFromUuidMetaMetaMetaUuidPut, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut} bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut: async (service: string, type: string, entityUuid: string, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut: BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut', 'service', service)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut', 'type', type)
            // verify required parameter 'entityUuid' is not null or undefined
            assertParamExists('updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut', 'entityUuid', entityUuid)
            // verify required parameter 'bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut' is not null or undefined
            assertParamExists('updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut', 'bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut', bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut)
            const localVarPath = `/meta/meta/meta/service/{service}/type/{type}/entity/{entity_uuid}`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)))
                .replace(`{${"entity_uuid"}}`, encodeURIComponent(String(entityUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MetaApi - functional programming interface
 * @export
 */
export const MetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MetaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Meta From Uuid
         * @param {string} metaUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMetaFromUuidMetaMetaMetaUuidDelete(metaUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMetaFromUuidMetaMetaMetaUuidDelete(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete(service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete(service, type, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Meta From Uuid
         * @param {string} metaUuid 
         * @param {boolean} [detailed] 
         * @param {boolean} [custom] 
         * @param {boolean} [dates] 
         * @param {number} [history] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetaFromUuidMetaMetaMetaUuidGet(metaUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetaFromUuidMetaMetaMetaUuidGet(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {boolean} [detailed] 
         * @param {boolean} [custom] 
         * @param {boolean} [dates] 
         * @param {number} [history] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet(service: string, type: string, entityUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet(service, type, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Make Slug
         * @param {MetaSlugger} metaSlugger 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeSlugMetaMetaSlugPost(metaSlugger: MetaSlugger, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeSlugMetaMetaSlugPost(metaSlugger, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Post Meta
         * @param {string} service 
         * @param {string} typeStr 
         * @param {string} entityUuid 
         * @param {BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost} bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost(service: string, typeStr: string, entityUuid: string, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost: BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaDynamo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost(service, typeStr, entityUuid, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Touch Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost(service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaDynamo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost(service, type, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Meta From Uuid
         * @param {string} metaUuid 
         * @param {BodyUpdateMetaFromUuidMetaMetaMetaUuidPut} bodyUpdateMetaFromUuidMetaMetaMetaUuidPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetaFromUuidMetaMetaMetaUuidPut(metaUuid: string, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut: BodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaDynamo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetaFromUuidMetaMetaMetaUuidPut(metaUuid, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut} bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut(service: string, type: string, entityUuid: string, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut: BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetaDynamo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut(service, type, entityUuid, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MetaApi - factory interface
 * @export
 */
export const MetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MetaApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Meta From Uuid
         * @param {string} metaUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMetaFromUuidMetaMetaMetaUuidDelete(metaUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteMetaFromUuidMetaMetaMetaUuidDelete(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete(service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete(service, type, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Meta From Uuid
         * @param {string} metaUuid 
         * @param {boolean} [detailed] 
         * @param {boolean} [custom] 
         * @param {boolean} [dates] 
         * @param {number} [history] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetaFromUuidMetaMetaMetaUuidGet(metaUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getMetaFromUuidMetaMetaMetaUuidGet(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {boolean} [detailed] 
         * @param {boolean} [custom] 
         * @param {boolean} [dates] 
         * @param {number} [history] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet(service: string, type: string, entityUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet(service, type, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Make Slug
         * @param {MetaSlugger} metaSlugger 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeSlugMetaMetaSlugPost(metaSlugger: MetaSlugger, options?: any): AxiosPromise<any> {
            return localVarFp.makeSlugMetaMetaSlugPost(metaSlugger, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Meta
         * @param {string} service 
         * @param {string} typeStr 
         * @param {string} entityUuid 
         * @param {BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost} bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost(service: string, typeStr: string, entityUuid: string, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost: BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<MetaDynamo> {
            return localVarFp.postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost(service, typeStr, entityUuid, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Touch Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost(service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<MetaDynamo> {
            return localVarFp.touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost(service, type, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Meta From Uuid
         * @param {string} metaUuid 
         * @param {BodyUpdateMetaFromUuidMetaMetaMetaUuidPut} bodyUpdateMetaFromUuidMetaMetaMetaUuidPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetaFromUuidMetaMetaMetaUuidPut(metaUuid: string, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut: BodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<MetaDynamo> {
            return localVarFp.updateMetaFromUuidMetaMetaMetaUuidPut(metaUuid, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Meta
         * @param {string} service 
         * @param {string} type 
         * @param {string} entityUuid 
         * @param {BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut} bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut(service: string, type: string, entityUuid: string, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut: BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<MetaDynamo> {
            return localVarFp.updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut(service, type, entityUuid, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MetaApi - interface
 * @export
 * @interface MetaApi
 */
export interface MetaApiInterface {
    /**
     * 
     * @summary Delete Meta From Uuid
     * @param {string} metaUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    deleteMetaFromUuidMetaMetaMetaUuidDelete(metaUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Delete Meta
     * @param {string} service 
     * @param {string} type 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete(service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Meta From Uuid
     * @param {string} metaUuid 
     * @param {boolean} [detailed] 
     * @param {boolean} [custom] 
     * @param {boolean} [dates] 
     * @param {number} [history] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getMetaFromUuidMetaMetaMetaUuidGet(metaUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Meta
     * @param {string} service 
     * @param {string} type 
     * @param {string} entityUuid 
     * @param {boolean} [detailed] 
     * @param {boolean} [custom] 
     * @param {boolean} [dates] 
     * @param {number} [history] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet(service: string, type: string, entityUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Make Slug
     * @param {MetaSlugger} metaSlugger 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    makeSlugMetaMetaSlugPost(metaSlugger: MetaSlugger, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Post Meta
     * @param {string} service 
     * @param {string} typeStr 
     * @param {string} entityUuid 
     * @param {BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost} bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost(service: string, typeStr: string, entityUuid: string, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost: BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<MetaDynamo>;

    /**
     * 
     * @summary Touch Meta
     * @param {string} service 
     * @param {string} type 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost(service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<MetaDynamo>;

    /**
     * 
     * @summary Update Meta From Uuid
     * @param {string} metaUuid 
     * @param {BodyUpdateMetaFromUuidMetaMetaMetaUuidPut} bodyUpdateMetaFromUuidMetaMetaMetaUuidPut 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    updateMetaFromUuidMetaMetaMetaUuidPut(metaUuid: string, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut: BodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<MetaDynamo>;

    /**
     * 
     * @summary Update Meta
     * @param {string} service 
     * @param {string} type 
     * @param {string} entityUuid 
     * @param {BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut} bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApiInterface
     */
    updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut(service: string, type: string, entityUuid: string, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut: BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<MetaDynamo>;

}

/**
 * MetaApi - object-oriented interface
 * @export
 * @class MetaApi
 * @extends {BaseAPI}
 */
export class MetaApi extends BaseAPI implements MetaApiInterface {
    /**
     * 
     * @summary Delete Meta From Uuid
     * @param {string} metaUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public deleteMetaFromUuidMetaMetaMetaUuidDelete(metaUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).deleteMetaFromUuidMetaMetaMetaUuidDelete(metaUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Meta
     * @param {string} service 
     * @param {string} type 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete(service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).deleteMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidDelete(service, type, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Meta From Uuid
     * @param {string} metaUuid 
     * @param {boolean} [detailed] 
     * @param {boolean} [custom] 
     * @param {boolean} [dates] 
     * @param {number} [history] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public getMetaFromUuidMetaMetaMetaUuidGet(metaUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).getMetaFromUuidMetaMetaMetaUuidGet(metaUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Meta
     * @param {string} service 
     * @param {string} type 
     * @param {string} entityUuid 
     * @param {boolean} [detailed] 
     * @param {boolean} [custom] 
     * @param {boolean} [dates] 
     * @param {number} [history] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet(service: string, type: string, entityUuid: string, detailed?: boolean, custom?: boolean, dates?: boolean, history?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).getMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidGet(service, type, entityUuid, detailed, custom, dates, history, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Make Slug
     * @param {MetaSlugger} metaSlugger 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public makeSlugMetaMetaSlugPost(metaSlugger: MetaSlugger, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).makeSlugMetaMetaSlugPost(metaSlugger, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Meta
     * @param {string} service 
     * @param {string} typeStr 
     * @param {string} entityUuid 
     * @param {BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost} bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost(service: string, typeStr: string, entityUuid: string, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost: BodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).postMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost(service, typeStr, entityUuid, bodyPostMetaMetaMetaServiceServiceTypeTypeStrEntityEntityUuidPost, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Touch Meta
     * @param {string} service 
     * @param {string} type 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost(service: string, type: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).touchMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidTouchPost(service, type, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Meta From Uuid
     * @param {string} metaUuid 
     * @param {BodyUpdateMetaFromUuidMetaMetaMetaUuidPut} bodyUpdateMetaFromUuidMetaMetaMetaUuidPut 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public updateMetaFromUuidMetaMetaMetaUuidPut(metaUuid: string, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut: BodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).updateMetaFromUuidMetaMetaMetaUuidPut(metaUuid, bodyUpdateMetaFromUuidMetaMetaMetaUuidPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Meta
     * @param {string} service 
     * @param {string} type 
     * @param {string} entityUuid 
     * @param {BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut} bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetaApi
     */
    public updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut(service: string, type: string, entityUuid: string, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut: BodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return MetaApiFp(this.configuration).updateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut(service, type, entityUuid, bodyUpdateMetaMetaMetaServiceServiceTypeTypeEntityEntityUuidPut, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }
}
