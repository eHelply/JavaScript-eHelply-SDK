/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.87
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.87
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateKeyResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { InlineResponse2003 } from '../models';
// @ts-ignore
import { InlineResponse2004 } from '../models';
// @ts-ignore
import { InlineResponse2005 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
// @ts-ignore
import { Page } from '../models';
// @ts-ignore
import { ProjectsProjectCreate } from '../models';
// @ts-ignore
import { ProjectsProjectGet } from '../models';
// @ts-ignore
import { ProjectsProjectMemberDB } from '../models';
// @ts-ignore
import { ProjectsProjectUpdate } from '../models';
// @ts-ignore
import { ProjectsProjectUsageDB } from '../models';
// @ts-ignore
import { ProjectsUsageTypeCreate } from '../models';
// @ts-ignore
import { ProjectsUsageTypeDB } from '../models';
// @ts-ignore
import { ProjectsUsageTypeGet } from '../models';
// @ts-ignore
import { ProjectsUsageTypeUpdate } from '../models';
// @ts-ignore
import { SecurityKeyCreate } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Member To Project
         * @param {string} projectUuid 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost: async (projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost', 'projectUuid', projectUuid)
            // verify required parameter 'entityUuid' is not null or undefined
            assertParamExists('addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost', 'entityUuid', entityUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}/members/{entity_uuid}`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)))
                .replace(`{${"entity_uuid"}}`, encodeURIComponent(String(entityUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Archive Project
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveProjectProjectsProjectsProjectUuidDelete: async (projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('archiveProjectProjectsProjectsProjectUuidDelete', 'projectUuid', projectUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Project Key
         * @param {string} projectUuid 
         * @param {SecurityKeyCreate} securityKeyCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectKeyProjectsProjectsProjectUuidKeysPost: async (projectUuid: string, securityKeyCreate: SecurityKeyCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('createProjectKeyProjectsProjectsProjectUuidKeysPost', 'projectUuid', projectUuid)
            // verify required parameter 'securityKeyCreate' is not null or undefined
            assertParamExists('createProjectKeyProjectsProjectsProjectUuidKeysPost', 'securityKeyCreate', securityKeyCreate)
            const localVarPath = `/sam/projects/projects/{project_uuid}/keys`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(securityKeyCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new Project
         * @summary Create Project
         * @param {ProjectsProjectCreate} projectsProjectCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectProjectsProjectsPost: async (projectsProjectCreate: ProjectsProjectCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectsProjectCreate' is not null or undefined
            assertParamExists('createProjectProjectsProjectsPost', 'projectsProjectCreate', projectsProjectCreate)
            const localVarPath = `/sam/projects/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectsProjectCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Usage Type
         * @param {ProjectsUsageTypeCreate} projectsUsageTypeCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsageTypeProjectsUsageTypesPost: async (projectsUsageTypeCreate: ProjectsUsageTypeCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectsUsageTypeCreate' is not null or undefined
            assertParamExists('createUsageTypeProjectsUsageTypesPost', 'projectsUsageTypeCreate', projectsUsageTypeCreate)
            const localVarPath = `/sam/projects/usage/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUsageTypeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Usage Type
         * @param {string} usageTypeKey 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete: async (usageTypeKey: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usageTypeKey' is not null or undefined
            assertParamExists('deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete', 'usageTypeKey', usageTypeKey)
            const localVarPath = `/sam/projects/usage/types/{usage_type_key}`
                .replace(`{${"usage_type_key"}}`, encodeURIComponent(String(usageTypeKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Project Usage
         * @param {string} projectUuid 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectUsageProjectsProjectsProjectUuidUsageGet: async (projectUuid: string, year?: number, month?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('getAllProjectUsageProjectsProjectsProjectUuidUsageGet', 'projectUuid', projectUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}/usage`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Member Projects
         * @param {string} entityUuid 
         * @param {string} [role] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberProjectsProjectsMembersEntityUuidProjectsGet: async (entityUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityUuid' is not null or undefined
            assertParamExists('getMemberProjectsProjectsMembersEntityUuidProjectsGet', 'entityUuid', entityUuid)
            const localVarPath = `/sam/projects/members/{entity_uuid}/projects`
                .replace(`{${"entity_uuid"}}`, encodeURIComponent(String(entityUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Project Keys
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectKeysProjectsProjectsProjectUuidKeysGet: async (projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('getProjectKeysProjectsProjectsProjectUuidKeysGet', 'projectUuid', projectUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}/keys`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Project Members
         * @param {string} projectUuid 
         * @param {string} [role] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectMembersProjectsProjectsProjectUuidMembersGet: async (projectUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('getProjectMembersProjectsProjectsProjectUuidMembersGet', 'projectUuid', projectUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}/members`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a Project
         * @summary Get Project
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectsProjectsProjectUuidGet: async (projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('getProjectProjectsProjectsProjectUuidGet', 'projectUuid', projectUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Specific Project Usage
         * @param {string} usageTypeKey 
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet: async (usageTypeKey: string, projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usageTypeKey' is not null or undefined
            assertParamExists('getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet', 'usageTypeKey', usageTypeKey)
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet', 'projectUuid', projectUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}/usage/{usage_type_key}`
                .replace(`{${"usage_type_key"}}`, encodeURIComponent(String(usageTypeKey)))
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a UsageType  No auth because we may want to use this on pricing/docs pages
         * @summary Get Usage Type
         * @param {string} usageTypeKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageTypeProjectsUsageTypesUsageTypeKeyGet: async (usageTypeKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usageTypeKey' is not null or undefined
            assertParamExists('getUsageTypeProjectsUsageTypesUsageTypeKeyGet', 'usageTypeKey', usageTypeKey)
            const localVarPath = `/sam/projects/usage/types/{usage_type_key}`
                .replace(`{${"usage_type_key"}}`, encodeURIComponent(String(usageTypeKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Member From Project
         * @param {string} projectUuid 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete: async (projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete', 'projectUuid', projectUuid)
            // verify required parameter 'entityUuid' is not null or undefined
            assertParamExists('removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete', 'entityUuid', entityUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}/members/{entity_uuid}`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)))
                .replace(`{${"entity_uuid"}}`, encodeURIComponent(String(entityUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove Project Key
         * @param {string} projectUuid 
         * @param {string} [accessToken] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjectKeyProjectsProjectsProjectUuidKeysDelete: async (projectUuid: string, accessToken?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('removeProjectKeyProjectsProjectsProjectUuidKeysDelete', 'projectUuid', projectUuid)
            const localVarPath = `/sam/projects/projects/{project_uuid}/keys`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['access_token'] = accessToken;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sandbox
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProjectsSandboxGet: async (xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/projects/sandbox`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search projects
         * @summary Search Projects
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProjectsProjectsProjectsGet: async (page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/projects/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (searchOn !== undefined) {
                localVarQueryParameter['search_on'] = searchOn;
            }

            if (sortOn !== undefined) {
                localVarQueryParameter['sort_on'] = sortOn;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sort_desc'] = sortDesc;
            }

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a UsageType  No auth because we may want to use this on pricing/docs pages
         * @summary Search Usage Type
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsageTypeProjectsUsageTypesGet: async (page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/projects/usage/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (searchOn !== undefined) {
                localVarQueryParameter['search_on'] = searchOn;
            }

            if (sortOn !== undefined) {
                localVarQueryParameter['sort_on'] = sortOn;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sort_desc'] = sortDesc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Project
         * @param {string} projectUuid 
         * @param {ProjectsProjectUpdate} projectsProjectUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectProjectsProjectsProjectUuidPut: async (projectUuid: string, projectsProjectUpdate: ProjectsProjectUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectUuid' is not null or undefined
            assertParamExists('updateProjectProjectsProjectsProjectUuidPut', 'projectUuid', projectUuid)
            // verify required parameter 'projectsProjectUpdate' is not null or undefined
            assertParamExists('updateProjectProjectsProjectsProjectUuidPut', 'projectsProjectUpdate', projectsProjectUpdate)
            const localVarPath = `/sam/projects/projects/{project_uuid}`
                .replace(`{${"project_uuid"}}`, encodeURIComponent(String(projectUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectsProjectUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Usage Type
         * @param {string} usageTypeKey 
         * @param {ProjectsUsageTypeUpdate} projectsUsageTypeUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsageTypeProjectsUsageTypesUsageTypeKeyPut: async (usageTypeKey: string, projectsUsageTypeUpdate: ProjectsUsageTypeUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usageTypeKey' is not null or undefined
            assertParamExists('updateUsageTypeProjectsUsageTypesUsageTypeKeyPut', 'usageTypeKey', usageTypeKey)
            // verify required parameter 'projectsUsageTypeUpdate' is not null or undefined
            assertParamExists('updateUsageTypeProjectsUsageTypesUsageTypeKeyPut', 'projectsUsageTypeUpdate', projectsUsageTypeUpdate)
            const localVarPath = `/sam/projects/usage/types/{usage_type_key}`
                .replace(`{${"usage_type_key"}}`, encodeURIComponent(String(usageTypeKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAccessToken !== undefined && xAccessToken !== null) {
                localVarHeaderParameter['x-access-token'] = String(xAccessToken);
            }

            if (xSecretToken !== undefined && xSecretToken !== null) {
                localVarHeaderParameter['x-secret-token'] = String(xSecretToken);
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['authorization'] = String(authorization);
            }

            if (ehelplyActiveParticipant !== undefined && ehelplyActiveParticipant !== null) {
                localVarHeaderParameter['ehelply-active-participant'] = String(ehelplyActiveParticipant);
            }

            if (ehelplyProject !== undefined && ehelplyProject !== null) {
                localVarHeaderParameter['ehelply-project'] = String(ehelplyProject);
            }

            if (ehelplyData !== undefined && ehelplyData !== null) {
                localVarHeaderParameter['ehelply-data'] = String(ehelplyData);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectsUsageTypeUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Member To Project
         * @param {string} projectUuid 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(projectUuid, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Archive Project
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async archiveProjectProjectsProjectsProjectUuidDelete(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.archiveProjectProjectsProjectsProjectUuidDelete(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Project Key
         * @param {string} projectUuid 
         * @param {SecurityKeyCreate} securityKeyCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectKeyProjectsProjectsProjectUuidKeysPost(projectUuid: string, securityKeyCreate: SecurityKeyCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectKeyProjectsProjectsProjectUuidKeysPost(projectUuid, securityKeyCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new Project
         * @summary Create Project
         * @param {ProjectsProjectCreate} projectsProjectCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectProjectsProjectsPost(projectsProjectCreate: ProjectsProjectCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectProjectsProjectsPost(projectsProjectCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Usage Type
         * @param {ProjectsUsageTypeCreate} projectsUsageTypeCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUsageTypeProjectsUsageTypesPost(projectsUsageTypeCreate: ProjectsUsageTypeCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsUsageTypeDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUsageTypeProjectsUsageTypesPost(projectsUsageTypeCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Usage Type
         * @param {string} usageTypeKey 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(usageTypeKey: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(usageTypeKey, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Project Usage
         * @param {string} projectUuid 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjectUsageProjectsProjectsProjectUuidUsageGet(projectUuid: string, year?: number, month?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectsProjectUsageDB>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjectUsageProjectsProjectsProjectUuidUsageGet(projectUuid, year, month, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Member Projects
         * @param {string} entityUuid 
         * @param {string} [role] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemberProjectsProjectsMembersEntityUuidProjectsGet(entityUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectsProjectGet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemberProjectsProjectsMembersEntityUuidProjectsGet(entityUuid, role, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Project Keys
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectKeysProjectsProjectsProjectUuidKeysGet(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectsProjectMemberDB>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectKeysProjectsProjectsProjectUuidKeysGet(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Project Members
         * @param {string} projectUuid 
         * @param {string} [role] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectMembersProjectsProjectsProjectUuidMembersGet(projectUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectsProjectMemberDB>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectMembersProjectsProjectsProjectUuidMembersGet(projectUuid, role, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a Project
         * @summary Get Project
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectProjectsProjectsProjectUuidGet(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectProjectsProjectsProjectUuidGet(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Specific Project Usage
         * @param {string} usageTypeKey 
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(usageTypeKey: string, projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsProjectUsageDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(usageTypeKey, projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a UsageType  No auth because we may want to use this on pricing/docs pages
         * @summary Get Usage Type
         * @param {string} usageTypeKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsageTypeProjectsUsageTypesUsageTypeKeyGet(usageTypeKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsUsageTypeGet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsageTypeProjectsUsageTypesUsageTypeKeyGet(usageTypeKey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove Member From Project
         * @param {string} projectUuid 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(projectUuid, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove Project Key
         * @param {string} projectUuid 
         * @param {string} [accessToken] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeProjectKeyProjectsProjectsProjectUuidKeysDelete(projectUuid: string, accessToken?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeProjectKeyProjectsProjectsProjectUuidKeysDelete(projectUuid, accessToken, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sandbox
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxProjectsSandboxGet(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxProjectsSandboxGet(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search projects
         * @summary Search Projects
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchProjectsProjectsProjectsGet(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchProjectsProjectsProjectsGet(page, pageSize, search, searchOn, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a UsageType  No auth because we may want to use this on pricing/docs pages
         * @summary Search Usage Type
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUsageTypeProjectsUsageTypesGet(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchUsageTypeProjectsUsageTypesGet(page, pageSize, search, searchOn, sortOn, sortDesc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Project
         * @param {string} projectUuid 
         * @param {ProjectsProjectUpdate} projectsProjectUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectProjectsProjectsProjectUuidPut(projectUuid: string, projectsProjectUpdate: ProjectsProjectUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectProjectsProjectsProjectUuidPut(projectUuid, projectsProjectUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Usage Type
         * @param {string} usageTypeKey 
         * @param {ProjectsUsageTypeUpdate} projectsUsageTypeUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(usageTypeKey: string, projectsUsageTypeUpdate: ProjectsUsageTypeUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsUsageTypeDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(usageTypeKey, projectsUsageTypeUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Member To Project
         * @param {string} projectUuid 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(projectUuid, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Archive Project
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveProjectProjectsProjectsProjectUuidDelete(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.archiveProjectProjectsProjectsProjectUuidDelete(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Project Key
         * @param {string} projectUuid 
         * @param {SecurityKeyCreate} securityKeyCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectKeyProjectsProjectsProjectUuidKeysPost(projectUuid: string, securityKeyCreate: SecurityKeyCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<CreateKeyResponse> {
            return localVarFp.createProjectKeyProjectsProjectsProjectUuidKeysPost(projectUuid, securityKeyCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new Project
         * @summary Create Project
         * @param {ProjectsProjectCreate} projectsProjectCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectProjectsProjectsPost(projectsProjectCreate: ProjectsProjectCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.createProjectProjectsProjectsPost(projectsProjectCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Usage Type
         * @param {ProjectsUsageTypeCreate} projectsUsageTypeCreate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUsageTypeProjectsUsageTypesPost(projectsUsageTypeCreate: ProjectsUsageTypeCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<ProjectsUsageTypeDB> {
            return localVarFp.createUsageTypeProjectsUsageTypesPost(projectsUsageTypeCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Usage Type
         * @param {string} usageTypeKey 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(usageTypeKey: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(usageTypeKey, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Project Usage
         * @param {string} projectUuid 
         * @param {number} [year] 
         * @param {number} [month] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjectUsageProjectsProjectsProjectUuidUsageGet(projectUuid: string, year?: number, month?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<Array<ProjectsProjectUsageDB>> {
            return localVarFp.getAllProjectUsageProjectsProjectsProjectUuidUsageGet(projectUuid, year, month, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Member Projects
         * @param {string} entityUuid 
         * @param {string} [role] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemberProjectsProjectsMembersEntityUuidProjectsGet(entityUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<Array<ProjectsProjectGet>> {
            return localVarFp.getMemberProjectsProjectsMembersEntityUuidProjectsGet(entityUuid, role, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Project Keys
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectKeysProjectsProjectsProjectUuidKeysGet(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<Array<ProjectsProjectMemberDB>> {
            return localVarFp.getProjectKeysProjectsProjectsProjectUuidKeysGet(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Project Members
         * @param {string} projectUuid 
         * @param {string} [role] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectMembersProjectsProjectsProjectUuidMembersGet(projectUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<Array<ProjectsProjectMemberDB>> {
            return localVarFp.getProjectMembersProjectsProjectsProjectUuidMembersGet(projectUuid, role, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a Project
         * @summary Get Project
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectProjectsProjectsProjectUuidGet(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getProjectProjectsProjectsProjectUuidGet(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Specific Project Usage
         * @param {string} usageTypeKey 
         * @param {string} projectUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(usageTypeKey: string, projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<ProjectsProjectUsageDB> {
            return localVarFp.getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(usageTypeKey, projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a UsageType  No auth because we may want to use this on pricing/docs pages
         * @summary Get Usage Type
         * @param {string} usageTypeKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsageTypeProjectsUsageTypesUsageTypeKeyGet(usageTypeKey: string, options?: any): AxiosPromise<ProjectsUsageTypeGet> {
            return localVarFp.getUsageTypeProjectsUsageTypesUsageTypeKeyGet(usageTypeKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Member From Project
         * @param {string} projectUuid 
         * @param {string} entityUuid 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(projectUuid, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove Project Key
         * @param {string} projectUuid 
         * @param {string} [accessToken] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeProjectKeyProjectsProjectsProjectUuidKeysDelete(projectUuid: string, accessToken?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.removeProjectKeyProjectsProjectsProjectUuidKeysDelete(projectUuid, accessToken, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sandbox
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxProjectsSandboxGet(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.sandboxProjectsSandboxGet(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Search projects
         * @summary Search Projects
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchProjectsProjectsProjectsGet(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<Page> {
            return localVarFp.searchProjectsProjectsProjectsGet(page, pageSize, search, searchOn, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a UsageType  No auth because we may want to use this on pricing/docs pages
         * @summary Search Usage Type
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsageTypeProjectsUsageTypesGet(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: any): AxiosPromise<Page> {
            return localVarFp.searchUsageTypeProjectsUsageTypesGet(page, pageSize, search, searchOn, sortOn, sortDesc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Project
         * @param {string} projectUuid 
         * @param {ProjectsProjectUpdate} projectsProjectUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectProjectsProjectsProjectUuidPut(projectUuid: string, projectsProjectUpdate: ProjectsProjectUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<any> {
            return localVarFp.updateProjectProjectsProjectsProjectUuidPut(projectUuid, projectsProjectUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Usage Type
         * @param {string} usageTypeKey 
         * @param {ProjectsUsageTypeUpdate} projectsUsageTypeUpdate 
         * @param {string} [xAccessToken] 
         * @param {string} [xSecretToken] 
         * @param {string} [authorization] 
         * @param {string} [ehelplyActiveParticipant] 
         * @param {string} [ehelplyProject] 
         * @param {string} [ehelplyData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(usageTypeKey: string, projectsUsageTypeUpdate: ProjectsUsageTypeUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: any): AxiosPromise<ProjectsUsageTypeDB> {
            return localVarFp.updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(usageTypeKey, projectsUsageTypeUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - interface
 * @export
 * @interface ProjectsApi
 */
export interface ProjectsApiInterface {
    /**
     * 
     * @summary Add Member To Project
     * @param {string} projectUuid 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2005>;

    /**
     * 
     * @summary Archive Project
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    archiveProjectProjectsProjectsProjectUuidDelete(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2003>;

    /**
     * 
     * @summary Create Project Key
     * @param {string} projectUuid 
     * @param {SecurityKeyCreate} securityKeyCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProjectKeyProjectsProjectsProjectUuidKeysPost(projectUuid: string, securityKeyCreate: SecurityKeyCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<CreateKeyResponse>;

    /**
     * Create a new Project
     * @summary Create Project
     * @param {ProjectsProjectCreate} projectsProjectCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createProjectProjectsProjectsPost(projectsProjectCreate: ProjectsProjectCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Create Usage Type
     * @param {ProjectsUsageTypeCreate} projectsUsageTypeCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    createUsageTypeProjectsUsageTypesPost(projectsUsageTypeCreate: ProjectsUsageTypeCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<ProjectsUsageTypeDB>;

    /**
     * 
     * @summary Delete Usage Type
     * @param {string} usageTypeKey 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(usageTypeKey: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2004>;

    /**
     * 
     * @summary Get All Project Usage
     * @param {string} projectUuid 
     * @param {number} [year] 
     * @param {number} [month] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getAllProjectUsageProjectsProjectsProjectUuidUsageGet(projectUuid: string, year?: number, month?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectsProjectUsageDB>>;

    /**
     * 
     * @summary Get Member Projects
     * @param {string} entityUuid 
     * @param {string} [role] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getMemberProjectsProjectsMembersEntityUuidProjectsGet(entityUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectsProjectGet>>;

    /**
     * 
     * @summary Get Project Keys
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectKeysProjectsProjectsProjectUuidKeysGet(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectsProjectMemberDB>>;

    /**
     * 
     * @summary Get Project Members
     * @param {string} projectUuid 
     * @param {string} [role] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectMembersProjectsProjectsProjectUuidMembersGet(projectUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectsProjectMemberDB>>;

    /**
     * Get a Project
     * @summary Get Project
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getProjectProjectsProjectsProjectUuidGet(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Specific Project Usage
     * @param {string} usageTypeKey 
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(usageTypeKey: string, projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<ProjectsProjectUsageDB>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * @summary Get Usage Type
     * @param {string} usageTypeKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    getUsageTypeProjectsUsageTypesUsageTypeKeyGet(usageTypeKey: string, options?: AxiosRequestConfig): AxiosPromise<ProjectsUsageTypeGet>;

    /**
     * 
     * @summary Remove Member From Project
     * @param {string} projectUuid 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2005>;

    /**
     * 
     * @summary Remove Project Key
     * @param {string} projectUuid 
     * @param {string} [accessToken] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    removeProjectKeyProjectsProjectsProjectUuidKeysDelete(projectUuid: string, accessToken?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Sandbox
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    sandboxProjectsSandboxGet(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * Search projects
     * @summary Search Projects
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    searchProjectsProjectsProjectsGet(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<Page>;

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * @summary Search Usage Type
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    searchUsageTypeProjectsUsageTypesGet(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig): AxiosPromise<Page>;

    /**
     * 
     * @summary Update Project
     * @param {string} projectUuid 
     * @param {ProjectsProjectUpdate} projectsProjectUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    updateProjectProjectsProjectsProjectUuidPut(projectUuid: string, projectsProjectUpdate: ProjectsProjectUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Update Usage Type
     * @param {string} usageTypeKey 
     * @param {ProjectsUsageTypeUpdate} projectsUsageTypeUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(usageTypeKey: string, projectsUsageTypeUpdate: ProjectsUsageTypeUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig): AxiosPromise<ProjectsUsageTypeDB>;

}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI implements ProjectsApiInterface {
    /**
     * 
     * @summary Add Member To Project
     * @param {string} projectUuid 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).addMemberToProjectProjectsProjectsProjectUuidMembersEntityUuidPost(projectUuid, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Archive Project
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public archiveProjectProjectsProjectsProjectUuidDelete(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).archiveProjectProjectsProjectsProjectUuidDelete(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Project Key
     * @param {string} projectUuid 
     * @param {SecurityKeyCreate} securityKeyCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProjectKeyProjectsProjectsProjectUuidKeysPost(projectUuid: string, securityKeyCreate: SecurityKeyCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createProjectKeyProjectsProjectsProjectUuidKeysPost(projectUuid, securityKeyCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new Project
     * @summary Create Project
     * @param {ProjectsProjectCreate} projectsProjectCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createProjectProjectsProjectsPost(projectsProjectCreate: ProjectsProjectCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createProjectProjectsProjectsPost(projectsProjectCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Usage Type
     * @param {ProjectsUsageTypeCreate} projectsUsageTypeCreate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public createUsageTypeProjectsUsageTypesPost(projectsUsageTypeCreate: ProjectsUsageTypeCreate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).createUsageTypeProjectsUsageTypesPost(projectsUsageTypeCreate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Usage Type
     * @param {string} usageTypeKey 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(usageTypeKey: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).deleteUsageTypeProjectsUsageTypesUsageTypeKeyDelete(usageTypeKey, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Project Usage
     * @param {string} projectUuid 
     * @param {number} [year] 
     * @param {number} [month] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getAllProjectUsageProjectsProjectsProjectUuidUsageGet(projectUuid: string, year?: number, month?: number, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getAllProjectUsageProjectsProjectsProjectUuidUsageGet(projectUuid, year, month, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Member Projects
     * @param {string} entityUuid 
     * @param {string} [role] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getMemberProjectsProjectsMembersEntityUuidProjectsGet(entityUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getMemberProjectsProjectsMembersEntityUuidProjectsGet(entityUuid, role, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Project Keys
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectKeysProjectsProjectsProjectUuidKeysGet(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectKeysProjectsProjectsProjectUuidKeysGet(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Project Members
     * @param {string} projectUuid 
     * @param {string} [role] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectMembersProjectsProjectsProjectUuidMembersGet(projectUuid: string, role?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectMembersProjectsProjectsProjectUuidMembersGet(projectUuid, role, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a Project
     * @summary Get Project
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getProjectProjectsProjectsProjectUuidGet(projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getProjectProjectsProjectsProjectUuidGet(projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Specific Project Usage
     * @param {string} usageTypeKey 
     * @param {string} projectUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(usageTypeKey: string, projectUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getSpecificProjectUsageProjectsProjectsProjectUuidUsageUsageTypeKeyGet(usageTypeKey, projectUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * @summary Get Usage Type
     * @param {string} usageTypeKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public getUsageTypeProjectsUsageTypesUsageTypeKeyGet(usageTypeKey: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).getUsageTypeProjectsUsageTypesUsageTypeKeyGet(usageTypeKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Member From Project
     * @param {string} projectUuid 
     * @param {string} entityUuid 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(projectUuid: string, entityUuid: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).removeMemberFromProjectProjectsProjectsProjectUuidMembersEntityUuidDelete(projectUuid, entityUuid, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove Project Key
     * @param {string} projectUuid 
     * @param {string} [accessToken] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public removeProjectKeyProjectsProjectsProjectUuidKeysDelete(projectUuid: string, accessToken?: string, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).removeProjectKeyProjectsProjectsProjectUuidKeysDelete(projectUuid, accessToken, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sandbox
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public sandboxProjectsSandboxGet(xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).sandboxProjectsSandboxGet(xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search projects
     * @summary Search Projects
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public searchProjectsProjectsProjectsGet(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).searchProjectsProjectsProjectsGet(page, pageSize, search, searchOn, sortOn, sortDesc, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a UsageType  No auth because we may want to use this on pricing/docs pages
     * @summary Search Usage Type
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public searchUsageTypeProjectsUsageTypesGet(page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).searchUsageTypeProjectsUsageTypesGet(page, pageSize, search, searchOn, sortOn, sortDesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Project
     * @param {string} projectUuid 
     * @param {ProjectsProjectUpdate} projectsProjectUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public updateProjectProjectsProjectsProjectUuidPut(projectUuid: string, projectsProjectUpdate: ProjectsProjectUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateProjectProjectsProjectsProjectUuidPut(projectUuid, projectsProjectUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Usage Type
     * @param {string} usageTypeKey 
     * @param {ProjectsUsageTypeUpdate} projectsUsageTypeUpdate 
     * @param {string} [xAccessToken] 
     * @param {string} [xSecretToken] 
     * @param {string} [authorization] 
     * @param {string} [ehelplyActiveParticipant] 
     * @param {string} [ehelplyProject] 
     * @param {string} [ehelplyData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(usageTypeKey: string, projectsUsageTypeUpdate: ProjectsUsageTypeUpdate, xAccessToken?: string, xSecretToken?: string, authorization?: string, ehelplyActiveParticipant?: string, ehelplyProject?: string, ehelplyData?: string, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).updateUsageTypeProjectsUsageTypesUsageTypeKeyPut(usageTypeKey, projectsUsageTypeUpdate, xAccessToken, xSecretToken, authorization, ehelplyActiveParticipant, ehelplyProject, ehelplyData, options).then((request) => request(this.axios, this.basePath));
    }
}
