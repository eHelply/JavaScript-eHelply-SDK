/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK - 1.1.72
 * eHelply SDK for SuperStack Services
 *
 * The version of the OpenAPI document: 1.1.72
 * Contact: support@ehelply.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost } from '../models';
// @ts-ignore
import { BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost } from '../models';
// @ts-ignore
import { BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost } from '../models';
// @ts-ignore
import { BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost } from '../models';
// @ts-ignore
import { BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost } from '../models';
// @ts-ignore
import { BodyRegisterServiceMonitorServicesPost } from '../models';
// @ts-ignore
import { BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost } from '../models';
// @ts-ignore
import { BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { InlineResponse200 } from '../models';
// @ts-ignore
import { InlineResponse2001 } from '../models';
// @ts-ignore
import { InlineResponse2002 } from '../models';
// @ts-ignore
import { InlineResponse403 } from '../models';
/**
 * MonitorApi - axios parameter creator
 * @export
 */
export const MonitorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Ack Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost: async (service: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost' is not null or undefined
            assertParamExists('ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost', 'bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost', bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/acknowledge`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost: async (service: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost' is not null or undefined
            assertParamExists('assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost', 'bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost', bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/assign`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach Alarm Note
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost: async (service: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost' is not null or undefined
            assertParamExists('attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost', 'bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost', bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/note`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach Alarm Ticket
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost: async (service: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost' is not null or undefined
            assertParamExists('attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost', 'bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost', bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ticket`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clear Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost: async (service: string, stage: string, alarmUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost', 'alarmUuid', alarmUuid)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/clear`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet: async (service: string, stage: string, alarmUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet', 'alarmUuid', alarmUuid)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Alarms
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {boolean} [includeTerminated] 
         * @param {boolean} [includeCleared] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet: async (service: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }

            if (includeTerminated !== undefined) {
                localVarQueryParameter['include_terminated'] = includeTerminated;
            }

            if (includeCleared !== undefined) {
                localVarQueryParameter['include_cleared'] = includeCleared;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Heartbeats
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet: async (service: string, stage: string, history?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/heartbeats`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Kpis
         * @param {string} service 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceKpisMonitorServicesServiceKpisGet: async (service: string, history?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getServiceKpisMonitorServicesServiceKpisGet', 'service', service)
            const localVarPath = `/sam/monitor/services/{service}/kpis`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service
         * @param {string} service 
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {string} [stage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceMonitorServicesServiceGet: async (service: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getServiceMonitorServicesServiceGet', 'service', service)
            const localVarPath = `/sam/monitor/services/{service}`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (heartbeats !== undefined) {
                localVarQueryParameter['heartbeats'] = heartbeats;
            }

            if (heartbeatLimit !== undefined) {
                localVarQueryParameter['heartbeat_limit'] = heartbeatLimit;
            }

            if (alarms !== undefined) {
                localVarQueryParameter['alarms'] = alarms;
            }

            if (alarmLimit !== undefined) {
                localVarQueryParameter['alarm_limit'] = alarmLimit;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getservicespec
         * @param {string} service 
         * @param {string} spec 
         * @param {boolean} [asJson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceSpec: async (service: string, spec: string, asJson?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getServiceSpec', 'service', service)
            // verify required parameter 'spec' is not null or undefined
            assertParamExists('getServiceSpec', 'spec', spec)
            const localVarPath = `/sam/monitor/services/{service}/specs/{spec}`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"spec"}}`, encodeURIComponent(String(spec)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asJson !== undefined) {
                localVarQueryParameter['as_json'] = asJson;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getservicespecs
         * @param {string} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceSpecs: async (service: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getServiceSpecs', 'service', service)
            const localVarPath = `/sam/monitor/services/{service}/specs`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Vitals
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceVitalsMonitorServicesServiceStagesStageVitalsGet: async (service: string, stage: string, history?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('getServiceVitalsMonitorServicesServiceStagesStageVitalsGet', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('getServiceVitalsMonitorServicesServiceStagesStageVitalsGet', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/vitals`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Services
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {boolean} [includeHidden] 
         * @param {string} [stage] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesMonitorServicesGet: async (heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/monitor/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (heartbeats !== undefined) {
                localVarQueryParameter['heartbeats'] = heartbeats;
            }

            if (heartbeatLimit !== undefined) {
                localVarQueryParameter['heartbeat_limit'] = heartbeatLimit;
            }

            if (alarms !== undefined) {
                localVarQueryParameter['alarms'] = alarms;
            }

            if (alarmLimit !== undefined) {
                localVarQueryParameter['alarm_limit'] = alarmLimit;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Getserviceswithspecs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesWithSpecs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/monitor/specs/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hide Service
         * @param {string} service 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideServiceMonitorServicesServiceStagesStageHidePost: async (service: string, stage: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('hideServiceMonitorServicesServiceStagesStageHidePost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('hideServiceMonitorServicesServiceStagesStageHidePost', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/hide`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ignore Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost: async (service: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost' is not null or undefined
            assertParamExists('ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost', 'bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost', bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/ignore`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register Service
         * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerServiceMonitorServicesPost: async (bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyRegisterServiceMonitorServicesPost' is not null or undefined
            assertParamExists('registerServiceMonitorServicesPost', 'bodyRegisterServiceMonitorServicesPost', bodyRegisterServiceMonitorServicesPost)
            const localVarPath = `/sam/monitor/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyRegisterServiceMonitorServicesPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Alarms
         * @param {string} service 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAlarmsMonitorServicesServiceAlarmsGet: async (service: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('searchAlarmsMonitorServicesServiceAlarmsGet', 'service', service)
            const localVarPath = `/sam/monitor/services/{service}/alarms`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (searchOn !== undefined) {
                localVarQueryParameter['search_on'] = searchOn;
            }

            if (sortOn !== undefined) {
                localVarQueryParameter['sort_on'] = sortOn;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sort_desc'] = sortDesc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Service
         * @param {string} service 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceMonitorServicesServiceStagesStageShowPost: async (service: string, stage: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('showServiceMonitorServicesServiceStagesStageShowPost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('showServiceMonitorServicesServiceStagesStageShowPost', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/show`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Terminate Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost: async (service: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost' is not null or undefined
            assertParamExists('terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost', 'bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost', bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms/{alarm_uuid}/terminate`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Trigger Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerAlarmMonitorServicesServiceStagesStageAlarmsPost: async (service: string, stage: string, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('triggerAlarmMonitorServicesServiceStagesStageAlarmsPost', 'service', service)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('triggerAlarmMonitorServicesServiceStagesStageAlarmsPost', 'stage', stage)
            // verify required parameter 'bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost' is not null or undefined
            assertParamExists('triggerAlarmMonitorServicesServiceStagesStageAlarmsPost', 'bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost', bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost)
            const localVarPath = `/sam/monitor/services/{service}/stages/{stage}/alarms`
                .replace(`{${"service"}}`, encodeURIComponent(String(service)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MonitorApi - functional programming interface
 * @export
 */
export const MonitorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MonitorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Ack Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(service: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(service, stage, alarmUuid, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Assign Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(service: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(service, stage, alarmUuid, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Attach Alarm Note
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(service: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(service, stage, alarmUuid, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Attach Alarm Ticket
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(service: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(service, stage, alarmUuid, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clear Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(service: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(service, stage, alarmUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(service: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(service, stage, alarmUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Alarms
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {boolean} [includeTerminated] 
         * @param {boolean} [includeCleared] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(service: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(service, stage, history, includeTerminated, includeCleared, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Heartbeats
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(service: string, stage: string, history?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(service, stage, history, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Kpis
         * @param {string} service 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceKpisMonitorServicesServiceKpisGet(service: string, history?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceKpisMonitorServicesServiceKpisGet(service, history, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service
         * @param {string} service 
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {string} [stage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceMonitorServicesServiceGet(service: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceMonitorServicesServiceGet(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Getservicespec
         * @param {string} service 
         * @param {string} spec 
         * @param {boolean} [asJson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceSpec(service: string, spec: string, asJson?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceSpec(service, spec, asJson, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Getservicespecs
         * @param {string} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceSpecs(service: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceSpecs(service, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Vitals
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(service: string, stage: string, history?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(service, stage, history, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Services
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {boolean} [includeHidden] 
         * @param {string} [stage] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServicesMonitorServicesGet(heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServicesMonitorServicesGet(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Getserviceswithspecs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServicesWithSpecs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServicesWithSpecs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hide Service
         * @param {string} service 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hideServiceMonitorServicesServiceStagesStageHidePost(service: string, stage: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hideServiceMonitorServicesServiceStagesStageHidePost(service, stage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Ignore Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(service: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(service, stage, alarmUuid, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register Service
         * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Alarms
         * @param {string} service 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAlarmsMonitorServicesServiceAlarmsGet(service: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAlarmsMonitorServicesServiceAlarmsGet(service, page, pageSize, search, searchOn, sortOn, sortDesc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Service
         * @param {string} service 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceMonitorServicesServiceStagesStageShowPost(service: string, stage: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceMonitorServicesServiceStagesStageShowPost(service, stage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Terminate Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(service: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(service, stage, alarmUuid, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Trigger Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(service: string, stage: string, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(service, stage, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MonitorApi - factory interface
 * @export
 */
export const MonitorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MonitorApiFp(configuration)
    return {
        /**
         * 
         * @summary Ack Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(service: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, options?: any): AxiosPromise<any> {
            return localVarFp.ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(service, stage, alarmUuid, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(service: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, options?: any): AxiosPromise<any> {
            return localVarFp.assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(service, stage, alarmUuid, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attach Alarm Note
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(service: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, options?: any): AxiosPromise<any> {
            return localVarFp.attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(service, stage, alarmUuid, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attach Alarm Ticket
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(service: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, options?: any): AxiosPromise<any> {
            return localVarFp.attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(service, stage, alarmUuid, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clear Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(service: string, stage: string, alarmUuid: string, options?: any): AxiosPromise<any> {
            return localVarFp.clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(service, stage, alarmUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(service: string, stage: string, alarmUuid: string, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(service, stage, alarmUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Alarms
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {boolean} [includeTerminated] 
         * @param {boolean} [includeCleared] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(service: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(service, stage, history, includeTerminated, includeCleared, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Heartbeats
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(service: string, stage: string, history?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(service, stage, history, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Kpis
         * @param {string} service 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceKpisMonitorServicesServiceKpisGet(service: string, history?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceKpisMonitorServicesServiceKpisGet(service, history, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service
         * @param {string} service 
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {string} [stage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceMonitorServicesServiceGet(service: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceMonitorServicesServiceGet(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getservicespec
         * @param {string} service 
         * @param {string} spec 
         * @param {boolean} [asJson] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceSpec(service: string, spec: string, asJson?: boolean, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.getServiceSpec(service, spec, asJson, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getservicespecs
         * @param {string} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceSpecs(service: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.getServiceSpecs(service, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Vitals
         * @param {string} service 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(service: string, stage: string, history?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(service, stage, history, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Services
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {boolean} [includeHidden] 
         * @param {string} [stage] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesMonitorServicesGet(heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getServicesMonitorServicesGet(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Getserviceswithspecs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesWithSpecs(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.getServicesWithSpecs(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hide Service
         * @param {string} service 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideServiceMonitorServicesServiceStagesStageHidePost(service: string, stage: string, options?: any): AxiosPromise<any> {
            return localVarFp.hideServiceMonitorServicesServiceStagesStageHidePost(service, stage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ignore Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(service: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, options?: any): AxiosPromise<any> {
            return localVarFp.ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(service, stage, alarmUuid, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register Service
         * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options?: any): AxiosPromise<any> {
            return localVarFp.registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Alarms
         * @param {string} service 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAlarmsMonitorServicesServiceAlarmsGet(service: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.searchAlarmsMonitorServicesServiceAlarmsGet(service, page, pageSize, search, searchOn, sortOn, sortDesc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Service
         * @param {string} service 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceMonitorServicesServiceStagesStageShowPost(service: string, stage: string, options?: any): AxiosPromise<any> {
            return localVarFp.showServiceMonitorServicesServiceStagesStageShowPost(service, stage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Terminate Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(service: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, options?: any): AxiosPromise<any> {
            return localVarFp.terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(service, stage, alarmUuid, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Trigger Alarm
         * @param {string} service 
         * @param {string} stage 
         * @param {BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(service: string, stage: string, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, options?: any): AxiosPromise<any> {
            return localVarFp.triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(service, stage, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MonitorApi - interface
 * @export
 * @interface MonitorApi
 */
export interface MonitorApiInterface {
    /**
     * 
     * @summary Ack Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(service: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Assign Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(service: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Attach Alarm Note
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(service: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Attach Alarm Ticket
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(service: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Clear Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(service: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(service: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Alarms
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {boolean} [includeTerminated] 
     * @param {boolean} [includeCleared] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(service: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Heartbeats
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(service: string, stage: string, history?: number, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Kpis
     * @param {string} service 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceKpisMonitorServicesServiceKpisGet(service: string, history?: number, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service
     * @param {string} service 
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {string} [stage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceMonitorServicesServiceGet(service: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Getservicespec
     * @param {string} service 
     * @param {string} spec 
     * @param {boolean} [asJson] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceSpec(service: string, spec: string, asJson?: boolean, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2002>;

    /**
     * 
     * @summary Getservicespecs
     * @param {string} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceSpecs(service: string, options?: AxiosRequestConfig): AxiosPromise<InlineResponse2001>;

    /**
     * 
     * @summary Get Service Vitals
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(service: string, stage: string, history?: number, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Services
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {boolean} [includeHidden] 
     * @param {string} [stage] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServicesMonitorServicesGet(heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Getserviceswithspecs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServicesWithSpecs(options?: AxiosRequestConfig): AxiosPromise<InlineResponse200>;

    /**
     * 
     * @summary Hide Service
     * @param {string} service 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    hideServiceMonitorServicesServiceStagesStageHidePost(service: string, stage: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Ignore Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(service: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Register Service
     * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Search Alarms
     * @param {string} service 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    searchAlarmsMonitorServicesServiceAlarmsGet(service: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Show Service
     * @param {string} service 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    showServiceMonitorServicesServiceStagesStageShowPost(service: string, stage: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Terminate Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(service: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Trigger Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(service: string, stage: string, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * MonitorApi - object-oriented interface
 * @export
 * @class MonitorApi
 * @extends {BaseAPI}
 */
export class MonitorApi extends BaseAPI implements MonitorApiInterface {
    /**
     * 
     * @summary Ack Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(service: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).ackAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost(service, stage, alarmUuid, bodyAckAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAcknowledgePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(service: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).assignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost(service, stage, alarmUuid, bodyAssignAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidAssignPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attach Alarm Note
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(service: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).attachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost(service, stage, alarmUuid, bodyAttachAlarmNoteMonitorServicesServiceStagesStageAlarmsAlarmUuidNotePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attach Alarm Ticket
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(service: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).attachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost(service, stage, alarmUuid, bodyAttachAlarmTicketMonitorServicesServiceStagesStageAlarmsAlarmUuidTicketPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clear Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(service: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).clearAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidClearPost(service, stage, alarmUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(service: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidGet(service, stage, alarmUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Alarms
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {boolean} [includeTerminated] 
     * @param {boolean} [includeCleared] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(service: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceAlarmsMonitorServicesServiceStagesStageAlarmsGet(service, stage, history, includeTerminated, includeCleared, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Heartbeats
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(service: string, stage: string, history?: number, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceHeartbeatsMonitorServicesServiceStagesStageHeartbeatsGet(service, stage, history, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Kpis
     * @param {string} service 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceKpisMonitorServicesServiceKpisGet(service: string, history?: number, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceKpisMonitorServicesServiceKpisGet(service, history, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service
     * @param {string} service 
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {string} [stage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceMonitorServicesServiceGet(service: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceMonitorServicesServiceGet(service, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getservicespec
     * @param {string} service 
     * @param {string} spec 
     * @param {boolean} [asJson] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceSpec(service: string, spec: string, asJson?: boolean, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceSpec(service, spec, asJson, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getservicespecs
     * @param {string} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceSpecs(service: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceSpecs(service, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Vitals
     * @param {string} service 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(service: string, stage: string, history?: number, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceVitalsMonitorServicesServiceStagesStageVitalsGet(service, stage, history, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Services
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {boolean} [includeHidden] 
     * @param {string} [stage] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServicesMonitorServicesGet(heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServicesMonitorServicesGet(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Getserviceswithspecs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServicesWithSpecs(options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServicesWithSpecs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hide Service
     * @param {string} service 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public hideServiceMonitorServicesServiceStagesStageHidePost(service: string, stage: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).hideServiceMonitorServicesServiceStagesStageHidePost(service, stage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ignore Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(service: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).ignoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost(service, stage, alarmUuid, bodyIgnoreAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidIgnorePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register Service
     * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Alarms
     * @param {string} service 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public searchAlarmsMonitorServicesServiceAlarmsGet(service: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).searchAlarmsMonitorServicesServiceAlarmsGet(service, page, pageSize, search, searchOn, sortOn, sortDesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Service
     * @param {string} service 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public showServiceMonitorServicesServiceStagesStageShowPost(service: string, stage: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).showServiceMonitorServicesServiceStagesStageShowPost(service, stage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Terminate Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(service: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).terminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost(service, stage, alarmUuid, bodyTerminateAlarmMonitorServicesServiceStagesStageAlarmsAlarmUuidTerminatePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Trigger Alarm
     * @param {string} service 
     * @param {string} stage 
     * @param {BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(service: string, stage: string, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).triggerAlarmMonitorServicesServiceStagesStageAlarmsPost(service, stage, bodyTriggerAlarmMonitorServicesServiceStagesStageAlarmsPost, options).then((request) => request(this.axios, this.basePath));
    }
}
