/* tslint:disable */
/* eslint-disable */
/**
 * eHelply SDK
 * eHelply SDK
 *
 * The version of the OpenAPI document: 1.1.31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost } from '../models';
// @ts-ignore
import { BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost } from '../models';
// @ts-ignore
import { BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost } from '../models';
// @ts-ignore
import { BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost } from '../models';
// @ts-ignore
import { BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost } from '../models';
// @ts-ignore
import { BodyRegisterServiceMonitorServicesPost } from '../models';
// @ts-ignore
import { BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost } from '../models';
// @ts-ignore
import { BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
/**
 * MonitorApi - axios parameter creator
 * @export
 */
export const MonitorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Ack Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost: async (serviceUuid: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost' is not null or undefined
            assertParamExists('ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost', 'bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost', bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/acknowledge`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Assign Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost: async (serviceUuid: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost' is not null or undefined
            assertParamExists('assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost', 'bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost', bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/assign`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach Alarm Note
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost: async (serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost' is not null or undefined
            assertParamExists('attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost', 'bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost', bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/note`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach Alarm Ticket
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost: async (serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost' is not null or undefined
            assertParamExists('attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost', 'bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost', bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/ticket`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clear Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost: async (serviceUuid: string, stage: string, alarmUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost', 'alarmUuid', alarmUuid)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/clear`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet: async (serviceUuid: string, stage: string, alarmUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet', 'alarmUuid', alarmUuid)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Alarms
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {boolean} [includeTerminated] 
         * @param {boolean} [includeCleared] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet: async (serviceUuid: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }

            if (includeTerminated !== undefined) {
                localVarQueryParameter['include_terminated'] = includeTerminated;
            }

            if (includeCleared !== undefined) {
                localVarQueryParameter['include_cleared'] = includeCleared;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Heartbeats
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet: async (serviceUuid: string, stage: string, history?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/heartbeats`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Kpis
         * @param {string} serviceUuid 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceKpisMonitorServicesServiceUuidKpisGet: async (serviceUuid: string, history?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('getServiceKpisMonitorServicesServiceUuidKpisGet', 'serviceUuid', serviceUuid)
            const localVarPath = `/sam/monitor/services/{service_uuid}/kpis`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service
         * @param {string} serviceUuid 
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {string} [stage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceMonitorServicesServiceUuidGet: async (serviceUuid: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('getServiceMonitorServicesServiceUuidGet', 'serviceUuid', serviceUuid)
            const localVarPath = `/sam/monitor/services/{service_uuid}`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (heartbeats !== undefined) {
                localVarQueryParameter['heartbeats'] = heartbeats;
            }

            if (heartbeatLimit !== undefined) {
                localVarQueryParameter['heartbeat_limit'] = heartbeatLimit;
            }

            if (alarms !== undefined) {
                localVarQueryParameter['alarms'] = alarms;
            }

            if (alarmLimit !== undefined) {
                localVarQueryParameter['alarm_limit'] = alarmLimit;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Service Vitals
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet: async (serviceUuid: string, stage: string, history?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/vitals`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (history !== undefined) {
                localVarQueryParameter['history'] = history;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Services
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {boolean} [includeHidden] 
         * @param {string} [stage] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesMonitorServicesGet: async (heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sam/monitor/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (heartbeats !== undefined) {
                localVarQueryParameter['heartbeats'] = heartbeats;
            }

            if (heartbeatLimit !== undefined) {
                localVarQueryParameter['heartbeat_limit'] = heartbeatLimit;
            }

            if (alarms !== undefined) {
                localVarQueryParameter['alarms'] = alarms;
            }

            if (alarmLimit !== undefined) {
                localVarQueryParameter['alarm_limit'] = alarmLimit;
            }

            if (includeHidden !== undefined) {
                localVarQueryParameter['include_hidden'] = includeHidden;
            }

            if (stage !== undefined) {
                localVarQueryParameter['stage'] = stage;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Hide Service
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideServiceMonitorServicesServiceUuidStagesStageHidePost: async (serviceUuid: string, stage: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('hideServiceMonitorServicesServiceUuidStagesStageHidePost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('hideServiceMonitorServicesServiceUuidStagesStageHidePost', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/hide`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Ignore Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost: async (serviceUuid: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost' is not null or undefined
            assertParamExists('ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost', 'bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost', bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/ignore`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register Service
         * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerServiceMonitorServicesPost: async (bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bodyRegisterServiceMonitorServicesPost' is not null or undefined
            assertParamExists('registerServiceMonitorServicesPost', 'bodyRegisterServiceMonitorServicesPost', bodyRegisterServiceMonitorServicesPost)
            const localVarPath = `/sam/monitor/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyRegisterServiceMonitorServicesPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Alarms
         * @param {string} serviceUuid 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAlarmsMonitorServicesServiceUuidAlarmsGet: async (serviceUuid: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('searchAlarmsMonitorServicesServiceUuidAlarmsGet', 'serviceUuid', serviceUuid)
            const localVarPath = `/sam/monitor/services/{service_uuid}/alarms`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (searchOn !== undefined) {
                localVarQueryParameter['search_on'] = searchOn;
            }

            if (sortOn !== undefined) {
                localVarQueryParameter['sort_on'] = sortOn;
            }

            if (sortDesc !== undefined) {
                localVarQueryParameter['sort_desc'] = sortDesc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show Service
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceMonitorServicesServiceUuidStagesStageShowPost: async (serviceUuid: string, stage: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('showServiceMonitorServicesServiceUuidStagesStageShowPost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('showServiceMonitorServicesServiceUuidStagesStageShowPost', 'stage', stage)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/show`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Terminate Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost: async (serviceUuid: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost', 'stage', stage)
            // verify required parameter 'alarmUuid' is not null or undefined
            assertParamExists('terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost', 'alarmUuid', alarmUuid)
            // verify required parameter 'bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost' is not null or undefined
            assertParamExists('terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost', 'bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost', bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms/{alarm_uuid}/terminate`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)))
                .replace(`{${"alarm_uuid"}}`, encodeURIComponent(String(alarmUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Trigger Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost: async (serviceUuid: string, stage: string, bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUuid' is not null or undefined
            assertParamExists('triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost', 'serviceUuid', serviceUuid)
            // verify required parameter 'stage' is not null or undefined
            assertParamExists('triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost', 'stage', stage)
            // verify required parameter 'bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost' is not null or undefined
            assertParamExists('triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost', 'bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost', bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost)
            const localVarPath = `/sam/monitor/services/{service_uuid}/stages/{stage}/alarms`
                .replace(`{${"service_uuid"}}`, encodeURIComponent(String(serviceUuid)))
                .replace(`{${"stage"}}`, encodeURIComponent(String(stage)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MonitorApi - functional programming interface
 * @export
 */
export const MonitorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MonitorApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Ack Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost(serviceUuid: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost(serviceUuid, stage, alarmUuid, bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Assign Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost(serviceUuid: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost(serviceUuid, stage, alarmUuid, bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Attach Alarm Note
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost(serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost(serviceUuid, stage, alarmUuid, bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Attach Alarm Ticket
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost(serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost(serviceUuid, stage, alarmUuid, bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clear Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost(serviceUuid: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost(serviceUuid, stage, alarmUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet(serviceUuid: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet(serviceUuid, stage, alarmUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Alarms
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {boolean} [includeTerminated] 
         * @param {boolean} [includeCleared] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet(serviceUuid: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet(serviceUuid, stage, history, includeTerminated, includeCleared, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Heartbeats
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet(serviceUuid: string, stage: string, history?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet(serviceUuid, stage, history, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Kpis
         * @param {string} serviceUuid 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceKpisMonitorServicesServiceUuidKpisGet(serviceUuid: string, history?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceKpisMonitorServicesServiceUuidKpisGet(serviceUuid, history, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service
         * @param {string} serviceUuid 
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {string} [stage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceMonitorServicesServiceUuidGet(serviceUuid: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceMonitorServicesServiceUuidGet(serviceUuid, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Service Vitals
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet(serviceUuid: string, stage: string, history?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet(serviceUuid, stage, history, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Services
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {boolean} [includeHidden] 
         * @param {string} [stage] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServicesMonitorServicesGet(heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServicesMonitorServicesGet(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Hide Service
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hideServiceMonitorServicesServiceUuidStagesStageHidePost(serviceUuid: string, stage: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hideServiceMonitorServicesServiceUuidStagesStageHidePost(serviceUuid, stage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Ignore Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost(serviceUuid: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost(serviceUuid, stage, alarmUuid, bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register Service
         * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Search Alarms
         * @param {string} serviceUuid 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchAlarmsMonitorServicesServiceUuidAlarmsGet(serviceUuid: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchAlarmsMonitorServicesServiceUuidAlarmsGet(serviceUuid, page, pageSize, search, searchOn, sortOn, sortDesc, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show Service
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceMonitorServicesServiceUuidStagesStageShowPost(serviceUuid: string, stage: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceMonitorServicesServiceUuidStagesStageShowPost(serviceUuid, stage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Terminate Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost(serviceUuid: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost(serviceUuid, stage, alarmUuid, bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Trigger Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost(serviceUuid: string, stage: string, bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost(serviceUuid, stage, bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MonitorApi - factory interface
 * @export
 */
export const MonitorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MonitorApiFp(configuration)
    return {
        /**
         * 
         * @summary Ack Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost(serviceUuid: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, options?: any): AxiosPromise<any> {
            return localVarFp.ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost(serviceUuid, stage, alarmUuid, bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Assign Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost(serviceUuid: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, options?: any): AxiosPromise<any> {
            return localVarFp.assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost(serviceUuid, stage, alarmUuid, bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attach Alarm Note
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost(serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, options?: any): AxiosPromise<any> {
            return localVarFp.attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost(serviceUuid, stage, alarmUuid, bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Attach Alarm Ticket
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost(serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, options?: any): AxiosPromise<any> {
            return localVarFp.attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost(serviceUuid, stage, alarmUuid, bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clear Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost(serviceUuid: string, stage: string, alarmUuid: string, options?: any): AxiosPromise<any> {
            return localVarFp.clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost(serviceUuid, stage, alarmUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet(serviceUuid: string, stage: string, alarmUuid: string, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet(serviceUuid, stage, alarmUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Alarms
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {boolean} [includeTerminated] 
         * @param {boolean} [includeCleared] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet(serviceUuid: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet(serviceUuid, stage, history, includeTerminated, includeCleared, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Heartbeats
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet(serviceUuid: string, stage: string, history?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet(serviceUuid, stage, history, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Kpis
         * @param {string} serviceUuid 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceKpisMonitorServicesServiceUuidKpisGet(serviceUuid: string, history?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceKpisMonitorServicesServiceUuidKpisGet(serviceUuid, history, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service
         * @param {string} serviceUuid 
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {string} [stage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceMonitorServicesServiceUuidGet(serviceUuid: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceMonitorServicesServiceUuidGet(serviceUuid, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Service Vitals
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {number} [history] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet(serviceUuid: string, stage: string, history?: number, options?: any): AxiosPromise<any> {
            return localVarFp.getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet(serviceUuid, stage, history, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Services
         * @param {boolean} [heartbeats] 
         * @param {number} [heartbeatLimit] 
         * @param {boolean} [alarms] 
         * @param {number} [alarmLimit] 
         * @param {boolean} [includeHidden] 
         * @param {string} [stage] 
         * @param {string} [key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServicesMonitorServicesGet(heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getServicesMonitorServicesGet(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Hide Service
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideServiceMonitorServicesServiceUuidStagesStageHidePost(serviceUuid: string, stage: string, options?: any): AxiosPromise<any> {
            return localVarFp.hideServiceMonitorServicesServiceUuidStagesStageHidePost(serviceUuid, stage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Ignore Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost(serviceUuid: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, options?: any): AxiosPromise<any> {
            return localVarFp.ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost(serviceUuid, stage, alarmUuid, bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register Service
         * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options?: any): AxiosPromise<any> {
            return localVarFp.registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Alarms
         * @param {string} serviceUuid 
         * @param {number} [page] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {string} [searchOn] 
         * @param {string} [sortOn] 
         * @param {boolean} [sortDesc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchAlarmsMonitorServicesServiceUuidAlarmsGet(serviceUuid: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: any): AxiosPromise<any> {
            return localVarFp.searchAlarmsMonitorServicesServiceUuidAlarmsGet(serviceUuid, page, pageSize, search, searchOn, sortOn, sortDesc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show Service
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceMonitorServicesServiceUuidStagesStageShowPost(serviceUuid: string, stage: string, options?: any): AxiosPromise<any> {
            return localVarFp.showServiceMonitorServicesServiceUuidStagesStageShowPost(serviceUuid, stage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Terminate Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {string} alarmUuid 
         * @param {BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost(serviceUuid: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, options?: any): AxiosPromise<any> {
            return localVarFp.terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost(serviceUuid, stage, alarmUuid, bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Trigger Alarm
         * @param {string} serviceUuid 
         * @param {string} stage 
         * @param {BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost(serviceUuid: string, stage: string, bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, options?: any): AxiosPromise<any> {
            return localVarFp.triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost(serviceUuid, stage, bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MonitorApi - interface
 * @export
 * @interface MonitorApi
 */
export interface MonitorApiInterface {
    /**
     * 
     * @summary Ack Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost(serviceUuid: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Assign Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost(serviceUuid: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Attach Alarm Note
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost(serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Attach Alarm Ticket
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost(serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Clear Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost(serviceUuid: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet(serviceUuid: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Alarms
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {boolean} [includeTerminated] 
     * @param {boolean} [includeCleared] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet(serviceUuid: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Heartbeats
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet(serviceUuid: string, stage: string, history?: number, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Kpis
     * @param {string} serviceUuid 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceKpisMonitorServicesServiceUuidKpisGet(serviceUuid: string, history?: number, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service
     * @param {string} serviceUuid 
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {string} [stage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceMonitorServicesServiceUuidGet(serviceUuid: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Service Vitals
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet(serviceUuid: string, stage: string, history?: number, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Get Services
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {boolean} [includeHidden] 
     * @param {string} [stage] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    getServicesMonitorServicesGet(heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Hide Service
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    hideServiceMonitorServicesServiceUuidStagesStageHidePost(serviceUuid: string, stage: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Ignore Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost(serviceUuid: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Register Service
     * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Search Alarms
     * @param {string} serviceUuid 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    searchAlarmsMonitorServicesServiceUuidAlarmsGet(serviceUuid: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Show Service
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    showServiceMonitorServicesServiceUuidStagesStageShowPost(serviceUuid: string, stage: string, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Terminate Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost(serviceUuid: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, options?: AxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Trigger Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApiInterface
     */
    triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost(serviceUuid: string, stage: string, bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, options?: AxiosRequestConfig): AxiosPromise<any>;

}

/**
 * MonitorApi - object-oriented interface
 * @export
 * @class MonitorApi
 * @extends {BaseAPI}
 */
export class MonitorApi extends BaseAPI implements MonitorApiInterface {
    /**
     * 
     * @summary Ack Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost} bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost(serviceUuid: string, stage: string, alarmUuid: string, bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost: BodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).ackAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost(serviceUuid, stage, alarmUuid, bodyAckAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAcknowledgePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Assign Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost} bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost(serviceUuid: string, stage: string, alarmUuid: string, bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost: BodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).assignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost(serviceUuid, stage, alarmUuid, bodyAssignAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidAssignPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attach Alarm Note
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost} bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost(serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost: BodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).attachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost(serviceUuid, stage, alarmUuid, bodyAttachAlarmNoteMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidNotePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Attach Alarm Ticket
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost} bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost(serviceUuid: string, stage: string, alarmUuid: string, bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost: BodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).attachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost(serviceUuid, stage, alarmUuid, bodyAttachAlarmTicketMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTicketPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clear Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost(serviceUuid: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).clearAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidClearPost(serviceUuid, stage, alarmUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet(serviceUuid: string, stage: string, alarmUuid: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidGet(serviceUuid, stage, alarmUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Alarms
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {boolean} [includeTerminated] 
     * @param {boolean} [includeCleared] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet(serviceUuid: string, stage: string, history?: number, includeTerminated?: boolean, includeCleared?: boolean, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceAlarmsMonitorServicesServiceUuidStagesStageAlarmsGet(serviceUuid, stage, history, includeTerminated, includeCleared, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Heartbeats
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet(serviceUuid: string, stage: string, history?: number, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceHeartbeatsMonitorServicesServiceUuidStagesStageHeartbeatsGet(serviceUuid, stage, history, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Kpis
     * @param {string} serviceUuid 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceKpisMonitorServicesServiceUuidKpisGet(serviceUuid: string, history?: number, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceKpisMonitorServicesServiceUuidKpisGet(serviceUuid, history, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service
     * @param {string} serviceUuid 
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {string} [stage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceMonitorServicesServiceUuidGet(serviceUuid: string, heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, stage?: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceMonitorServicesServiceUuidGet(serviceUuid, heartbeats, heartbeatLimit, alarms, alarmLimit, stage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Service Vitals
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {number} [history] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet(serviceUuid: string, stage: string, history?: number, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServiceVitalsMonitorServicesServiceUuidStagesStageVitalsGet(serviceUuid, stage, history, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Services
     * @param {boolean} [heartbeats] 
     * @param {number} [heartbeatLimit] 
     * @param {boolean} [alarms] 
     * @param {number} [alarmLimit] 
     * @param {boolean} [includeHidden] 
     * @param {string} [stage] 
     * @param {string} [key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public getServicesMonitorServicesGet(heartbeats?: boolean, heartbeatLimit?: number, alarms?: boolean, alarmLimit?: number, includeHidden?: boolean, stage?: string, key?: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).getServicesMonitorServicesGet(heartbeats, heartbeatLimit, alarms, alarmLimit, includeHidden, stage, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Hide Service
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public hideServiceMonitorServicesServiceUuidStagesStageHidePost(serviceUuid: string, stage: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).hideServiceMonitorServicesServiceUuidStagesStageHidePost(serviceUuid, stage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Ignore Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost} bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost(serviceUuid: string, stage: string, alarmUuid: string, bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost: BodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).ignoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost(serviceUuid, stage, alarmUuid, bodyIgnoreAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidIgnorePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register Service
     * @param {BodyRegisterServiceMonitorServicesPost} bodyRegisterServiceMonitorServicesPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost: BodyRegisterServiceMonitorServicesPost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).registerServiceMonitorServicesPost(bodyRegisterServiceMonitorServicesPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Search Alarms
     * @param {string} serviceUuid 
     * @param {number} [page] 
     * @param {number} [pageSize] 
     * @param {string} [search] 
     * @param {string} [searchOn] 
     * @param {string} [sortOn] 
     * @param {boolean} [sortDesc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public searchAlarmsMonitorServicesServiceUuidAlarmsGet(serviceUuid: string, page?: number, pageSize?: number, search?: string, searchOn?: string, sortOn?: string, sortDesc?: boolean, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).searchAlarmsMonitorServicesServiceUuidAlarmsGet(serviceUuid, page, pageSize, search, searchOn, sortOn, sortDesc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show Service
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public showServiceMonitorServicesServiceUuidStagesStageShowPost(serviceUuid: string, stage: string, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).showServiceMonitorServicesServiceUuidStagesStageShowPost(serviceUuid, stage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Terminate Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {string} alarmUuid 
     * @param {BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost} bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost(serviceUuid: string, stage: string, alarmUuid: string, bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost: BodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).terminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost(serviceUuid, stage, alarmUuid, bodyTerminateAlarmMonitorServicesServiceUuidStagesStageAlarmsAlarmUuidTerminatePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Trigger Alarm
     * @param {string} serviceUuid 
     * @param {string} stage 
     * @param {BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost} bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MonitorApi
     */
    public triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost(serviceUuid: string, stage: string, bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost: BodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, options?: AxiosRequestConfig) {
        return MonitorApiFp(this.configuration).triggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost(serviceUuid, stage, bodyTriggerAlarmMonitorServicesServiceUuidStagesStageAlarmsPost, options).then((request) => request(this.axios, this.basePath));
    }
}
